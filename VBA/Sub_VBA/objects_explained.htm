<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Objects</title>
</head>

<body>

<div class="title">
	<font size="5">Objects</font></div>
<!--
      Content type: Devdiv1. Transform: orcas2mtps.xslt.
    -->
<div id="mainSection">
	<div id="mainBody">
		<div class="introduction">
			An <span class="term">object</span> is a programming structure 
			combining both code and data that can be treated as a single unit. 
			An object can <br>
			be a piece of an application, like <b>Workbook</b> object, <b>
			Worksheet</b> object, <b>Range</b> objects, a control or a form. An 
			entire <br>
			Excel application can also be an object. Objects let you declare 
			variables and procedures once and then reuse them <br>
			whenever needed.<p>Objects are arranged in hierarchy. For example, 
			at the top of the Excel object model is the <b>Application</b> 
			object, and under <br>
			which is the <b>Workbook</b> object. Within each Workbook object are 
			the <b>Range</b> objects, <b>Cells</b> objects, and so on. Each <br>
			object can contain settings called <font color="#0000FF">properties</font>, 
			and actions that can be performed on the object called
			<font color="#0000FF">methods</font>. In example <br>
			line 1 below, you specify a range of cells A1:A10 in the range 
			property and use the value property to place the text <br>
			&quot;Hello VBA&quot; in the cells. In line 2, you copy the range of cells in 
			the activecell column and paste it into range B1:B10 <br>
			in Sheet2.</div>
	</div>
</div>
<p><font color="#008000">Worksheets(&quot;Sheet1&quot;).Range(&quot;A1:A10&quot;).Value = &quot;Hello 
VBA&quot;<br>
Sheets(1).Range(ActiveCell.Address, _<br>
Cells(Rows.Count, ActiveCell.Column).End(xlUp).Address).Copy 
Sheets(2).Range(&quot;A1&quot;).Offset(0, 1)</font></p>

</body>

</html>
