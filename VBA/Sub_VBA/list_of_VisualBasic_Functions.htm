<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
<title>Visual Basic 5 complete list of functions</title>
<link rel="stylesheet" type="text/css" href="style.css">
<meta name="description" content="a complete list of visual basic functions.">
<meta name="keywords" content="visual basic functions,visual basic code">

<style>
<!--
A.type1:link    {color:#979B9B; text-decoration:none;}
A.type1:visited {color:#979B9B; text-decoration:none;}
A.type1:active  {color:#979B9B; text-decoration:none;}
A.type1:hover   {color:#800000; text-decoration:underline;}

A.type2:link    {color:#000080; text-decoration:none;}
A.type2:visited {color:#000080; text-decoration:none;}
A.type2:active  {color:#000080; text-decoration:none;}
A.type2:hover   {color:#800000; text-decoration:underline;}

A.type3:link    {color:#000080; text-decoration:none;}
A.type3:visited {color:#000080; text-decoration:none;}
A.type3:active  {color:#000080; text-decoration:none;}
A.type3:hover   {color:#800000; text-decoration:overline underline;}
//-->
</style>


<style type="text/css">
body {scrollbar-3dlight-color:#000000;
scrollbar-arrow-color:#FFFFFF;
scrollbar-base-color:#ffffff;
scrollbar-darkshadow-color:#000000;
scrollbar-face-color:#660000;
scrollbar-highlight-color:#ffffff;
scrollbar-shadow-color:#ffffff}
</style>

<style>
	table.includes {border-top:1px solid #ccc}
	table.includes td {font:normal 11px sans-serif; border-bottom: 1px solid #ccc; padding:10px}
	a {color: #0033FF}
	a:hover {color:#660000}
	h1 {font-size:12px; margin:0 0 5px 0}
	ul.list {list-style-image: url(''); padding:0; margin-left:15px; margin-right:0; margin-top:0; margin-bottom:0}
	ul.list li {margin: 2px 0;}
</style>

<style>
	table.bottom_links {margin:10px 0px}
	table.bottom_links td {padding:3px}
</style>


<script type="text/javascript">
<!--
  if (top.location != location) {top.location.href = document.location.href ;}
-->
</script>


<style>
<!--
.new_link {color: #000000;  font-family: Verdana, Arial, Helvetica, sans-serif;   font-size: 11px; text-decoration: none; font-weight: normal;}
-->
</style>
</head>

<body bottommargin="0" leftmargin="0" rightmargin="0" topmargin="0" background="" marginheight="0" marginwidth="0">
<div align="center">
<table border="0" width="99%" cellspacing="0" cellpadding="0">
	<tr>
		<td>
	<p align="center"><br>
	<font face="Verdana" style="font-size: 80%">
	<a class="Type3" href="../../index.htm">Home</a><font color="#000000">&nbsp; |&nbsp;
	</font>
	<a class="Type3" href="../../AboutMe/Me.htm">About me</a><font color="#000000">&nbsp; |&nbsp;
	</font>
	<a class="Type2" href="../../VBA/beginner_basic.htm">EXCEL VB Programming (XL97-2003)</a><font color="#000000">&nbsp; |&nbsp;
	</font>
	<a class="Type2" href="../../ACCESS/beginner_basic_Acc.htm">ACCESS Programming</a><font color="#000000">&nbsp; |&nbsp;
	</font>
	<a class="Type2" href="../../EXCEL/excel_under_construction.htm">EXCEL VB.Net Programming</a><font color="#000000">&nbsp; |&nbsp;
	</font>
	<a class="Type2" href="../../EXCEL/excel_worksheet_functions.htm">EXCEL Spreadsheet Functions</a> 
	<font color="#000000">&nbsp; |
	</font>
	<a class="Type2" href="../../INVENTORY%20MGMT/index_inv_mgmt.htm">Material&nbsp; Management</a><font color="#000000">&nbsp;|
	</font>
	<a class="Type2" href="../../GUESTBOOK/gbook.html">Guestbook</a></font>
	<br>
	<font size="1">&nbsp;</font></td>
	</tr>
</table>


</div>


<center>
<table width="765" background="" border="0" cellpadding="0" cellspacing="0" height="100%"><tbody><tr valign="top"><td>

<table width="1002" border="0" cellpadding="0" cellspacing="0">
<tbody>
		<tr valign="top">

<td width="7"></td>
<td width="989">

      <center>
		<h2><a href="../functions.htm"><font style="font-size: 30pt">«</font></a><font color="#979B9B"><font size="6">
		</font>
		<font size="6" face="Comic Sans MS">
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</font><font size="6" face="Comic Sans MS">Visual Basic Functions &amp; Syntax</font></font><font color="#979B9B" size="6" face="Comic Sans MS">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>
		<font size="6"></font></font></h2>
		<div align="center">
			<table border="0" width="98%" cellspacing="0"height="881">
				<tr>
					<td width="211">
          <ul>
            <li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading2">Abs
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading3">AppActivate
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading4">Array
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading5">Asc
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading6">Atn
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading7">Beep
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading8">Call
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading9">CBool
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading10">CByte
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading11">CCur
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading12">CDate
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading13">CDbl
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading14">CDec
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading15">ChDir
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading16">ChDrive
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading17">Choose
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading18">Chr
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading19">CInt
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading20">CLng
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading21">Close
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading22">Command
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading23">Const
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading24">Cos
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading25">CreateObject
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading26">CSng
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading27">CStr
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading28">CurDir
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading29">CVar
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading30">CVErr
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading31">Date
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading32">Date
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading33">DateAdd
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading34">DateDiff
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading35">DatePart
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading36">DateSerial
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading37">DateValue
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading38">Day
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading39">DDB
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading40">Declare
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading41">DefBool
              Statement</a> </font>
            <li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading42">DefByte
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading43">DefCur
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading44">DefDate
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading45">DefDbl
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading46">DefDec
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading47">DefInt
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading48">DefLng
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading49">DefObj
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading50">DefSng
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading51">DefStr
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading52">DefVar
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading53">DeleteSetting
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading54">Dim
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading55">Dir
              Function</a> </font>
            </li></ul></td>
					<td width="257">
					<ul>
            <li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading56">
			Do...Loop Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading57">
			DoEvents Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading58">
			End Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading59">
			Enum Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading60">
			Environ Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading61">
			EOF Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading62">
			Erase Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading63">
			Error Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading64">
			Error Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading65">
			Event Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading66">
			Exit Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading67">
			Exp Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading68">
			FileAttr Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading69">
			FileCopy Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading70">
			FileDateTime Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading71">
			FileLen Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading72">
			Fix Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading73">
			For Each...Next Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading74">
			For...Next Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading75">
			Format Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading76">
			FreeFile Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading77">
			Function Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading78">
			FV Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading79">
			Get Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading80">
			GetAllSettings Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading81">
			GetAttr Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading82">
			GetAutoServerSettings Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading83">
			GetObject Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading84">
			GetSetting Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading85">
			GoSub...Return Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading86">
			GoTo Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading87">
			Hex Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading88">
			Hour Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading89">
			If...Then...Else Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading90">
			IIf Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading91">
			IMEStatus Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading92">
			Implements Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading93">
			Input # Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading94">
			Input Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading95">
			InputBox Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading96">
			InStr Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading97">
			Int Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading98">
			IPmt Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading99">
			IRR Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading100">
			IsArray Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading101">
			IsDate Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading102">
			IsEmpty Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading103">
			IsError Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading104">
			IsMissing Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading105">
			IsNull Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading106">
			IsNumeric Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading107">
			IsObject Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading108">
			Kill Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading109">
			LBound Function</a> </font>
            </li></ul></td>
					<td width="244">
					<ul>
            <li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading110">
			LCase Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading111">
			Left Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading112">
			Len Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading113">
			Let Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading114">
			Line Input # Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading115">
			Load Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading116">
			LoadPicture Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading117">
			LoadResData Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading118">
			LoadResPicture Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading119">
			LoadResString Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading120">
			Loc Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading121">
			Lock Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading122">
			LOF Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading123">
			Log Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading124">
			LSet Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading125">
			LTrim Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading126">
			Mid Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading127">
			Mid Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading128">
			Minute Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading129">
			MIRR Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading130">
			MkDir Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading131">
			Month Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading132">
			MsgBox Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading133">
			Name Statement</a> </font>
            <li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading134">
			Now Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading135">
			NPer Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading136">
			NPV Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading137">
			Oct Function</a></font></li><li>
			<font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading138">On 
			Error Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading139">
			On...GoSub Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading140">
			On...GoTo Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading141">
			Open Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading142">
			Option Base Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading143">
			Option Compare Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading144">
			Option Explicit Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading145">
			Option Private Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading146">
			Partition Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading147">
			Pmt Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading148">
			PPmt Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading149">
			Print # Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading150">
			Private Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading151">
			Property Get Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading152">
			Property Let Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading153">
			Property Set Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading154">
			Public Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading155">
			Put Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading156">
			PV Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading157">
			QBColor Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading158">
			RaiseEvent Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading159">
			Randomize Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading160">
			Rate Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading161">
			ReDim Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading162">
			Rem Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading163">
			Reset Statement</a> </font>
            </li></ul></td>
					<td>
					<ul>
            <li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading164">
			Resume Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading165">
			RGB Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading166">
			Right Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading167">
			RmDir Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading168">
			Rnd Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading169">
			RSet Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading170">RTrim
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading171">SavePicture
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading172">SaveSetting
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading173">Second
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading174">Seek
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading175">Seek
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading176">Select
              Case Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading177">SendKeys
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading178">Set
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading179">SetAttr
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading180">Sgn
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading181">Shell
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading182">Sin
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading183">SLN
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading184">Space
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading185">Spc
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading186">Sqr
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading187">Static
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading188">Stop
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading189">Str
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading190">StrComp
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading191">StrConv
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading192">String
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading193">Sub
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading194">Switch
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading195">SYD
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading196">Tab
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading197">Tan
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading198">Time
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading199">Time
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading200">Timer
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading201">TimeSerial
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading202">TimeValue
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading203">Trim
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading204">Type
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading205">TypeName
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading206">UBound
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading207">UCase
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading208">Unload
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading209">Unlock
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading210">Val
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading211">VarType
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading212">Weekday
              Function</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading213">While...Wend
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading214">Width
              # Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading215">With
              Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading216">Write
              # Statement</a> </font>
            </li><li><font face="Arial, Helvetica, sans-serif"><a class="Type1" href="#Heading217">Year
              Function</a> </font>
          </li></ul></td>
				</tr>
			</table>
		</div>
      </center><hr color="#CCCCCC" width="97%" size="1">
      <center>
        <h1></h1>
      </center>
      <p><font face="Arial, Helvetica, sans-serif" color="#333333">Visual Basic 
		provides more than 200 built-in statements and functions. Some are used 
		frequently; some are seldom used at all. Even experienced programmers 
		sometimes happen upon a statement or function they didn't know about.</font></p>
      <p><font face="Arial, Helvetica, sans-serif" color="#333333">This appendix 
		can be considered a quick-reference guide to all of VB's built-in 
		statements and functions. It offers the syntax for each, as well as a 
		brief description of what it does and how its arguments (if any) are 
		used. This is by no means a complete reference. Microsoft's<i> Visual 
		Basic 6.0 Language Reference</i>
        is probably the best source for in-depth information on VB's statements 
		and functions. If you have any questions about syntax or use of a 
		particular statement or function, then you are strongly urged to consult 
		that reference to obtain additional information.</font></p>
      <p>
      </p><h2><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading1">
		<font color="#333333"></font></a><font color="#333333">Functions and 
		Statements </font></font></h2>
      <h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading2"></a>
		Abs Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Abs(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns the absolute value of <i>
		number</i>. The data type returned is the same as the data type of the <i>
		number</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading3"></a>
		AppActivate Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">AppActivate <i>title</i>[,<i>wait</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Activates the application 
		window that has the string <i>title</i> in its title bar or, 
		alternatively, the task ID specified by <i>title</i>. The optional <i>
		wait</i> argument (Boolean) can be used to specify whether the calling 
		application should wait until it has the focus before the application 
		window is activated.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading4"></a>
		Array Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Array(<i>arglist</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant data item 
		that contains an array. <i>arglist</i> refers to a comma-delimited list 
		of values that make up the elements of the array, with the first value 
		corresponding to the first element of the array, the second value 
		corresponding to the second element of the array, and so on.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading5"></a>
		Asc Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Asc(<i>string</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns an Integer value that 
		represents the ASCII code for the first character in the <i>string</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading6"></a>
		Atn Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Atn(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		is the arctangent of <i>number</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading7"></a>
		Beep Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Beep
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Sounds a tone through the 
		PC's speaker. Frequency and duration of the tone may vary from system to 
		system.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading8"></a>
		Call Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">[Call] <i>name</i> [<i>argumentlist</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Executes a sub, function, or 
		DLL procedure. The <i>name</i> argument specifies the name of the 
		procedure to call, and <i>argumentlist</i> is an optional list of 
		arguments that will be passed to the called procedure. The Call keyword 
		is optional, but if it is included, then at least one or more arguments 
		for <i>argumentlist</i>
        must also be included.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading9"></a>
		CBool Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CBool(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts the value of <i>
		expression</i>
        to a Boolean data type. The argument <i>expression</i> can be any valid 
		string or numeric expression.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading10"></a>
		CByte Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CByte(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts the value of <i>
		expression</i>
        to a Byte data type. The argument <i>expression</i> must be a numeric 
		value between 0 and 255.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading11"></a>
		CCur Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CCur(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts the value of <i>
		expression</i>
        to a Currency data type. The argument <i>expression</i> must be a 
		numeric value between -922,337,203,685,477.5808 and 
		922,337,203,685,477.5807.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading12"></a>
		CDate Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CDate(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts the value of <i>
		expression</i>
        to a Date data type. The argument <i>expression</i> must be a valid date 
		expression.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading13"></a>
		CDbl Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CDbl(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts the value of <i>
		expression</i>
        to a Double data type. The argument <i>expression</i> must be a numeric 
		value between -1.79769313486232E308 and -4.94065645841247E-324 for 
		negative values, or between 4.94065645841247E-324 and 
		1.79769313486232E308 for positive values.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading14"></a>
		CDec Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CDec(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts the value of <i>
		expression</i>
        to a Decimal data type. The argument <i>expression</i> must be a numeric 
		value of +/-79,228,162,514,264,337,593,543,950,335 for zero-scaled 
		numbers (numbers with no decimal places), or 
		+/-7.9228162514264337593543950335 for numbers with 28 decimal places.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading15"></a>
		ChDir Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">ChDir <i>path</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Changes the current directory 
		to the one specified by the <i>path</i> argument. Note that although 
		ChDir changes the default directory, it does not change the default 
		drive as well.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading16"></a>
		ChDrive Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">ChDrive <i>drive</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Changes the current drive to 
		the one specified by the <i>drive</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading17"></a>
		Choose Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Choose(<i>index</i>, <i>choice-1</i>[, <i>choice-2</i>, ... [, <i>choice-n</i>]])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a value from a list 
		of choices (specified by the arguments <i>choice-1</i> through <i>
		choice-n</i>) based on the value of the <i>index</i> argument. If <i>
		index</i> is 1, then the value returned by the Choose function will be 
		the value represented by <i>choice-1</i>; if <i>index</i> is 2, then the 
		value returned will be that of <i>choice-2</i>; and so on.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading18"></a>
		Chr Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Chr(<i>charcode</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a one-character 
		String value that represents the ASCII character of the number specified 
		by the
        <i>charcode</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading19"></a>
		CInt Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CInt(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts the value of <i>
		expression</i>
        to an Integer data type. The argument <i>expression</i> must be a 
		numeric value from -32,768 to 32,767. Fractions are rounded.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading20"></a>
		CLng Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CLng(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts the value of <i>
		expression</i>
        to a Long data type. The argument <i>expression</i> must be a numeric 
		value from -2,147,483,648 to 2,147,483,647. Fractions are rounded.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading21"></a>
		Close Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Close [<i>filenumberlist</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Closes any files opened with 
		the Open statement that corre- spond to the file numbers specified by
        <i>filenumberlist</i>. The <i>filenumberlist</i> argument can contain a 
		single file number (for example, #1) or multiple file numbers (for 
		example, #1, #4, #5). If the <i>filenumberlist</i> argument is omitted, 
		all open files will be closed.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading22"></a>
		Command Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Command
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns any command-line 
		arguments specified when launching Visual Basic. For compiled programs, 
		Command returns the command-line arguments specified when the program 
		was launched.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading23"></a>
		Const Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">[Public | Private] Const <i>constname</i> [As <i>type</i>] = <i>expression</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares a constant with the 
		name <i>constname</i> and the value represented by <i>expression</i>. 
		The Public and Private keywords define the constant's scope, and the 
		optional As <i>type</i> specifies the constant's data type. If the As <i>
		type</i>
        is omitted, the constant will be declared as the data type most 
		appropriate for <i>expression</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading24"></a>
		Cos Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Cos(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		is the cosine of the angle specified by the <i>number</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading25"></a>
		CreateObject Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CreateObject(<i>class</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Creates and returns a 
		reference to an ActiveX object of type <i>class</i>. The <i>class</i> 
		argument should use the syntax <i>appname.objecttype</i>, where <i>
		appname</i> is the name of the application providing the object, and <i>
		objecttype</i> is the class of the object to be created.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading26"></a>
		CSng Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CSng(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts the value of <i>
		expression</i>
        to a Single data type. The argument <i>expression</i> must be a numeric 
		value from -3.402823E38 to -1.401298E-45 for negative values, or from 
		1.401298E-45 to 3.402823E38 for positive values.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading27"></a>
		CStr Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CStr(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts the value of <i>
		expression</i>
        to a String data type. The string that CStr returns depends on the data 
		type of the <i>expression</i> argument: For Booleans, CStr returns 
		either True or False; for Dates, CStr returns a date based on the short 
		date format on your system; for Errors, CStr returns the word Error 
		followed by the error number. <i>expression</i> values that are Empty 
		return a zero-length string, and numeric <i>expression</i> values return 
		a string containing the number. A Null <i>expression</i> value will 
		cause a runtime error.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading28"></a>
		CurDir Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CurDir[(<i>drive</i>)]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a String value that 
		represents the full path of the current directory. If the <i>drive</i>
        argument is given, then CurDir returns the directory path of the current 
		directory for that drive.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading29"></a>
		CVar Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CVar(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts the value of <i>
		expression</i>
        to a Variant data type. The argument <i>expression</i> can be either 
		numeric or a string.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading30"></a>
		CVErr Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">CVErr(<i>errornumber</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Error that contains the error number specified by the <i>errornumber</i>
        argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading31"></a>
		Date Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Date
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Date that contains the current system date.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading32"></a>
		Date Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Date = <i>date</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Sets the current system date 
		as specified by the <i>date</i> argument. For Windows 95 systems, <i>
		date</i>
        must be a valid date between January 1, 1980 and December 31, 2099. For 
		Windows NT systems, <i>date</i> must be a valid date between January 1, 
		1980 and December 31, 2079.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading33"></a>
		DateAdd Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DateAdd(<i>interval</i>, <i>number</i>, <i>date</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Date calculated by taking the date specified by the <i>date </i>argument 
		and adding or subtracting the amount of time specified by <i>interval</i>
        and <i>time</i>. The <i>interval</i> argument contains a code that 
		represents a unit of time (for example, <i>yyyy</i> for years, <i>m</i> 
		for months,
        <i>d</i> for days), and <i>number</i> is the number of units to be added 
		to <i>date</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading34"></a>
		DateDiff Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DateDiff(<i>interval</i>, <i>date1</i>, <i>date2</i>[,<i>firstdayofweek</i>[, <i>firstweekofyear</i>]])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Long that represents the number of time units between two dates (<i>date1</i>
        and <i>date2</i>). The <i>interval</i> argument contains a code that 
		represents the unit of time (for example, <i>yyyy</i> for years) that 
		will be returned by the function. The optional <i>firstdayofweek</i> and <i>
		firstweekofyear</i>
        arguments are used to specify how the time difference should be 
		calculated when certain codes are used for <i>interval</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading35"></a>
		DatePart Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DatePart(<i>interval</i>, <i>date</i>[,<i>firstdayofweek</i>[,<i>firstweekofyear</i>]])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Integer that contains the part of <i>date </i>specified by <i>interval</i>. 
		The <i>interval</i> argument contains a code that represents the unit of 
		time (for example, <i>ww</i> for weeks) that will be returned by the 
		function. The optional <i>firstdayofweek</i> and <i>firstweekofyear</i>
        arguments are used to specify how the date should be calculated when 
		certain
        <i>interval</i> codes are used.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading36"></a>
		DateSerial Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DateSerial(<i>year</i>, <i>month</i>, <i>day</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Date that represents a date as specified by the <i>year</i>, <i>month</i>, 
		and <i>day</i> arguments.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading37"></a>
		DateValue Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DateValue(<i>date</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Date that is derived from the date value specified by the <i>date</i>
        argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading38"></a>
		Day Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Day(<i>date</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Integer that represents the day of the month (1[nd]31) for the date 
		value specified by the <i>date</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading39"></a>
		DDB Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DDB(<i>cost</i>, <i>salvage</i>, <i>life</i>, <i>period</i>[, <i>factor</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		represents the depreciation of an asset for a specified amount of time 
		using a given method of depreciation. The <i>cost</i> argument 
		represents the initial cost of the asset, <i>salvage</i> represents the 
		value of the asset at the end of its working lifetime, <i>life</i> 
		represents the lifetime of the asset, and <i>period</i> represents the 
		period (in months) for which the depreciation is calculated. The 
		optional <i>factor</i> argument specifies the rate at which the balance 
		declines. If it is omitted, then the double-declining depreciation 
		method is used.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading40"></a>
		Declare Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">[Public | Private] Declare Sub <i>name</i> Lib &quot;<i>libname</i>&quot; [Alias _ &quot;<i>aliasname</i>&quot;][([<i>arglist</i>])]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">or</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif">[Public | Private] Declare Function <i>name</i> Lib &quot;<i>libname</i>&quot;
[Alias &quot;<i>aliasname</i>&quot;][([<i>arglist</i>])][As <i>type</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares references to Sub or 
		Function procedures in an external DLL (dynamic-link library). The 
		optional Public and Private keywords define the procedure's scope. The
        <i>name</i> argument is the name of the procedure, and the <i>libname</i>
        argument specifies the DLL that contains the procedure. The optional <i>
		aliasname</i>
        argument specifies an alternate name for the procedure in the DLL. <i>
		arglist</i>
        is a list of arguments passed to the procedure. For Function procedures, 
		the As <i>type</i> specifies the data type of the value returned by the 
		Function. Declare statements can only be used at module level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading41"></a>
		DefBool Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DefBool <i>letterrange</i>[, <i>letterrange</i>]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies that all variables 
		and function return values that begin with the letters specified by the
        <i>letterrange</i> arguments are automatically defined to be of the 
		Boolean data type. The <i>letterrange</i> arguments should be 
		constructed as <i>letter1</i>[-<i>letter2</i>], where <i>letter1</i> is 
		the first (or only) letter in the range, and <i>letter2</i>
        is the last letter in the range. DefBool can only be used at module 
		level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading42"></a>
		DefByte Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DefByte <i>letterrange</i>[, <i>letterrange</i>]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies that all variables 
		and function return values that begin with the letters specified by the
        <i>letterrange</i> arguments are automatically defined to be of the Byte 
		data type. The <i>letterrange</i> arguments should be constructed as <i>
		letter1</i>[-<i>letter2</i>], where <i>letter1</i> is the first (or 
		only) letter in the range, and <i>letter2</i>
        is the last letter in the range. DefByte can only be used at module 
		level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading43"></a>
		DefCur Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DefCur <i>letterrange</i>[, <i>letterrange</i>]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies that all variables 
		and function return values that begin with the letters specified by the
        <i>letterrange</i> arguments are automatically defined to be of the 
		Currency data type. The <i>letterrange</i> arguments should be 
		constructed as <i>letter1
        </i>[-<i>letter2</i>], where <i>letter1</i> is the first (or only) 
		letter in the range, and <i>letter2</i> is the last letter in the range. 
		DefCur can only be used at module level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading44"></a>
		DefDate Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DefDate <i>letterrange</i>[, <i>letterrange</i>]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies that all variables 
		and function return values that begin with the letters specified by the
        <i>letterrange</i> arguments are automatically defined to be of the Date 
		data type. The <i>letterrange</i> arguments should be constructed as <i>
		letter1</i>[-<i>letter2</i>], where <i>letter1</i> is the first (or 
		only) letter in the range, and <i>letter2</i>
        is the last letter in the range. DefDate can only be used at module 
		level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading45"></a>
		DefDbl Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DefDbl <i>letterrange</i>[, <i>letterrange</i>]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies that all variables 
		and function return values that begin with the letters specified by the
        <i>letterrange</i> arguments are automatically defined to be of the 
		Double data type. The <i>letterrange</i> arguments should be constructed 
		as <i>letter1</i>[-<i>letter2</i>], where <i>letter1</i> is the first 
		(or only) letter in the range, and <i>letter2</i>
        is the last letter in the range. DefDbl can only be used at module 
		level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading46"></a>
		DefDec Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DefDec <i>letterrange</i>[, <i>letterrange</i>]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies that all variables 
		and function return values that begin with the letters specified by the
        <i>letterrange</i> arguments are automatically defined to be of the 
		Decimal data type. The <i>letterrange</i> arguments should be 
		constructed as <i>letter1</i>[-<i>letter2</i>], where <i>letter1</i> is 
		the first (or only) letter in the range, and <i>letter2</i>
        is the last letter in the range. DefDec can only be used at module 
		level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading47"></a>
		DefInt Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DefInt <i>letterrange</i>[, <i>letterrange</i>]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies that all variables 
		and function return values that begin with the letters specified by the
        <i>letterrange</i> arguments are automatically defined to be of the 
		Integer data type. The <i>letterrange</i> arguments should be 
		constructed as <i>letter1</i>[-<i>letter2</i>], where <i>letter1</i> is 
		the first (or only) letter in the range, and <i>letter2</i>
        is the last letter in the range. DefInt can only be used at module 
		level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading48"></a>
		DefLng Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DefLng <i>letterrange</i>[, <i>letterrange</i>]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies that all variables 
		and function return values that begin with the letters specified by the
        <i>letterrange</i> arguments are automatically defined to be of the Long 
		data type. The <i>letterrange</i> arguments should be constructed as <i>
		letter1</i>[-<i>letter2</i>], where <i>letter1</i> is the first (or 
		only) letter in the range, and <i>letter2</i>
        is the last letter in the range. DefLng can only be used at module 
		level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading49"></a>
		DefObj Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DefObj <i>letterrange</i>[, <i>letterrange</i>]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies that all variables 
		and function return values that begin with the letters specified by the
        <i>letterrange</i> arguments are automatically defined to be of the 
		Object data type. The <i>letterrange</i> arguments should be constructed 
		as <i>letter1</i>[-<i>letter2</i>], where <i>letter1</i> is the first 
		(or only) letter in the range, and <i>letter2</i>
        is the last letter in the range. DefObj can only be used at module 
		level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading50"></a>
		DefSng Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DefSng <i>letterrange</i>[, <i>letterrange</i>]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies that all variables 
		and function return values that begin with the letters specified by the
        <i>letterrange</i> arguments are automatically defined to be of the 
		Single data type. The <i>letterrange</i> arguments should be constructed 
		as <i>letter1</i>[-<i>letter2</i>], where <i>letter1</i> is the first 
		(or only) letter in the range, and <i>letter2</i>
        is the last letter in the range. DefSng can only be used at module 
		level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading51"></a>
		DefStr Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DefStr <i>letterrange</i>[, <i>letterrange</i>]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies that all variables 
		and function return values that begin with the letters specified by the
        <i>letterrange</i> arguments are automatically defined to be of the 
		String data type. The <i>letterrange</i> arguments should be constructed 
		as <i>letter1</i>[-<i>letter2</i>], where <i>letter1</i> is the first 
		(or only) letter in the range, and <i>letter2</i>
        is the last letter in the range. DefStr can only be used at module 
		level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading52"></a>
		DefVar Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DefVar <i>letterrange</i>[, <i>letterrange</i>]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies that all variables 
		and function return values that begin with the letters specified by the
        <i>letterrange</i> arguments are automatically defined to be of the 
		Variant data type. The <i>letterrange</i> arguments should be 
		constructed as <i>letter1</i>[-<i>letter2</i>], where <i>letter1</i> is 
		the first (or only) letter in the range, and <i>letter2</i>
        is the last letter in the range. DefVar can only be used at module 
		level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading53"></a>
		DeleteSetting Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DeleteSetting <i>appname</i>, <i>section</i>[, <i>key</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Deletes an application's 
		section or key setting entries from the System Registry. The <i>appname</i> 
		argument specifies the name of the application, and <i>section</i> is 
		the name of the section to be deleted. If the optional <i>key</i> 
		argument is used, then only that key (and not the whole section) will be 
		deleted.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading54"></a>
		Dim Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Dim [WithEvents] <i>varname</i>[([<i>subscripts</i>])] [As [New] <i>type</i>] [,[WithEvents]
<i>varname</i>[([<i>subscripts</i>])] [As [New] <i>type</i>]]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares one or more 
		variables or objects. The <i>varname</i> argument is the name of the 
		variable, and the optional As [New] <i>type</i> indicates its data type. 
		If the New keyword is used, then an implicit creation of the object is 
		made. The optional WithEvents keyword (valid only when the Dim statement 
		is used in class modules) indicates that <i>varname</i> is an object 
		variable as is used to respond to events triggered by an ActiveX object. 
		The optional
        <i>subscripts </i>are the dimensions of an array variable.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading55"></a>
		Dir Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Dir[(<i>pathname</i>[, <i>attributes</i>])]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a String value 
		containing the name of a file, directory, or folder that matches a 
		pattern (specified in the <i>pathname</i> argument) and/or a file 
		attribute (specified in
        <i>attributes</i>). The first time the Dir function is called, it 
		returns the name of a file based on the <i>pathname</i> and <i>
		attributes</i>
        arguments. If the function is called again and no arguments are given, 
		then it returns the second file name for the given <i>pathname</i> and
        <i>attributes</i>, and so on.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading56"></a>
		Do...Loop Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Do [{While | Until} condition]
   [statements]
   [Exit Do]
   [statements]
Loop
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">or</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif">Do
   [statements]
   [Exit Do]
   [statements]
Loop [{While | Until} condition]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Repeats one or more <i>
		statements</i>
        while a <i>condition</i> is True or until a <i>condition</i> becomes 
		True. The optional Exit Do keywords pass control to the line of code 
		immediately following the Do...Loop structure.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading57"></a>
		DoEvents Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">DoEvents( )
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Temporarily gives control to 
		the operating system so that it can process other events. The DoEvents 
		function is typically used inside loops so that a program does not tie 
		up system resources for a long period of time.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading58"></a>
		End Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">End
End Function
End If
End Property
End Select
End Sub
End Type
End With
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Ends a program (End), 
		procedure (End Function, End Property, or End Sub), type structure (End 
		Type), or program block (End If, End Select, or End With).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading59"></a>
		Enum Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">[Public | Private] Enum name
    membername [= constantexpression]
    membername [= constantexpression]
      ...
End Enum
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares an enumeration type 
		named <i>name</i> that is composed of one or more members specified by
        <i>membername</i>. Members can be assigned values using <i>
		constantexpression</i>. The optional Public and Private keywords define 
		the enumeration's scope.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading60"></a>
		Environ Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Environ({<i>envstring</i> | <i>number</i>})
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns the String value of 
		the operating system variable specified by <i>envstring</i> or, 
		alternatively, the numeric order of the environment string in the 
		environment-string table specified by <i>number</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading61"></a>
		EOF Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">EOF(<i>filenumber</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a True or False value 
		(Integer) that indicates whether the end of file marker has been reached 
		for the Random or Input<b> </b>file associated with the <i>filenumber</i>
        argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading62"></a>
		Erase Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Erase <i>arraylist</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Reinitializes the elements in 
		one or more fixed-size array and frees up the dynamic-array storage 
		space that was taken up by the array(s). The <i>arraylist</i> argument 
		is one or more comma-delimited array names.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading63"></a>
		Error Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Error[(<i>errornumber</i>)]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a String value that 
		contains the error message that corresponds to the <i>errornumber</i>
        argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading64"></a>
		Error Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Error <i>errornumber</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Causes an error to occur. The
        <i>errornumber</i> argument indicates the type of error that should 
		occur.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading65"></a>
		Event Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">[Public] Event <i>procedurename</i> [(<i>arglist</i>)]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares a user-defined event 
		with the name <i>procedurename</i>. The optional Public keyword 
		indicates that the Event should be visible throughout the project, even 
		though that is the default. The optional argument list (<i>arglist</i>) 
		should contain one or more arguments defined using the syntax:</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif">   [ByVal | ByRef] <i>varname</i>[()] [As <i>type</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">where <i>varname</i> is the 
		name of the argument, As <i>type</i> indicates the data type of the 
		argument, and the optional ByRef or ByVal keywords specify whether the 
		argument should be passed by reference (ByRef) or by value (ByVal). If 
		ByRef<b>
        </b>and ByVal are not specified, then the argument will be passed by 
		reference.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading66"></a>
		Exit Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Exit Do
Exit For
Exit Function
Exit Property
Exit Sub
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Exits a procedure (Exit 
		Function, Exit Property, or Exit Sub) or looping structure (Exit Do or 
		Exit For).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading67"></a>
		Exp Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Exp(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		is <i>e</i> (the base of natural logarithms) raised to the power 
		specified by <i>number</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading68"></a>
		FileAttr Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">FileAttr(<i>filenumber</i>, <i>returntype</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Long<b> </b>value 
		that indicates the file mode for a file opened using the Open statement. 
		The argument <i>filenumber</i> is the file number for the open file, and
        <i>returntype</i> indicates the type of information to be returned. 
		Although
        <i>returntype</i> can be set to 2 to return the operating system file 
		handle for the open file, it only works on 16-bit systems and should be 
		avoided in VB5. Instead, use a value of 1 for <i>returntype</i> to 
		return the open file type. The possible values returned by the FileAttr 
		function for indicating file type are: 1 for Input, 2 for Output, 4 for 
		Random, 8 for Append, and 32 for Binary.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading69"></a>
		FileCopy Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">FileCopy <i>source</i>, <i>destination</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Copies the filename and path 
		specified by the <i>source</i> argument to the filename and path 
		specified by the <i>destination</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading70"></a>
		FileDateTime Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">FileDateTime(<i>pathname</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Date that indicates the date and time when the file specified by the <i>
		pathname</i>
        argument was last modified.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading71"></a>
		FileLen Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">FileLen(<i>pathname</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Long value that 
		contains the file size (in bytes) of the file specified by the <i>
		pathname</i>
        argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading72"></a>
		Fix Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Fix(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns the integer portion 
		of the number specified by the <i>number</i> argument. If <i>number</i>
        is negative, then Fix returns the first negative integer greater than or 
		equal to <i>number</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading73"></a>
		For Each...Next Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">For Each <i>element</i> In group
    [<i>statements</i>]
    [Exit For]
    [<i>statements</i>]
Next [<i>element</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Executes one or more <i>
		statements</i>
        for each <i>element</i> in the array or collection specified by <i>group</i>. 
		The optional Exit For can be used to immediately exit the looping 
		structure.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading74"></a>
		For...Next Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">For <i>counter</i> = start To end [Step <i>step</i>]
    [<i>statements</i>]
    [Exit For]
    [<i>statements</i>]
Next [<i>counter</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Executes one or more <i>
		statements</i>
        a specified number of times. The <i>counter</i> argument is a variable 
		used to increment from <i>start</i> to <i>end</i>. By default, <i>
		counter</i>
        is incremented by 1 each time the loop is executed, although the 
		optional
        <i>step</i> argument can be used to specify a different increment. The 
		optional Exit For can be used to immediately exit the looping structure.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading75"></a>
		Format Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Format(<i>expression</i>[, <i>format</i>[, <i>firstdayofweek</i>[, _  <i>firstweekofyear</i>]]])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		String that contains the value specified by <i>expression</i> using a 
		format defined by the <i>format</i> argument. The <i>format</i> argument 
		uses codes (for example, <i>d</i> for days or <i>#</i> for numbers) to 
		determine how <i>expression</i> will be formatted. The optional <i>
		firstdayofweek</i>
        and <i>firstweekofyear</i> arguments are used when formatting certain 
		values.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading76"></a>
		FreeFile Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">FreeFile[(<i>rangenumber</i>)]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns an Integer value the 
		represents the next file number available for use with the Open 
		statement. The optional <i>rangenumber</i> argument can be used to 
		specify which range of file numbers should be used: 0 (the default) for 
		file numbers in the range of 1-255, or 1 for file numbers in the range 
		of 256-511.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading77"></a>
		Function Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">[Public | Private | Friend] [Static] Function name _ [(<i>arglist</i>)] [As <i>type</i>]
    [<i>statements</i>]
    [<i>name = expression</i>]
    [Exit Function]
    [<i>statements</i>]
    [<i>name = expression</i>]
End Function
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares the various parts of 
		a Function procedure. The optional Public, Private, and Friend keywords 
		can be used to define the Function's scope, and the optional Static 
		keyword indicates that the procedure's local variables are preserved 
		between calls to the Function. The <i>name</i> argument specifies the 
		name of the Function procedure and can be assigned a value (<i>name</i> 
		= <i>expression</i>) that will be returned by the procedure. The data 
		type of the return value can be specified using the As <i>type</i> 
		clause. The optional<b> </b>Exit Function can be used to exit the 
		Function procedure immediately.</font></p>
      <p><font face="Arial, Helvetica, sans-serif">The optional list of 
		arguments (<i>arglist</i>) defines the arguments that will be passed to 
		the procedure. The arguments should use the following syntax:</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif">[Optional] [ByVal | ByRef] [ParamArray] <i>varname</i>[()] [As _ <i>type</i>] [= <i>default value</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">where the Optional keyword 
		can be used to specify that the argument is not required (<i>default 
		value</i>
        assigns the argument's default value), ByVal and ByRef determine whether 
		the argument should be passed by value or by reference (the default), 
		and the ParamArray keyword specifies that the argument is an Optional 
		array of Variant elements. ParamArray can only be used with the last 
		argument in the argument list.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading78"></a>
		FV Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">FV(<i>rate</i>, <i>nper</i>, <i>pmt</i>[, <i>pv</i>[, <i>type</i>]])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double<b> </b>value 
		that indicates the future value of an annuity based on a number (<i>nper</i>) 
		of periodic fixed payment amounts (<i>pmt</i>) and a fixed interest rate 
		(<i>rate</i>). The optional <i>pv</i> argument specifies a present value 
		or lump sum of a series of future payments, and the optional <i>type</i>
        argument specifies when payments are due (0 for end of the payment 
		period, the default; 1 for beginning of the payment period).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading79"></a>
		Get Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Get [#]filenumber,[ recnumber,] varname
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Reads data from the open disk 
		file corresponding to the <i>filenumber</i> argument into a variable (<i>varname</i>). 
		Get works with files open as Random or Binary, and a record number (<i>recnumber</i>) 
		can be specified when retrieving data from a Random file. When using 
		Binary files, <i>recnumber</i> can alternatively be used to specify the 
		byte position from which the data is to be read.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading80"></a>
		GetAllSettings Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">GetAllSettings(<i>appname</i>, <i>section</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a list of key 
		settings and their values from a specific application (<i>appname</i>) 
		entry and section (<i>section</i>) in the System Registry.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading81"></a>
		GetAttr Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">GetAttr(<i>pathname</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns an Integer value that 
		represents the attributes for the file, directory, or folder specified 
		by the <i>pathname</i> argument. The value returned can be compared 
		bitwise with several VB constants (vbNormal, vbReadOnly, vbHidden, 
		vbSystem, vbDirectory, and vbArchive) to determine which attributes are 
		set.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading82"></a>
		GetAutoServerSettings Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif"><i>object</i>.GetAutoServerSettings([<i>progid</i>], [<i>clsid</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant array that 
		contains information concerning the state of an ActiveX <i>object</i>'s 
		registration. The optional <i>progid</i> and <i>clsid</i> can be 
		included to specify the object's ProgID and CLSID, respectively. The 
		values of the elements of the Variant array that are returned by 
		GetAutoServerSettings are, in order: local/remote registration of object 
		(True if the object is registered remotely), the remote machine name, 
		the RPC network protocol name, and the RPC authentication level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading83"></a>
		GetObject Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">GetObject([<i>pathname</i>] [,<i>class</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a reference to an 
		object of type <i>class</i>. The <i>pathname</i> argument can be 
		included to specify the path and filename from which the object should 
		be retrieved; however, if it is omitted, then the <i>class</i> name must 
		be specified.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading84"></a>
		GetSetting Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">GetSetting(<i>appname</i>, <i>section</i>, <i>key</i>[, <i>default</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a single key setting 
		value from a specific application (<i>appname</i>) entry and section (<i>section</i>) 
		in the System Registry. If no value is set for the key setting 
		specified, then the optional <i>default</i> value can be returned. If 
		default is omitted, then the default value returned will be a 
		zero-length string.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading85"></a>
		GoSub...Return Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">GoSub line
    ...
    line
    ...
Return
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Transfers program control to 
		the subroutine indicated by the line label or line number <i>line</i>
        until the Return statement is reached; then returns control to the line 
		of code immediately following the GoSub statement.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading86"></a>
		GoTo Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">GoTo <i>line</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Transfers program control to 
		the line of code specified by the line label or line number <i>line</i>. 
		The line must be inside the procedure that contains the GoTo statement.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading87"></a>
		Hex Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Hex(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a String value that 
		represents the hexadecimal value of the argument <i>number</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading88"></a>
		Hour Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Hour(<i>time</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Integer that represents the hour (0[nd]23) of the time value specified 
		by the <i>time</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading89"></a>
		If...Then...Else Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">If condition Then [statements] [Else elsestatements]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">or</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif">If <i>condition</i> Then
    [<i>statements</i>]
[ElseIf <i>condition-n</i> Then
    [<i>elseifstatements</i>] ...
[Else
    [<i>elsestatements</i>]]
End If
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Conditionally executes one or 
		more <i>statements</i> if the value expressed by <i>condition</i> is 
		True. One or more ElseIf clauses can be included to test other 
		conditions and execute other statements (<i>elseifstatements</i>) if the 
		preceding condition is False. An Else clause can also be included to 
		execute other statements (<i>elsestatements</i>) if none of the 
		preceding conditions are True.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading90"></a>
		IIf Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">IIf(<i>expression</i>, <i>truepart</i>, <i>falsepart</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns one of two values 
		based on whether <i>expression</i> evaluates to True or False. If True, 
		then IIf returns the <i>truepart</i> value; if False, then the <i>
		falsepart</i>
        value is returned.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading91"></a>
		IMEStatus Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">IMEStatus
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns an Integer value that 
		represents Windows' current Input Method Editor (IME) mode. IMEStatus is 
		only available in Far East versions.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading92"></a>
		Implements Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Implements [<i>interfacename</i> | <i>class</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Specifies an interface (<i>interfacename</i>) 
		or class (<i>class</i>) that will be implemented in the class module in 
		which the Implements statement is used.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading93"></a>
		Input # Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Input #<i>filenumber</i>, <i>varlist</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Reads data from the open file 
		associated with the <i>filenumber</i> argument and places it in the 
		variables in the <i>varlist</i> argument. The <i>varlist</i> argument 
		should contain one or more comma-delimited variables.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading94"></a>
		Input Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Input(<i>number</i>, [#]<i>filenumber</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a String value 
		containing characters read in from the open file that corresponds to the <i>
		filenumber</i>
        argument. The number of characters to be read in are specified by the
        <i>number</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading95"></a>
		InputBox Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">InputBox(<i>prompt</i>[, <i>title</i>][, <i>default</i>][, <i>xpos</i>][, _ <i>ypos</i>][,<i>helpfile</i>, <i>context</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Displays a dialog box and 
		waits for the user to enter text or click a button; then returns what 
		the user entered in a String value. The <i>prompt</i> argument specifies 
		the message to be displayed in the dialog box, <i>title</i> specifies an 
		optional caption for the dialog box's title bar, and <i>default</i> 
		specifies the optional default value returned by the InputBox function 
		if no value is entered by the user. The optional <i>xpos</i> and <i>ypos</i> 
		arguments specify (in twips) the horizontal and vertical position of the 
		dialog box on the screen. The optional <i>helpfile</i> and <i>context</i> 
		arguments are used to provide context-sensitive Help for the dialog box.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading96"></a>
		InStr Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">InStr([<i>start</i>, ]<i>string1</i>, <i>string2</i>[, <i>compare</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Long that specifies the starting position of the first occurrence of a 
		substring (<i>string2</i>) within another string (<i>string1</i>). The 
		optional <i>start</i> argument specifies from which character in <i>
		string2</i>
        to start searching; the default is 1 (first character). The optional <i>
		compare</i>
        argument specifies the type of string comparison that will be made (0 
		for binary or 1 for textual noncase-sensitive).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading97"></a>
		Int Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Int(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns the integer portion 
		of the number specified by the <i>number</i> argument. If <i>number</i>
        is negative, then Int returns the first negative integer less than or 
		equal to <i>number</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading98"></a>
		IPmt Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">IPmt(<i>rate</i>, <i>per</i>, <i>nper</i>, <i>pv</i>[, <i>fv</i>[, <i>type</i>]])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		indicates the interest payment for a fixed-period annuity based on a 
		number (<i>nper</i>) of periodic fixed payments (<i>per</i>) and a fixed 
		interest rate (<i>rate</i>). The <i>pv</i> argument specifies the 
		present value of a series of payments or receipts. The optional <i>fv</i> 
		argument specifies the future value or cash balance left after the final 
		payment. The optional
        <i>type</i> argument specifies when payments are due (0 for end of the 
		payment period, the default; 1 for beginning of the payment period).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading99"></a>
		IRR Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">IRR(<i>values</i>()[, <i>guess</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value 
		indicating the internal rate of return for an array of <i>values</i> 
		that represent cash flow. The <i>values</i>() array must contain at 
		least one negative value (payment) and one positive value (receipt). The 
		optional <i>guess</i>
        argument specifies an estimate value to be returned by IRR (default 
		estimate is .1).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading100"></a>
		IsArray Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">IsArray(<i>varname</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Boolean value that 
		indicates whether the variable specified by <i>varname</i> is an array.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading101"></a>
		IsDate Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">IsDate(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Boolean value that 
		indicates whether <i>expression</i> is capable of being converted to a 
		date value.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading102"></a>
		IsEmpty Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">IsEmpty(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Boolean value that 
		indicates whether a numeric or string <i>expression</i> has been 
		initialized.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading103"></a>
		IsError Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">IsError(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Boolean value that 
		indicates whether a given <i>expression</i> is an error value.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading104"></a>
		IsMissing Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">IsMissing(<i>argname</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Boolean value that 
		indicates whether an optional Variant argument (<i>argname</i>) has been 
		passed to a procedure. IsMissing returns True if no value has been 
		provided for the specified argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading105"></a>
		IsNull Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">IsNull(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Boolean value that 
		indicates whether a given <i>expression</i> contains no data and is 
		Null.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading106"></a>
		IsNumeric Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">IsNumeric(<i>expression</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Boolean value that 
		indicates whether a given <i>expression</i> can be evaluated as a 
		numeric value.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading107"></a>
		IsObject Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">IsObject(<i>identifier</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Boolean value that 
		indicates whether a given <i>identifier</i> represents an object 
		variable.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading108"></a>
		Kill Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Kill <i>pathname</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Deletes the file(s) or 
		directory represented by the <i>pathname</i> argument. Filenames in the <i>
		pathname</i>
        argument can contain wildcards, allowing multiple files to be deleted.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading109"></a>
		LBound Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">LBound(<i>arrayname</i>[, <i>dimension</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Long value that 
		represents the smallest subscript for a dimensioned array (<i>arrayname</i>). 
		For multidimensional arrays, the <i>dimension</i> argument can be 
		included to specify which dimension should be used.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading110"></a>
		LCase Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">LCase(<i>string</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts a <i>string</i> to 
		all lowercase characters and returns a new String value.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading111"></a>
		Left Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Left(<i>string</i>, <i>length</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a String value <i>
		length</i>
        characters long that is taken from the left side of a given <i>string</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading112"></a>
		Len Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Len(<i>string</i> | <i>varname</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Long value that 
		indicates the number of characters in a <i>string</i> or, alternatively, 
		the number of bytes required to store a particular variable (<i>varname</i>).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading113"></a>
		Let Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">[Let] <i>varname</i> = <i>expression</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Assigns the value of an <i>
		expression</i>
        to a variable (<i>varname</i>). The Let keyword is usually omitted and 
		is assumed by Visual Basic.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading114"></a>
		Line Input # Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Line Input #<i>filenumber</i>, <i>varname</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Reads a line of data (ending 
		with a carriage return or carriage return-linefeed) from an open disk 
		file corresponding to the <i>filenumber</i> argument. The data is placed 
		in the String or Variant variable specified by <i>varname</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading115"></a>
		Load Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Load <i>object</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Loads an <i>object</i>, such 
		as a form or control, into memory.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading116"></a>
		LoadPicture Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">LoadPicture([<i>stringexpression</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Loads the image specified by 
		the <i>stringexpression</i> argument and returns it. This allows 
		pictures to be loaded in and assigned to a Form's Picture property, a 
		PictureBox control, or an Image control. If no <i>stringexpression</i> 
		argument is given, then LoadPicture returns an empty picture.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading117"></a>
		LoadResData Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">LoadResData(<i>index</i>, <i>format</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Loads data from the resource 
		(.RES) file with the identifier of the <i>index</i> argument. The <i>
		format</i>
        argument specifies the format of the data (1 for cursors, 2 for bitmaps, 
		3 for icons, 4 for menus, 5 for dialog boxes, 6 for strings, 7 for font 
		directories, 8 for fonts, 9 for accelerator tables, 10 for user-defined 
		resources, 12 for group cursors, and 14 for group icons). The data 
		returned by the LoadResData function can be assigned to a variable or 
		object of the appropriate type.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading118"></a>
		LoadResPicture Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">LoadResPicture(<i>index</i>, <i>format</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Loads a bitmap, icon, or 
		cursor from the resource (.RES) file with the identifier of the <i>index</i>
        argument. The <i>format</i> argument specifies the format of the data (0 
		for bitmaps, 1 for icons, and 2 for cursors). The data returned by the 
		LoadResPicture function can be assigned to an object of the appropriate 
		type.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading119"></a>
		LoadResString Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">LoadResString(<i>index</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Loads a string from the 
		resource (.RES) file with the identifier of the <i>index</i> argument. 
		The string that is returned can be assigned to a variable of String or 
		Variant data type.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading120"></a>
		Loc Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Loc(<i>filenumber</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Long value that 
		indicates the current byte position within the open file that 
		corresponds to the
        <i>filenumber</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading121"></a>
		Lock Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Lock [#]filenumber[, recordrange]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Prevents another process from 
		accessing all or part of the open file that corresponds to the <i>
		filenumber</i>
        argument. The <i>recordrange</i> argument refers to a range of records 
		(or bytes) that are to be locked and should use the syntax:</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif"><i>recnumber</i> | [<i>start</i>] To <i>end</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">where <i>recnumber</i> is the 
		record number (for Random files) or byte position (for Binary files) 
		where locking should begin. Alternatively, the starting and ending 
		record numbers or bytes to be locked can be specified using the <i>start</i> 
		and <i>end</i>
        arguments.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading122"></a>
		LOF Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">LOF(<i>filenumber</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Boolean value that 
		represents the byte size of the open file that corresponds to the <i>
		filenumber</i>
        argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading123"></a>
		Log Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Log(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		represents the natural logarithm of a specified <i>number</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading124"></a>
		LSet Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">LSet <i>stringvar</i> = <i>string</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">or</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif">LSet <i>varname1</i> = <i>varname2</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">In the first syntax, LSet 
		assigns a <i>string</i> value to a String variable (<i>stringvar</i>), 
		left-aligning the string to the String variable. In the second syntax, 
		LSet copies a variable (<i>varname2</i>) from one user-defined type to a 
		variable (<i>varname1</i>) in another user-defined type.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading125"></a>
		LTrim Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">LTrim(<i>string</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		String that contains a copy of a given <i>string</i> with any leading 
		spaces removed.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading126"></a>
		Mid Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Mid(<i>string</i>, <i>start</i>[, <i>length</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a String value of one 
		or more characters, taken from the String variable specified by the <i>
		string</i>
        argument. The <i>start</i> argument specifies the character position 
		within
        <i>string</i> where the new String is to be obtained, and the optional
        <i>length</i> argument specifies how many characters are to be taken 
		from
        <i>string</i>. If no <i>length</i> is specified, then all the characters 
		in <i>string</i> (starting at the position given in the <i>start</i> 
		argument) are used.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading127"></a>
		Mid Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Mid(<i>stringvar</i>, <i>start</i>[, <i>length</i>]) = <i>string</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Replaces one or more 
		characters in a String variable (<i>stringvar</i>) with another <i>
		string</i>. The
        <i>start</i> argument specifies the character position within <i>
		stringvar</i>
        to place the new <i>string</i>, and the optional <i>length</i> argument 
		specifies how many characters of <i>string</i> should be used. If <i>
		length</i>
        is omitted, then the entire <i>string</i> is used.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading128"></a>
		Minute Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Minute(<i>time</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Integer that represents the minute (0-59) of the time value specified by 
		the <i>time</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading129"></a>
		MIRR Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">MIRR(<i>values</i>(), <i>financerate</i>, <i>reinvestrate</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		represents the modified internal rate of return for an array of <i>
		values</i>
        that represent cash flow. The <i>values</i>() array must contain at 
		least one negative value (payment) and one positive value (receipt). The <i>
		financerate</i>
        argument specifies the interest rate paid as a cost of financing, and 
		the <i>reinvestrate</i> argument specifies the interest rate received on 
		gains from cash reinvestment.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading130"></a>
		MkDir Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">MkDir <i>path</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Creates the new directory or 
		folder specified by the <i>path</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading131"></a>
		Month Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Month(<i>date</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Integer that represents the month (1[nd]12) for the date value specified 
		by the <i>date</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading132"></a>
		MsgBox Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">MsgBox(<i>prompt</i>[, <i>buttons</i>][, <i>title</i>][, <i>helpfile</i>, <i>context</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Displays a message in a 
		dialog box with one or more buttons and waits for the user to respond. 
		MsgBox then returns an Integer value that represents the button that was 
		clicked. The <i>prompt</i> argument specifies the message to be 
		displayed in the dialog box, and <i>title</i> specifies an optional 
		caption for the dialog box's title bar. The optional <i>buttons</i> 
		argument specifies which buttons will be displayed. The optional <i>
		helpfile</i> and <i>context</i>
        arguments are used to provide context-sensitive Help for the dialog box.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading133"></a>
		Name Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Name <i>oldpathname</i> As <i>newpathname</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Renames the file, directory, 
		or folder specified by the <i>oldpathname</i> argument to the name 
		specified by <i>newpathname</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading134"></a>
		Now Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Now
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Date that contains the current system date and time.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading135"></a>
		NPer Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">NPer(<i>rate</i>, <i>pmt</i>, <i>pv</i>[, <i>fv</i>[, <i>type</i>]])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		indicates the number of periods for an annuity based on periodic fixed 
		payments (<i>pmt</i>) and a fixed interest rate (<i>rate</i>). The <i>pv</i>
        argument specifies the present value of a series of payments or 
		receipts. The optional <i>fv</i> argument specifies the future value or 
		cash balance left after the final payment. The optional <i>type</i> 
		argument specifies when payments are due (0 for end of the payment 
		period, the default; 1 for beginning of the payment period).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading136"></a>
		NPV Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">NPV(<i>rate</i>, <i>values</i>())
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		represents the present value of an investment based on a discount rate (<i>rate</i>) 
		and an array of <i>values</i> that represent cash flow. The <i>values</i>() 
		array must contain at least one negative value (payment) and one 
		positive value (receipt).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading137"></a>
		Oct Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Oct(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a String value that 
		represents the octal value of the argument <i>number</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading138"></a>
		On Error Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">On Error GoTo <i>line</i>
On Error Resume Next
On Error GoTo 0
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Enables or disables the use 
		of an error-handling routine. The On Error statement can specify a line 
		label or line number (specified by the <i>line</i> argument) to branch 
		to when an error occurs, allowing error-handling to be enabled. 
		Alternatively, using On Error Resume Next causes program control to be 
		transferred to the line of code immediately following the line of code 
		that causes an error. Finally, On Error GoTo 0 disables all 
		error-handling.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading139"></a>
		On...GoSub Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">On <i>expression</i> GoSub <i>destinationlist</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Evaluates a given <i>
		expression</i>
        and, depending on its value, transfers program control to a certain 
		subroutine. The possible subroutines are contained in the <i>
		destinationlist</i> argument, which contains one or more comma-delimited 
		line labels or line numbers. If <i>expression</i> evaluates to 1, then 
		the first subroutine in the
        <i>destinationlist</i> is used; if it evaluates to 2, then the second 
		subroutine in the <i>destinationlist</i> is used; and so on. Control is 
		transferred to the line of code immediately following the On...GoSub 
		line when a Return statement is encountered.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading140"></a>
		On...GoTo Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">On <i>expression</i> GoTo <i>destinationlist</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Evaluates a given <i>
		expression</i>
        and, depending on its value, transfers program control to a certain line 
		label or line number. The possible transfer points are contained in the
        <i>destinationlist</i> argument, which contains one or more 
		comma-delimited line labels or line numbers. If <i>expression</i> 
		evaluates to 1, then the first line label in the <i>destinationlist</i> 
		is used; if it evaluates to 2, then the second line label in the <i>
		destinationlist</i> is used; and so on.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading141"></a>
		Open Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Open <i>pathname</i> For <i>mode</i> [Access <i>access</i>] [<i>lock</i>] As _  [#]<i>filenumber</i> [Len=<i>reclength</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Opens a file for input/output 
		and assigns it to the given <i>filenumber</i>. The <i>pathname</i> 
		argument specifies the name of the file to open, and <i>mode</i> 
		indicates the file mode (Append, Binary, Input, Output, or Random). The 
		optional Access clause can be used to specify permissions for the file 
		(Read, Write, or Read Write). The optional <i>lock</i> argument can 
		specify the operations that can be performed on the file by other 
		processes (Shared, Lock Read, Lock Write, or Lock Read Write). The <i>
		reclength</i> argument can be used to specify the record size for random 
		files or the buffer size for sequential files.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading142"></a>
		Option Base Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Option Base [0 | 1]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares the default lower 
		bound of array subscripts. Option Base can only be used at module level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading143"></a>
		Option Compare Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Option Compare [Binary | Text | Database]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares the default method 
		used for string comparisons. Option Compare can only be used at module 
		level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading144"></a>
		Option Explicit Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Option Explicit
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Forces explicit declaration 
		of all variables in a module. If Option Explicit is not used, undeclared 
		variables are automatically typed as Variants. Option Explicit can only 
		be used at module level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading145"></a>
		Option Private Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Option Private Module
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Prevents a module's contents 
		(that is, variables and objects) from being used outside its project. 
		Option Private is only necessary when working with host applications 
		that allow variables and objects to be referenced across multiple 
		projects.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading146"></a>
		Partition Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Partition(<i>number</i>, <i>start</i>, <i>stop</i>, <i>interval</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		String that describes a range of numbers in which the <i>number</i> 
		argument falls. The <i>start</i> and <i>stop</i> arguments specify the 
		overall range of numbers, which is split up into smaller ranges as 
		specified by the <i>interval</i> argument. The Partition function 
		returns a string representation of the smaller range in which the number 
		can be found, such as &quot; 1: 10&quot; for a <i>number</i> that falls in the 
		range of 1 to 10.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading147"></a>
		Pmt Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Pmt(<i>rate</i>, <i>nper</i>, <i>pv</i>[, <i>fv</i>[, <i>type</i>]])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		indicates the payment for an annuity based on a number (<i>nper</i>) of 
		periodic fixed payments and a fixed interest rate (<i>rate</i>). The <i>
		pv</i>
        argument specifies the present value of a series of payments or 
		receipts. The optional <i>fv</i> argument specifies the future value or 
		cash balance left after the final payment. The optional <i>type</i> 
		argument specifies when payments are due (0 for end of the payment 
		period, the default; 1 for beginning of the payment period).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading148"></a>
		PPmt Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">PPmt(<i>rate</i>, <i>per</i>, <i>nper</i>, <i>pv</i>[, <i>fv</i>[, <i>type</i>]])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		indicates the principle payment for a given period (<i>per</i>) of an 
		annuity based on a number (<i>nper</i>) of periodic fixed payments and a 
		fixed interest rate (<i>rate</i>). The <i>pv</i> argument specifies the 
		present value of a series of payments or receipts. The optional <i>fv</i>
        argument specifies the future value or cash balance left after the final 
		payment. The optional <i>type</i> argument specifies when payments are 
		due (0 for end of the payment period, the default; 1 for beginning of 
		the payment period).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading149"></a>
		Print # Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Print #<i>filenumber</i>, [<i>outputlist</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Writes data to the open 
		sequential file that corresponds to <i>filenumber</i>. The optional <i>
		outputlist</i>
        argument can consist of one or more comma-delimited expressions to be 
		written and should use the following syntax:</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif">[{Spc(<i>n</i>) | Tab[(<i>n</i>)]}] [<i>expression</i>][<i>charpos</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">where Spc is optionally used 
		to write <i>n</i> spaces, and Tab is optionally used to advance to the
        <i>n</i>th column number. The <i>expression</i> argument can specify the 
		data to be written, and the <i>charpos</i> argument can specify the 
		insertion point for the next character. If <i>charpos</i> is omitted, 
		the next character will be written on the next line. If it is a 
		semicolon, the next character will be written immediately following the 
		last character.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading150"></a>
		Private Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Private [WithEvents] <i>varname</i>[([<i>subscripts</i>])] [As [New] <i>type</i>][,[WithEvents]
<i>varname</i>[([<i>subscripts</i>])]      [As [New] <i>type</i>]]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares one or more private 
		variables. The <i>varname</i> argument specifies the name of the 
		variable being declared, and <i>subscripts</i> are the dimensions for an 
		array variable. The optional As [New] <i>type</i> clause can be used to 
		specify the variable's data type, with the New keyword enabling implicit 
		creation of an object. The optional WithEvents keyword specifies that 
		the variable being declared is an object variable used to respond to 
		events triggered by an ActiveX object. The Private statement can only be 
		used at module level, and variables declared with it cannot be used 
		outside their own module.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading151"></a>
		Property Get Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">[Public | Private | Friend] [Static] Property Get name [(<i>arglist</i>)] [As <i>type</i>]
    [<i>statements</i>]
    [<i>name</i> = <i>expression</i>]
    [Exit Property]
    [<i>statements</i>]
    [<i>name</i> = <i>expression</i>]
End Property
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares the various parts of 
		a Property Get procedure, which is used to obtain the value of a 
		property. The optional Public, Private, and Friend keywords can be used 
		to define the procedure's scope, and the optional Static keyword 
		indicates that the procedure's local variables are preserved between 
		calls to the procedure. The <i>name</i> argument specifies the name of 
		the property to be retrieved and can be assigned a value (<i>name =</i> <i>
		expression</i>) that will be returned as the property's value. The data 
		type of the property can be specified using the As <i>type</i> clause. 
		The optional<b> </b>Exit Property can be used to exit the Property Get<b> </b>
		procedure immediately.</font></p>
      <p><font face="Arial, Helvetica, sans-serif">The optional list of 
		arguments (<i>arglist</i>) defines the arguments that will be passed to 
		the procedure. The arguments should use the following syntax:</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif">[Optional] [ByVal | ByRef] [ParamArray] <i>varname</i>[()]     [As <i>type</i>] [= <i>default value</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">where the Optional keyword 
		can be used to specify that the argument is not required (<i>default 
		value</i>
        assigns the argument's default value), ByVal and ByRef determine whether 
		the argument should be passed by value or by reference (the default), 
		and the ParamArray keyword specifies that the argument is an Optional 
		array of Variant elements. ParamArray can only be used with the last 
		argument in the argument list.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading152"></a>
		Property Let Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">[Public | Private | Friend] [Static] Property Let name ([arglist,] value)
    [statements]
    [Exit Property]
    [statements]
End Property
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares the various parts of 
		a Property Let procedure, which is used to assign a value to a property. 
		The optional Public, Private, and Friend keywords can be used to define 
		the procedure's scope, and the optional Static keyword indicates that 
		the procedure's local variables are preserved between calls to the 
		procedure. The <i>name</i> argument specifies the name of the property 
		being referenced, and <i>value</i> indicates the value to be assigned to 
		the property. The optional<b> </b>Exit Property can be used to exit the 
		Property Let<b>
        </b>procedure immediately.</font></p>
      <p><font face="Arial, Helvetica, sans-serif">The optional list of 
		arguments (<i>arglist</i>) defines the arguments that will be passed to 
		the procedure. The arguments should use the following syntax:</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif">[Optional] [ByVal | ByRef] [ParamArray] <i>varname</i>[()]     [As <i>type</i>] [= <i>default value</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">where the Optional keyword 
		can be used to specify that the argument is not required (<i>default 
		value</i>
        assigns the argument's default value), ByVal and ByRef determine whether 
		the argument should be passed by value or by reference (the default), 
		and the ParamArray keyword specifies that the argument is an Optional 
		array of Variant elements. ParamArray can only be used with the last 
		argument in the argument list.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading153"></a>
		Property Set Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">[Public | Private | Friend] [Static] Property Set name ([<i>arglist</i>,] <i>reference</i>)
    [<i>statements</i>]
    [Exit Property]
    [<i>statements</i>]
End Property
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares the various parts of 
		a Property Set procedure, which is used to set a reference to an object. 
		The optional Public, Private, and Friend keywords can be used to define 
		the procedure's scope, and the optional Static keyword indicates that 
		the procedure's local variables are preserved between calls to the 
		procedure. The <i>name</i> argument specifies the name of the property 
		being used, and <i>reference</i> indicates the object reference to be 
		set to the property. The optional<b> </b>Exit Property can be used to 
		exit the Property Set<b>
        </b>procedure immediately.</font></p>
      <p><font face="Arial, Helvetica, sans-serif">The optional list of 
		arguments (<i>arglist</i>) defines the arguments that will be passed to 
		the procedure. The arguments should use the following syntax:</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif">[Optional] [ByVal | ByRef] [ParamArray] <i>varname</i>[()] [As <i>type</i>] [= <i>default value</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">where the Optional keyword 
		can be used to specify that the argument is not required (<i>default 
		value</i>
        assigns the argument's default value), ByVal and ByRef determine whether 
		the argument should be passed by value or by reference (the default), 
		and the ParamArray keyword specifies that the argument is an Optional 
		array of Variant elements. ParamArray can only be used with the last 
		argument in the argument list.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading154"></a>
		Public Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Public [WithEvents] <i>varname</i>[([<i>subscripts</i>])] [As [New] <i>type</i>][,[WithEvents]
<i>varname</i>[([<i>subscripts</i>])] [As [New] <i>type</i>]]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares one or more public 
		variables. The <i>varname</i> argument specifies the name of the 
		variable being declared, and <i>subscripts</i> are the dimensions for an 
		array variable. The optional As [New] <i>type</i> clause can be used to 
		specify the variable's data type, with the New keyword enabling implicit 
		creation of an object. The optional WithEvents keyword specifies that 
		the variable being declared is an object variable used to respond to 
		events triggered by an ActiveX object. The Public statement can only be 
		used at module level, and variables declared with it can be used outside 
		their own module.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading155"></a>
		Put Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Put [#]<i>filenumber</i>, [<i>recnumber</i>], <i>varname</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Writes data to the open disk 
		file corresponding to the <i>filenumber</i> argument from a variable (<i>varname</i>). 
		Put works with files open as Random or Binary, and a record number (<i>recnumber</i>) 
		can be specified when writing data to a Random file. When using Binary 
		files, <i>recnumber</i> can alternatively be used to specify the byte 
		position at which the data is to be written.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading156"></a>
		PV Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">PV(<i>rate</i>, <i>nper</i>, <i>pmt</i>[, <i>fv</i>[, <i>type</i>]])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		indicates the present value of an annuity based on a number (<i>nper</i>) 
		of periodic fixed payments (<i>pmt</i>) and a fixed interest rate (<i>rate</i>). 
		The optional <i>fv</i> argument specifies the future value or cash 
		balance left after the final payment. The optional <i>type</i> argument 
		specifies when payments are due (0 for end of the payment period, the 
		default; 1 for beginning of the payment period).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading157"></a>
		QBColor Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">QBColor(<i>color</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Long value that 
		represents the RGB color code that corresponds to a given color <i>
		number</i> (0[nd]15) of the color palette used in Microsoft QuickBasic.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading158"></a>
		RaiseEvent Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">RaiseEvent <i>eventname</i> [(<i>argumentlist</i>)]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Triggers an event. The 
		optional
        <i>argumentlist</i> specifies one or more comma-delimited arguments to 
		be passed to the event procedure. The event procedure must be declared 
		in the same module as the RaiseEvent function or an error will occur.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading159"></a>
		Randomize Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Randomize [<i>number</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Initializes the random number 
		generator, using the optional <i>number</i> argument as a seed value.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading160"></a>
		Rate Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Rate(<i>nper</i>, <i>pmt</i>, <i>pv</i>[, <i>fv</i>[, <i>type</i>[, <i>guess</i>]]])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		indicates the fixed interest rate per period for an annuity based on a 
		number (<i>nper</i>) of periodic fixed payments (<i>pmt</i>). The 
		optional
        <i>fv</i> argument specifies the future value or cash balance left after 
		the final payment. The optional <i>type</i> argument specifies when 
		payments are due (0 for end of the payment period, the default; 1 for 
		beginning of the payment period). The optional <i>guess</i> argument 
		specifies an estimate value to be returned by Rate (default estimate is 
		.1).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading161"></a>
		ReDim Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">ReDim [Preserve] <i>varname</i>(<i>subscripts</i>) [As <i>type</i>] [, <i>varname</i>(<i>subscripts</i>) [As <i>type</i>]]...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Redimensions one or more 
		dynamic array variables and reallocates their storage space. The 
		optional Preserve keyword can be used to keep the contents of the array 
		intact when it is being redimensioned. The <i>varname</i> argument is 
		the name of the variable, and the optional As <i>type</i> clause 
		indicates its data type. The <i>subscripts
        </i>are the dimensions of the array variable.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading162"></a>
		Rem Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Rem <i>comments</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Allows <i>comments</i> to be 
		added to a program. Everything on the line after the Rem statement is 
		ignored by Visual Basic. An apostrophe (`) can also be used in lieu of 
		the Rem statement.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading163"></a>
		Reset Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Reset
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Closes all files opened with 
		the Open statement and writes any file buffer contents to disk.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading164"></a>
		Resume Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Resume [0]
Resume Next
Resume <i>line</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Resumes execution of a 
		program when an error-handling routine is finished. Resume by itself 
		causes execution to resume with the statement that caused the error or, 
		if the error occurred in a called procedure, the statement that last 
		called out of the error-handling procedure<b>. </b>Resume Next causes 
		execution to resume with the statement immediately following the one 
		that caused the error. Resume <i>line</i>
        transfers control to the line label or line number specified by the <i>
		line</i>
        argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading165"></a>
		RGB Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">RGB(<i>red</i>, <i>green</i>, <i>blue</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Long value that 
		represents an RGB color value as specified by the <i>red</i>, <i>green</i>, 
		and <i>blue</i>
        color components passed to the RGB function. All color components should 
		be Integers in the 0[nd]255 range.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading166"></a>
		Right Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Right(<i>string</i>, <i>length</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a String value <i>
		length</i>
        characters long that is taken from the right side of a given <i>string</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading167"></a>
		RmDir Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">RmDir <i>path</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Removes the directory or 
		folder specified by the <i>path</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading168"></a>
		Rnd Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Rnd[(<i>number</i>)]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Single value that 
		contains a randomly generated number less than 1 but greater than or 
		equal to zero. The optional <i>number</i> argument can be used to 
		determine how Rnd generates the random number.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading169"></a>
		RSet Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">RSet <i>stringvar</i> = <i>string</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Assigns a <i>string</i> value 
		to a String variable (<i>stringvar</i>), right-aligning the string to 
		the String variable.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading170"></a>
		RTrim Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">RTrim(<i>string</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		String that contains a copy of a given <i>string</i> with any trailing 
		spaces removed.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading171"></a>
		SavePicture Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">SavePicture <i>picture</i>, <i>stringexpression</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Saves an graphic image from 
		an object's Picture or Image property to a file. The <i>picture</i> 
		argument specifies the control from which the graphics file is to be 
		created (Picture or Image), and <i>stringexpression</i> specifies the 
		path and filename to which the image is saved.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading172"></a>
		SaveSetting Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">SaveSetting <i>appname</i>, <i>section</i>, <i>key</i>, <i>setting</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Saves or creates an 
		application (<i>appname</i>) entry, section (<i>section</i>), key 
		setting (<i>key</i>), and value (<i>setting</i>) in the System Registry.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading173"></a>
		Second Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Second(<i>time</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Integer that represents the second (0[nd]59) of the time value specified 
		by the <i>time</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading174"></a>
		Seek Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Seek(<i>filenumber</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Long value that 
		specifies the current record or byte position for the open file 
		associated with
        <i>filenumber</i>. When dealing with Random files, Seek returns the 
		number of the next record to be read or written. For all other file 
		types, Seek returns a byte position.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading175"></a>
		Seek Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Seek [#]<i>filenumber</i>, <i>position</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Sets the record or byte <i>
		position</i>
        of the open file associated with <i>filenumber</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading176"></a>
		Select Case Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Select Case <i>testexpression</i>
    [Case <i>expressionlist-n</i>
        [<i>statements-n</i>]] ...
    [Case Else
        [<i>elsestatements</i>]]
End Select
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Evaluates an expression (<i>testexpression</i>) 
		and, depending on the result, executes one or more statements (<i>statements-n</i>) 
		that correspond to the expression's value (<i>expressionlist-n</i>). In 
		other words, the value of <i>testexpression</i> is compared with one or 
		more other values (<i>expressionlist-n</i>), and whichever matches gets 
		its statements (<i>statements-n</i>) executed. If there are no matches, 
		an optional Case Else set of statements (<i>elsestatements</i>) is 
		executed.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading177"></a>
		SendKeys Statement</font></h3>
      <p><font face="Arial, Helvetica, sans-serif">Generates one or more 
		keystrokes as if they came from the keyboard. The <i>string</i> argument 
		determines which keystrokes to send, and the optional Wait argument 
		(Boolean) specifies whether keystrokes must be processed before control 
		is returned to the procedure. False, the default value, means that 
		control is returned to the procedure immediately after the keystrokes 
		are sent.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading178"></a>
		Set Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Set <i>objectvar</i> = {[New] <i>objectexpression</i> | Nothing}
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Assigns an object reference (<i>objectexpression</i>) 
		to a variable or property (<i>objectvar</i>). The optional New keyword 
		can be used to indicate that the object should be created implicitly. To 
		disassociate <i>objectvar</i> with a specific object and free up the 
		resources it is using, assign it the Nothing keyword.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading179"></a>
		SetAttr Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">SetAttr <i>pathname</i>, <i>attributes</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Sets attributes for the file 
		or directory specified by the <i>pathname</i> argument. The <i>
		attributes</i>
        argument can use several VB constants (vbNormal, vbReadOnly, vbHidden, 
		vbSystem, vbDirectory, and vbArchive) that can be combined bitwise to 
		determine which attributes are set.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading180"></a>
		Sgn Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Sgn(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Integer that represents the sign of a given <i>number</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading181"></a>
		Shell Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Shell(<i>pathname</i>[, <i>windowstyle</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Runs the executable program 
		specified by the <i>pathname</i> argument and returns a Variant of 
		subtype Double that represents the program's task ID. If Shell is 
		unsuccessful, it returns zero. The optional <i>windowstyle</i> argument 
		determines the style of the window in which the shelled program runs.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading182"></a>
		Sin Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Sin(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		represents the sine of a given angle (as specified by the <i>number</i>
        argument).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading183"></a>
		SLN Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">SLN(<i>cost</i>, <i>salvage</i>, <i>life</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		represents the straight-line depreciation of an asset when given its 
		initial
        <i>cost</i>, <i>salvage</i> value at the end of its useful life, and <i>
		life</i>
        span.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading184"></a>
		Space Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Space(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		String that contains a <i>number</i> of spaces.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading185"></a>
		Spc Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Spc(<i>n</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Inserts a specified number of 
		spaces (<i>n</i>) when writing or displaying text using the Print # 
		statement or the Print method.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading186"></a>
		Sqr Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Sqr(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		represents the square root of a given <i>number</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading187"></a>
		Static Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Static <i>varname</i>[([<i>subscripts</i>])] [As [New] <i>type</i>] [, <i>varname</i>[([<i>subscripts</i>])]
[As [New] <i>type</i>] ...
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares one or more static 
		variables, which retain their values as long as the program is running. 
		The <i>varname</i> argument is the name of the variable, and the 
		optional As [New] <i>type</i> indicates its data type. If the New 
		keyword is used, then an implicit creation of the object is made. The 
		optional <i>subscripts
        </i>are the dimensions of an array variable.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading188"></a>
		Stop Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Stop
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Suspends program execution.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading189"></a>
		Str Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Str(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		String that is a representation of a given <i>number</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading190"></a>
		StrComp Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">StrComp(<i>string1</i>, <i>string2</i>[, <i>compare</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Integer that indicates the result of a comparison between two strings (<i>string1</i> 
		and <i>string2</i>). The optional <i>compare</i> argument specifies how 
		strings are to be compared, with 0 for a binary comparison and 1 for a 
		noncase- sensitive textual comparison.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading191"></a>
		StrConv Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">StrConv(<i>string</i>, <i>conversion</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		String that has been converted from an original <i>string</i> as 
		specified by the <i>conversion</i> argument. The <i>conversion</i> 
		argument can use several VB constants to specify the type of conversion, 
		such as vbUpperCase, vbLowerCase, and vbProperCase.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading192"></a>
		String Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">String(<i>number</i>, <i>character</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		String that is of the length specified by <i>number</i> and is filled 
		with a given <i>character</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading193"></a>
		Sub Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">[Public | Private | Friend] [Static] Sub <i>name </i>[(<i>arglist</i>)]
    [<i>statements</i>]
    [Exit Sub]
    [<i>statements</i>]
End Sub
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Declares the various parts of 
		a Sub procedure. The optional Public, Private, and Friend keywords can 
		be used to define the Sub's scope, and the optional Static keyword 
		indicates that the procedure's local variables are preserved between 
		calls to the Sub. The <i>name</i> argument specifies the name of the Sub 
		procedure. The optional<b> </b>Exit Sub can be used to exit the Sub 
		procedure immediately.</font></p>
      <p><font face="Arial, Helvetica, sans-serif">The optional list of 
		arguments (<i>arglist</i>) defines the arguments that will be passed to 
		the procedure. The arguments should use the following syntax:</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif">[Optional] [ByVal | ByRef] [ParamArray] <i>varname</i>[()] [As _ <i>type</i>] [= <i>default value</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">where the Optional keyword 
		can be used to specify that the argument is not required (<i>default 
		value</i>
        assigns the argument's default value), ByVal and ByRef determine whether 
		the argument should be passed by value or by reference (the default), 
		and the ParamArray keyword specifies that the argument is an Optional 
		array of Variant elements. ParamArray can only be used with the last 
		argument in the argument list.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading194"></a>
		Switch Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Switch(<i>expr-1</i>, <i>value-1</i>[, <i>expr-2</i>, <i>value-2</i> ... [, <i>expr-n</i>, _ <i>value-n</i>]])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Evaluates a list of 
		expressions (<i>expr-1</i>, <i>expr-2</i>...<i>expr-n</i>) and returns a 
		Variant value that corresponds to the first expression that evaluates as 
		True. If <i>expr-1</i>
        is True, then Switch returns the value indicated by <i>value-1</i>; if
        <i>expr-2</i> is True, then Switch returns the value indicated by <i>
		value-2</i>; and so on.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading195"></a>
		SYD Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">SYD(<i>cost</i>, <i>salvage</i>, <i>life</i>, <i>period</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		represents the sum-of-years' digits depreciation of an asset when given 
		its initial <i>cost</i>, <i>salvage</i> value at the end of its useful 
		life, <i>life</i> span, and <i>period</i> for which depreciation is 
		calculated.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading196"></a>
		Tab Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Tab(<i>n</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Positions output to a given 
		column (<i>n</i>) when writing or displaying text using the Print # 
		statement or the Print method.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading197"></a>
		Tan Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Tan(<i>number</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Double value that 
		represents the tangent of a given angle (specified by the <i>number </i>
		argument).</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading198"></a>
		Time Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Time
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Date that contains the current system time.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading199"></a>
		Time Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Time = <i>time</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Sets the system time to the 
		time specified by the <i>time</i> argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading200"></a>
		Timer Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Timer
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Single value that 
		represents the number of seconds that have elapsed since midnight.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading201"></a>
		TimeSerial Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">TimeSerial(<i>hour</i>, <i>minute</i>, <i>second</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Date that represents a time as specified by the <i>hour</i>, <i>minute</i>, 
		and <i>second</i> arguments.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading202"></a>
		TimeValue Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">TimeValue(<i>time</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Date that is derived from the time value specified by the <i>time</i>
        argument.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading203"></a>
		Trim Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Trim(<i>string</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		String that contains a copy of a given <i>string</i> with any leading 
		and trailing spaces removed.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading204"></a>
		Type Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">[Private | Public] Type <i>varname</i>
    <i>elementname</i> [([<i>subscripts</i>])] As <i>type</i>
    [<i>elementname</i> [([<i>subscripts</i>])] As <i>type</i>]
    ...
End Type
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Defines a user-defined type (UDT) 
		structure that contains one or more elements (<i>elementname</i>). The 
		optional Public and Private keywords specify the UDT's scope, and
        <i>varname</i> specifies the UDT's name. Elements can be arrays (by 
		specifying
        <i>subscripts</i>), and their data type must be defined using the As <i>
		type</i>
        clause. The Type statement can only be used at module level.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading205"></a>
		TypeName Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">TypeName(<i>varname</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a String value that 
		indicates the data type of a given variable (<i>varname</i>). Possible 
		return values are: Byte, Integer, Long, Single, Double, Currency, 
		Decimal, Date, String, Boolean, Error, Empty, Null, Object, Unknown, 
		Nothing, or an object type.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading206"></a>
		UBound Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">UBound(<i>arrayname</i>[, <i>dimension</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Long value that 
		represents the largest subscript for a dimensioned array (<i>arrayname</i>). 
		For multidimensional arrays, the <i>dimension</i> argument can be 
		included to specify which dimension should be used.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading207"></a>
		UCase Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">UCase(<i>string</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Converts a <i>string</i> to 
		all uppercase characters and returns a new String value.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading208"></a>
		Unload Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Unload <i>object</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Unloads an <i>object</i> 
		(such as a form or control) from memory and frees up any resources being 
		used by the object.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading209"></a>
		Unlock Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Unlock [#]<i>filenumber</i>[, <i>recordrange</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Removes locking that prevents 
		another process from accessing all or part of the open file that 
		corresponds to the <i>filenumber</i> argument. The <i>recordrange</i> 
		argument refers to a range of records (or bytes) that are to be unlocked 
		and should use the syntax:</font></p>
      <p>
      </p><pre><font face="Arial, Helvetica, sans-serif"><i>recnumber</i> | [<i>start</i>] To <i>end</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">where <i>recnumber</i> is the 
		record number (for Random files) or byte position (for Binary files) 
		where unlocking should begin. Alternatively, the starting and ending 
		record numbers or bytes to be unlocked can be specified using the <i>
		start</i>
        and <i>end</i> arguments.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading210"></a>
		Val Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Val(<i>string</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns the numeric value of 
		a <i>string</i>. The data type that is returned by Val depends on the 
		kind of numeric value the string contains. If the string does not 
		contain a numeric value, then Val returns zero.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading211"></a>
		VarType Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">VarType(<i>varname</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns an Integer value that 
		represents the subtype of the variable specified by <i>varname</i>. 
		Several VB constants are used to define the data type values returned by 
		the VarType function, including: vbEmpty, vbNull, vbInteger, vbLong, 
		vbSingle, vbDouble, vbCurrency, vbDate, vbString, vbObject, vbError, 
		vbBoolean, vbVariant, vbDataObject, vbDecimal, vbByte, and vbArray.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading212"></a>
		Weekday Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Weekday(<i>date</i>, [<i>firstdayofweek</i>])
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant of subtype 
		Integer that represents the day of the week for a given <i>date</i>. 
		Weekday returns a 1 for Sunday, 2 for Monday, and so on. The optional <i>
		firstdayofweek</i>
        argument can be used to specify the first day of the week. If <i>
		firstdayofweek</i>
        is not specified, then Sunday (1) is assumed.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading213"></a>
		While...Wend Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">While <i>condition</i>
    [<i>statements</i>]
Wend
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Repeats one or more <i>
		statements</i>
        while a <i>condition</i> remains True. When the <i>condition</i> becomes 
		False, then control is passed to the line of code immediately following 
		the While...Wend structure.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading214"></a>
		Width # Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Width #<i>filenumber</i>, <i>width</i>
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Assigns an output line <i>
		width</i>
        (in characters) for the open file associated with <i>filenumber</i>.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading215"></a>
		With Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">With <i>object</i>
    [<i>statements</i>]
End With
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Executes one or more <i>
		statements</i>
        on a single <i>object</i> or user-defined type.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading216"></a>
		Write # Statement</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Write #<i>filenumber</i>, [<i>outputlist</i>]
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Writes data to the open 
		sequential file associated with the <i>filenumber</i> argument. The <i>
		varlist</i>
        argument should contain one or more comma-delimited variables that 
		contain the data to be written to the file.</font></p>
      <p>
      </p><h3><font face="Arial, Helvetica, sans-serif"><a class="Type1" name="Heading217"></a>
		Year Function</font></h3>
      <pre><font face="Arial, Helvetica, sans-serif">Year(<i>date</i>)
</font></pre>
      <p><font face="Arial, Helvetica, sans-serif">Returns a Variant that 
		represents the year for the date value specified by the <i>date</i> 
		argument.</font><!-- end content area --></p>
		<p>&nbsp;</p></td>
<td width="6"></td>
	</tr>
</tbody></table>
</td></tr></tbody></table></center>
</body>
</html>