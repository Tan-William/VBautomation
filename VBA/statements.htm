<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>


<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Excel Macros/Excel VBA code. Excel VBA Macro Tips for Beginners. Excel Macros Help</title>
<meta name="author" content="William Tan, http://tan-william.github.io/VBautomation/">
<meta name="Description" content="Excel Macros: Excel VBA Macros. Free help on Excel Macros, Free Excel VBA code">
<meta name="Keywords" content="excel macros,Excel VBA,excel,vba,tips,tricks,excel vba,Visual Basic For Applications,help">
<meta name="keywords" content="Poh,William,Excel,Access,VBA,Forecasting,Inventory">
<meta name="keywords" content="Excel macro tips,Excel macro training,Excel tips,Home,Office,Basic,Intermediate,Advance">
<meta name="keywords" content="Singapore, Kuala Lumpur, KL, Malaysia, Hong Kong, Taiwan, Japan, China, Korea, Sarawak">
<meta name="generator" content="Microsoft FrontPage 12.0">
</head>

<script language="javascript">
// Courtesy of SimplytheBest.net - http://simplythebest.net/scripts/
var win = null;
function NewWindow(mypage,myname,w,h,scroll){
LeftPosition = (screen.width) ? (screen.width-w)/2 : 0;
TopPosition = (screen.height) ? (screen.height-h)/2 : 0;
settings =
'height='+h+',width='+w+',top='+TopPosition+',left='+LeftPosition+',scrollbars='+scroll+',resizable'
win = window.open(mypage,myname,settings)
}
</script>


<script type="text/javascript">
<!--if (top.location != location) {top.location.href = document.location.href ;}-->
</script>


<style>
<!--
.new_link {color: #000000;  font-family: Verdana, Arial, Helvetica, sans-serif;   font-size: 11px; text-decoration: none; font-weight: normal;}
-->
</style>

<body background="../logo.gif" style="background-attachment: fixed">

<style type="text/css">
body {scrollbar-3dlight-color:#000000;
scrollbar-arrow-color:#FFFFFF;
scrollbar-base-color:#ffffff;
scrollbar-darkshadow-color:#000000;
scrollbar-face-color:#339933;
scrollbar-highlight-color:#ffffff;
scrollbar-shadow-color:#ffffff}
 li.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	margin-left:0in; margin-right:0in; margin-top:0in}
table.MsoTableGrid
	{border:1.0pt solid windowtext;
	font-size:10.0pt;
	font-family:"Times New Roman";
	}
h4
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Times New Roman";
	font-weight:bold}
h2
	{margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:Arial;
	font-weight:bold;
	font-style:italic}
span.parameter
	{}
span.keyword
	{}
span.CodeBlue
	{font-family:"Courier New";
	color:navy}
.auto-style1 {
	color: #000000;
	font-family: Verdana;
	font-size: 10.5pt;
	text-decoration: none;
	font-weight: normal;
}
.auto-style2 {
	font-family: Verdana;
	font-size: 10.5pt;
}
.auto-style14 {
	font-size: 10.5pt;
	text-decoration: none;
}
.auto-style13 {
	color: #000000;
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-size: 10.5pt;
	font-weight: normal;
}
.auto-style16 {
	font-family: Verdana;
	font-weight: bold;
	font-size: 10.5pt;
}
.auto-style17 {
	font-family: Verdana;
	font-size: 12pt;
	font-weight: bold;
}
.auto-style19 {
	font-size: 10.5pt;
}
.auto-style20 {
	font-family: Verdana;
}
.auto-style22 {
	font-size: 14pt;
}
.auto-style26 {
	font-size: 13pt;
	font-style: italic;
}
.auto-style27 {
	font-family: Arial;
	font-size: 14pt;
}
.auto-style28 {
	font-family: Arial;
	font-style: italic;
	font-size: 14pt;
}
.auto-style29 {
	font-size: 14pt;
	font-style: italic;
}
.auto-style30 {
	font-size: 14pt;
	font-style: italic;
	font-weight: bold;
}
.auto-style31 {
	font-size: 14pt;
	font-weight: bold;
}
.auto-style33 {
	font-family: Verdana;
	font-size: 10.5pt;
	text-align: center;
}
.auto-style34 {
	font-size: 10.5pt;
	color: black;
	font-family: Verdana;
}
.auto-style35 {
	font-size: 10.5pt;
	color: maroon;
	font-family: Verdana;
}
.auto-style36 {
	line-height: 12.0pt;
	font-size: 10.5pt;
	font-family: Verdana;
}
.auto-style37 {
	font-family: Verdana;
	font-style: italic;
	font-size: 10.5pt;
}
.auto-style39 {
	font-size: 10.5pt;
	font-weight: bold;
}
.auto-style40 {
	font-size: 10.5pt;
	font-style: italic;
}
.auto-style41 {
	font-family: Verdana;
	font-weight: bold;
}
.auto-style42 {
	font-size: 10.5pt;
	font-family: Verdana;
	margin-left: 0in;
	margin-right: 0in;
	margin-top: 0in;
	margin-bottom: .0001pt;
}
.auto-style43 {
	font-size: 10.5pt;
	color: #339966;
	font-family: Verdana;
}
.auto-style44 {
	font-size: 10.0pt;
	font-family: Verdana;
	margin-left: 0in;
	margin-right: 0in;
	margin-top: 0in;
	margin-bottom: .0001pt;
}
.auto-style45 {
	font-family: Verdana;
	font-size: 11pt;
	font-weight: bold;
}
.auto-style46 {
	font-family: Verdana;
	font-size: 11pt;
}
.auto-style47 {
	font-size: 11pt;
	font-weight: bold;
}
.auto-style48 {
	font-family: Verdana;
	font-size: 10.5pt;
	color: #07773F;
}
.auto-style49 {
	color: #07773F;
}
.auto-style50 {
	color: #067206;
}
.auto-style51 {
	font-family: Verdana;
	font-size: 10.5pt;
	color: #067206;
}
.auto-style52 {
	color: #0045C3;
	font-family: Verdana;
	font-size: 10.5pt;
	text-decoration: none;
	font-weight: normal;
}
.auto-style53 {
	font-family: Verdana;
	font-size: 10.5pt;
	text-decoration: none;
	font-weight: normal;
}
.auto-style54 {
	color: #0045C3;
}
</style>

<font face="">
<TABLE border="0" cellspacing="3" width="98%">
<TBODY>
<tr>
<td bgcolor="#ffffff" valign="top" width="13%" align="center" height="20682">
</font>


<font face="">	
 <TABLE bgcolor="#3399cc" border="0" cellpadding="0" cellspacing="0" width="158">
  <TBODY>
	<TR>
	 <TD>
       <TABLE border="0" cellpadding="3" cellspacing="1" width="161">
         <TBODY>


					<tr width="159">
					<td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" class="auto-style2">
					<a href="../index.htm" rel="internal" class="auto-style1">Home</a></td>
					</tr>
					
					<tr width="159">
					<td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" class="auto-style2">
					<a href="../AboutMe/Me.htm" rel="internal" class="auto-style1">
					About me</a></td>
					</tr>
                     
		<TBODY>
		<td bgcolor="#3399cc" height="135" width="153">
		<p align="left">
		<img border="0" src="../logo-excelvba_1.gif" width="153" height="59"><br>
		<img border="0" src="../logo-excelvba_2.gif" width="153" height="68"></td>
		</TBODY>                  
                                                
                                                
				<tr height="" width="159">
				<td bgcolor="#FFFF66" valign="middle" width="153" class="auto-style2">
				<font class="auto-style1"><strong><br>
				&nbsp;<i>VBA Programming</i></strong></font></font></font><span class="auto-style2">
				</span>

<font face="">

                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" align="left" class="auto-style2">
					<span class="auto-style54">
					<a href="Sub_VBA/WilliamExcelUtilities.zip" rel="internal" class="auto-style53">
					<strong>Download</strong></a></span><a href="Sub_VBA/WilliamExcelUtilities.zip" rel="internal" class="auto-style1">
					my Add-In tool</a><font face="">&nbsp;(<a class="auto-style14" href="Sub_VBA/WilliamExcelUtilities.zip"><span class="auto-style13"><em>run 
					on 32-bit MS Office Excel</em>)</span></a></font></td>
                    </tr>
                                                
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" align="left" height="28" class="auto-style2">
					<a href="beginner_basic.htm" rel="internal" class="auto-style1">
					VBA Basic for beginners</a></td>
                    </tr>

                    
                    <tr width="159">
                    <td onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="Objects.htm" rel="internal" class="auto-style1">Excel 
					Main Objects</a></td>
                    </tr>
                    
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" class="auto-style2">
					<a href="rows_columns.htm" rel="internal" class="auto-style1">
					More with Rows, Columns, Cells, Range ...</a></td>
                    </tr>
                    
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" class="auto-style2">
					<a href="workaround_worksheet.htm" rel="internal" class="auto-style1">Working 
					around your Worksheet ...</a></td>
                    </tr>
                                        
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="statements.htm" rel="internal" class="auto-style52">
					Statements</a></td>
                    </tr>
                                   
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
 					<a href="functions.htm" rel="internal" class="auto-style1">
					Functions</a><span class="auto-style2"></font></span></td>
                    </tr>
                                   
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" class="auto-style2">
					<font face="">	
 					<a href="loops.htm" rel="internal" class="auto-style1">
					Conditional Statements and Loops Structure</a></font><span class="auto-style2">
					</span></td>
                    </tr>
                                                                   
					<tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" class="auto-style2">
					<a href="errors_handling.htm" rel="internal" class="auto-style1">
					Errors Handling</a><span class="auto-style2"></font></span></td>
                    </tr>
                                        
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="http://www.110mb.com/404.php" rel="internal" class="auto-style1">UserForms</a></td>
                    </tr>
                    
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="pivot_table.htm" rel="internal" class="auto-style1">
					Pivot Tables</a><span class="auto-style2"></font></span></td>
                    </tr>
					
					<tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<font face="">	
 					<a href="charting.htm" rel="internal" class="auto-style1">Charting</a></font></td>
                    </tr>		
					
					<tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<font face="">	
 					<a href="autofilter.htm" rel="internal" class="auto-style1">
					AutoFilter, Advanced Filter</a></font></td>
                    </tr>                            

					<tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<font face="">	
 					<a href="File_IO_VisualBasic.htm" rel="internal" class="auto-style1">
					File I/O VBA Examples</a></font></td>
                    </tr>     
					
					<tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" class="auto-style2">
					<font face="">	
 					<a href="ado_dao.htm" rel="internal" class="auto-style1">ADO and 
					DAO, integrating Excel and Access</a></font></td>
                    </tr>
                    
					<tr width="159">
                    <td onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="excel_fun_staff.htm" rel="internal" class="auto-style1">
					Other VBA fun staff</a></td>
                    </tr>


                    <tr HEIGHT="130" width="159">
                    <td bgcolor="#FFFF66" width="153" height="20044">
					<p></p>
					</tr>

					</TBODY></TABLE>
				</TD>
			</TR>
		</TBODY></TABLE>

<font face="">

<font face="">

<font face="">

<font face="">
						
			
<td bgcolor="#FFFFFF" height="20682" style="width: 1%"></td>
<td valign="top" width="79%" height="20682">
      <!-- Start Page Content -->
		</font>

		<p><b><font face="Times New Roman"><span style="font-size: 22.0pt">E<span style="font-size:22.0pt">xc</span></span></font></b><font face="Times New Roman"><span style="font-size:22.0pt"><b>el 
		VBA Statements</b></span></font></p>

<font face="">
		<p class="auto-style2">A <b>statement</b> 
		in Visual Basic is a complete instruction that make declaration, defines 
		an action, defines an item, or gives the value of a variable. It can 
		contain keywords, operators, variables, constants, and expressions. A 
		statement usually fits on one line, but you can continue a statement 
		onto the next line using a line-continuation character, which is the 
		combination of a space followed by an underscore. Visual Basic ignores 
		comments when it runs your procedures. Comment lines begin with an 
		apostrophe ( ' ) or with <b>Rem</b> followed by a space, and can be 
		added anywhere in a procedure. Each statement belongs to one of the 
		following three categories:</p>
		<ul>
	<li>
	<span class="auto-style16">Declaration statements</span><span class="auto-style2">, which name a variable, constant, or procedure and can also 
	specify a data type.</span></li>
	<li>
	<span class="auto-style16">Assignment statements</span><span class="auto-style2">, which assign a value or expression to a variable or 
	constant.</span></li>
	<li>
	<span class="auto-style16">Executable statements</span><span class="auto-style2">, which initiate actions. These statements can execute a 
	method or function, and they can loop or branch through blocks of code. 
	Executable statements often contain mathematical or conditional operators.</span></li>
		</ul>
		<p><b><span style="font-family:Arial"><br>
		</span></b></font></font><span class="auto-style17">Declaration Statements</span></p>

<font face="">
		<table x:str border="0" cellpadding="0" cellspacing="0" style="border-collapse:
 collapse;width:237pt" id="table6">
			<colgroup>
				<col>
				<col width="108" style="width: 81pt">
			</colgroup>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; width: 105pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				<font color="#800000">Option Explicit</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; width: 101pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				<font color="#800000">Public</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 105pt;" class="auto-style2">
				<font color="#800000">Option Private</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 101pt;" class="auto-style2">
				<font color="#800000">Private</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 105pt;" class="auto-style2">
				<font color="#800000">Option Compare</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 101pt;" class="auto-style2">
				<font color="#800000">Friend</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 105pt;" class="auto-style2">
				<font color="#800000">Declare</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 101pt;" class="auto-style2">
				<font color="#800000">Set</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 105pt;" class="auto-style2">
				<font color="#800000">Sub</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 101pt;" class="auto-style2">
				<font color="#800000">Let</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 105pt;" class="auto-style2">
				<font color="#800000">Function</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 101pt;" class="auto-style2">
				<font color="#800000">ArrayName</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 105pt;" class="auto-style2">
				<font color="#800000">Const</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 101pt;" class="auto-style2">
				<font color="#800000">Enum</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 105pt;" class="auto-style2">
				<font color="#800000">Dim</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 101pt;" class="auto-style2">
				<font color="#800000">VarType</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 105pt;" class="auto-style2">
				<font color="#800000">ReDim</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 101pt;" class="auto-style2">
				<font color="#800000">DefType...</font></td>
			</tr>
		</table>
		<p><b><span style="font-family:Arial"><br>
		</span></b></font><span class="auto-style17">Assignment Statements</span></p>

<font face="">
		<table x:str border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse; width: 465px" id="table7">
			<colgroup>
				<col span="1">
				<col span="1">
				<col width="103" span="1" style="width: 77pt">
			</colgroup>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; width: 152px; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" x:str="'= Operator" class="auto-style2">
				<font color="#800000">= Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; width: 143px; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				<font color="#800000">* Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; width: 141px; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				<font color="#800000">XOR Operator</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 152px;" class="auto-style2">
				<font color="#800000">^= Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 143px;" class="auto-style2">
				<font color="#800000">/ Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141px;" class="auto-style2">
				<font color="#800000">NOT Operator</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 152px;" class="auto-style2">
				<font color="#800000">*= Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 143px;" class="auto-style2">
				<font color="#800000">\ Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141px;" class="auto-style2">
				<font color="#800000">EQV Operator</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 152px;" class="auto-style2">
				<font color="#800000">/= Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 143px;" class="auto-style2">
				<font color="#800000">^ Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141px;" class="auto-style2">
				<font color="#800000">IMP Operator</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 152px;" class="auto-style2">
				<font color="#800000">\= Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 143px;" class="auto-style2">
				<font color="#800000">() Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141px;" class="auto-style2">
				<font color="#800000">IS Operator</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 152px;" x:str="'+= Operator" class="auto-style2">
				<font color="#800000">+= Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 143px;" class="auto-style2">
				<font color="#800000">&amp; Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141px;" class="auto-style2">
				<font color="#800000">LIKE Operator</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 152px;" x:str="'-= Operator" class="auto-style2">
				<font color="#800000"><span class="auto-style19">-= Operator</span></font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 143px;" class="auto-style2">
				<font color="#800000">&gt; Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141px;" class="auto-style2">
				<font color="#800000">MOD Operator</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 152px;" class="auto-style2">
				<font color="#800000">&lt;&lt;= Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 143px;" class="auto-style2">
				<font color="#800000">&lt; Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141px;" class="auto-style2">
				&nbsp;</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 152px;" class="auto-style2">
				<font color="#800000">&gt;&gt;= Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 143px;" class="auto-style2">
				<font color="#800000">&lt;&gt; Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141px;" class="auto-style2">
				&nbsp;</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 152px;" x:str="'+ Operator" class="auto-style2">
				<font color="#800000">+ Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 143px;" class="auto-style2">
				<font color="#800000">AND Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141px;" class="auto-style2">
				&nbsp;</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 152px;" x:str="'- Operator" class="auto-style2">
				<font color="#800000">- Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 143px;" class="auto-style2">
				<font color="#800000">OR Operator</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141px;" class="auto-style2">
				&nbsp;</td>
			</tr>
		</table>
		<p><br>
		<span class="auto-style17">Executable 
		Statements</span></p>
		<table x:str border="0" cellpadding="0" cellspacing="0" style="border-collapse:
 collapse;width:454pt" id="table8">
			<colgroup>
				<col>
				<col>
				<col width="140" style="width: 105pt">
			</colgroup>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; width: 149pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				<font color="#800000">If..Then..Else</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; width: 141pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				<font color="#800000">IIF</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; width: 144pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				<font color="#800000">GoSub</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 149pt;" class="auto-style2">
				<font color="#800000">For...Next</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141pt;" class="auto-style2">
				<font color="#800000">Choose</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 144pt;" class="auto-style2">
				<font color="#800000">On&#8230;GoSub</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 149pt;" class="auto-style2">
				<font color="#800000">For Each ... Next</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141pt;" class="auto-style2">
				<font color="#800000">With&#8230;End With</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 144pt;" class="auto-style2">
				<font color="#800000">On&#8230;GoTo</font></td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 149pt;" class="auto-style2">
				<font color="#800000">While...Wend</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141pt;" class="auto-style2">
				<font color="#800000">Stop</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 144pt;" class="auto-style2">
				&nbsp;</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 149pt;" class="auto-style2">
				<font color="#800000">Select Case - End Select</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141pt;" class="auto-style2">
				<font color="#800000">Watch</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 144pt;" class="auto-style2">
				&nbsp;</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 149pt;" class="auto-style2">
				<font color="#800000">Do...Loop</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 141pt;" class="auto-style2">
				<font color="#800000">GoTo</font></td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 144pt;" class="auto-style2">
				&nbsp;</td>
			</tr>
		</table>
		<p>&nbsp;</p>
		<p><b><span style="font-family: Arial; color: blue"><font size="5">
		Declaration Statements</font></span></b></p>
		<p><span class="auto-style2">Before you can 
		use a variable, you must first declare it. When you declare a variable, 
		you are:<br>
		?</span><span style="font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">
		instructing your computer which parts of your program have permission to 
		store and retrieve data in a variable<br>
		?</span><span style="font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">
		telling your computer the name of your variable<br>
		?</span><span style="font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">
		defining the data type that your variable can hold</span></p>
		<p style="margin-bottom:3.0pt">
		<span class="auto-style2">You use declaration 
		statements to name and define procedures, variables, properties, arrays, 
		constants, and also define its data type, access level, and scope. When 
		the code that contains your declaration statement runs, Visual Basic 
		reserves the memory required for the declared variable. If the variable 
		holds a value, Visual Basic initializes it to the default value for its 
		data type. &nbsp;In VB.Net as the following example shows, you can assign an 
		initial value to a variable as part of its declaration as compared to VB 
		6 which you have to assign a value to the variable on a second line. 
		Note that the initial value 256 you specify in a declaration statement 
		is not assigned to a variable until execution reaches its declaration 
		statement. Until that time, the variable contains the default</span></font><span class="auto-style2"> 
		value for its data type.</span></p>

<font face="">
		<p style="margin-bottom:3.0pt">
		<span style="color: #339966" class="auto-style2">' In 
		VB 6,&nbsp; declaration creates variable Lng and assign value to it in 
		the assignment statement<br>
		</span>
		<span style="color:maroon" class="auto-style2">
		Dim Lng As Long <br>
		Lng = 256<br>
		<br>
		</span>
		<span style="color: #339966" class="auto-style2">' In 
		VB.NET, declaration creates variable Lng and assigns a value 256 to it 
		as part of its declaration<br>
		</span>
		<span style="color:maroon" class="auto-style2">
		Dim Lng As Long = 256</span><span style="font-size: 10.0pt; font-family: Courier New; color: #CC3300"><br>
		<br>
&nbsp;</span></p>
		</font>
		<p><b><span class="auto-style28">Option 
		Explicit</span><font face=""><span class="auto-style27"> statement</span></font></b><font face=""><span style="font-size: 10.0pt; font-family: Arial"><br>
		</span>
		<span style="font-size: 10.0pt; font-family: Arial; color: windowtext">
		<br>
		</span>
		</font>
		<span style="color: windowtext" class="auto-style2">
		Option Explicit is used at
		<span style="color: windowtext; text-decoration: none">module-level</span> 
		to force explicit declaration of all
		<span style="color: windowtext; text-decoration: none">variables</span> 
		in that <span style="color: windowtext; text-decoration: none">module</span>. 
		In another word, this compiler option tells the compiler that you have 
		to declare each variable in your before you can use it in an assignment 
		statement. Option Explicit is usually the preferred practice and helps 
		prevent runtime errors.<br>
		<br>
		<b>Option Explicit</b> statement must appear in a module before 
		any <span style="color: windowtext; text-decoration: none">procedures</span>. 
		When Option Explicit appears in a module, you must explicitly declare 
		all variables using the <b>Dim</b>, <b>Private</b>, <b>Public</b>, <b>
		ReDim</b>, or <b>Static</b> statements. If you attempt to use an 
		undeclared variable name, an error occurs at
		<span style="color: windowtext; text-decoration: none">compile time</span>. 
		If you don't use the Option Explicit statement, all undeclared variables 
		are of <b>Variant</b> type which means VBA would have to spend more time 
		checking the data type of the variable each time it encounters it, and 
		your code will execute longer. Worse still, you risk unintentionally 
		storing the wrong data type in the variable. The example below declares 
		&#8216;var1&#8217; as integer type.<br>
		<br>
		</span>

<font face="">
		<span style="color:maroon" class="auto-style2">
		Option Explicit&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
		<span style="color: #339966" class="auto-style2">' 
		forcing explicit variable declaration</span><span style="color: windowtext" class="auto-style2"><br>
		</span>
		<span style="color:maroon" class="auto-style2">
		Dim var1 As Integer&nbsp;&nbsp;&nbsp;&nbsp; </span>
		<span style="color: #339966" class="auto-style2">' 
		declare variable &#8216;var1&#8217; as Integer data type</span><span style="color: #CC3300" class="auto-style2"><br>
		</span>
		<span style="color:maroon" class="auto-style2">
		int1 = 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span>
		<span style="color: #339966" class="auto-style2">' 
		undeclared variable &#8216;int1&#8217; generates run-time error</span><span style="color: #CC3300" class="auto-style2"><br>
		</span>
		<span style="color:maroon" class="auto-style2">
		var1 = 20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span>
		<span style="color: #339966" class="auto-style2">' 
		declared variable &#8216;var1&#8217; won&#8217;t generate compile error</span></p>
		<p><span class="auto-style2">Let&#8217;s refresh on 
		the <i>scope</i> of declaration. Note that a variable declared as <b>
		Public</b> is visible to all procedures in all modules in a directly 
		referencing project unless Option Private Module is in effect. When <b>
		Option Private Module</b> is in effect, the module itself is private and 
		therefore not visible to referencing projects. Variables declared in a 
		Option Private Module procedure are accessible only within the procedure 
		and lose their value between calls unless they are declared <b>Static</b>. 
		Variables declared with the Static statement retain their values as long 
		as the code is running until the module is reset or restarted.<br>
		</span>

<font face="">
		<span style="font-size: 10.0pt; font-family: Arial">&nbsp;</span></p>
		<p><b><span style="font-family:Arial"><br class="auto-style26">
		</span></b>
		</font></font><b><span class="auto-style28">Option Private Module</span><font face=""><span class="auto-style20"><span style="font-family:Arial" class="auto-style22"> statement</span></span><i><span style="font-size:11.0pt;font-family:Arial"><br>
		</span></i></font></b>

<font face="">
		<span style="color: windowtext" class="auto-style2">
		This option marks the code in the module as private so that it can&#8217;t be 
		seen by users in the macros dialog box. It also prevents the module's 
		contents (that is, variables and objects) from referenced by external 
		projects. Subroutines in private module won&#8217;t appear in Excel when you 
		choose Tools&gt;Macro&gt;Macros. They will still be available to other modules 
		within the same project provided the procedures in the option private 
		module are not individually declared as Private. Option Private is only 
		necessary when working with host applications that allow variables and 
		objects to be referenced across multiple projects. <br>
		<br>
		</span>
		<span style="color:maroon" class="auto-style2">
		Option Explicit<br>
		Option Private Module</span></font><span style="color:maroon" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span>

<font face="">
		<span style="color: #339966" class="auto-style2">' 
		indicates that the module is private<br>
		<br>
		</span>
		<span style="color: windowtext" class="auto-style2">
		You need to use <b>Option Private Module</b> as the first line in the 
		module (above and outside of any variable declaration or procedure). 
		This option makes everything in the module accessible only from within 
		the project. The project variables that should not be accessible to 
		other projects should be declared in a module that has the Option 
		Private Module directive. Variables that should be accessible to other 
		project should be declared in a different module that does not use the 
		Option Private Module directive. In both cases, you need to declare 
		using the <b>Public</b> keyword.</span></p>
		<p>&nbsp;</p>
		</font>
		<p><b><span style="color: black" class="auto-style28">
		Option Compare</span><font face=""><span style="color: black" class="auto-style27"> Statement</span><span style="font-size: 12.0pt; font-family: Arial; color: black"><i><br>
		</i></span></font></b>

<font face="">
		<span class="auto-style20"><font size="2" class="auto-style19">Declares 
		the default comparison method to use when comparing string data. <b>
		Option Compare</b> statement specifies the string comparison method 
		(Binary or Text) for a class, module or structure. If an Option Compare 
		statement is not included, the default text comparison method is Binary.</font></span></p>
		<p style="font-size: 10.0pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt">
		<span style="color:#339966" class="auto-style2">' Set the string 
		comparison method to Binary (ie. case-sensitive). For example, &quot;ABC&#8221; is 
		less than &quot;abc&quot;</span><span style="color:maroon" class="auto-style19"><br class="auto-style20">
		</span><span style="color:maroon" class="auto-style2">Option Compare Binary</span></p>
		<p><span style="color: #339966" class="auto-style2">' 
		Set the string comparison method to Text (ie. case-insensitive). For 
		example,&nbsp; &quot;ABC&quot; is equal to &quot;abc&quot;<br>
		</span>
		<span style="color: maroon" class="auto-style2">
		Option Compare Text<br>
		<br>
		</span><span class="auto-style2">When you have 
		the Option Compare Binary statement (case-sensitive) at the top of your 
		module, there may be some times you want to override this and do a text 
		case-insensitive Text comparison. Below is a simple re-usable function 
		allowing you to do this so that you don't have to hard-code it every 
		time. <b>StrComp</b> is given a return value of &#8216;0&#8217; and performs a 
		textual comparison so that String1 is now equal to String2.</span></p>
		<p>
		<span style="color:maroon" class="auto-style2">
		Option Explicit<br>
		Option Compare Binary<br>
		<br>
		Public Function BinaryToTextOptionCompare (String1 As String, String2 As 
		String) As Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BinaryToTextOptionCompare = (StrComp(String1, 
		String2, vbTextCompare) = 0)<br>
		End Function<br>
		<br>
		</span><span class="auto-style2">The StrComp 
		function has the following return values:</span></p>
		<table x:str border="0" cellpadding="0" cellspacing="0" style="border-collapse:
 collapse;width:270pt" id="table9">
			<colgroup>
				<col width="207" style="width: 155pt">
				<col width="116" style="width: 87pt">
			</colgroup>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; width: 142pt; text-decoration: underline; text-underline-style: single; color: windowtext; font-weight: 400; font-style: normal; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style33">
				Condition if</td>
				<td width="116" style="border-style: none; border-color: inherit; border-width: medium; width: 87pt; text-decoration: underline; text-underline-style: single; color: windowtext; font-weight: 400; font-style: normal; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style33">
				&nbsp;StrComp returns:</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 142pt;" class="auto-style2">
				string1 is less than string2</td>
				<td x:num style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style33">
				-1</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 142pt;" class="auto-style2">
				string1 is equal to string2</td>
				<td x:num style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style33">
				0</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 142pt;" class="auto-style2">
				string1 is greater than string2</td>
				<td x:num style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style33">
				1</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px; width: 142pt;" class="auto-style2">
				string1 or string2 is Null</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style33">
				Null</td>
			</tr>
		</table>

<font face="">
		<p><span style="font-size: 10.0pt; font-family: Arial"><br>
		<br>
		</span>
		</font>
		
		</font><b><i><span style="color:black" class="auto-style27">Option Base 
		Statement</span><font face=""><span style="font-family:Arial;color:black"><br>
		</span>
		</font>
		
		</i></b>

<font face="">
		<span class="auto-style2">The
		</span>
		<span style="color:maroon" class="auto-style2">
		syntax Option Base {0|1}</span><span class="auto-style2"> 
		specifies the first index number of an array. Because the default base 
		is <b>0</b>, the Option Base statement is never required. Option Base 
		can appear only once in a module and must precede array
		<span style="color: windowtext; text-decoration: none">declarations</span> 
		that include dimensions.<br>
		<br>
		This example uses the Option Base statement to override the default base 
		array subscript value of <b>0</b>. The <b>LBound</b> function returns 
		the smallest available subscript for the indicated dimension of an 
		array. The Option Base statement is used at the module level only.<br>
		</span>
		<span style="color:maroon" class="auto-style2">
		Option Explicit<br>
		Option Base 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span>
		<span style="color: #339966" class="auto-style2">&#8216; 
		set default array subscripts to 1<br>
		<br>
		</span>
		<span style="color:maroon" class="auto-style2">
		Public Sub OptionBaseExample()<br>
		Dim Lower As Long<br>
		Dim FirstArray(10), SecondArray(2, 4) </span>
		<span style="color: #339966" class="auto-style2">' 
		declare array variables<br>
		</span>
		<span style="color:maroon" class="auto-style2">
		Dim ThirdArray(0 To 10)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span>
		<span style="color: #339966" class="auto-style2">' 
		override default base subscript<br>
		<br>
		' You can use LBound function to test lower bounds of the 3 arrays<br>
		</span>
		<span style="color: maroon" class="auto-style2">
		Lower = LBound(FirstArray)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
		<span style="color: #339966" class="auto-style2">&#8216; 
		returns 1<br>
		</span>
		<span style="color: maroon" class="auto-style2">
		Lower = LBound(SecondArray, 2)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #339966" class="auto-style2">&#8216; 
		returns 1<br>
		</span>
		<span style="color: maroon" class="auto-style2">
		Lower = LBound(ThirdArray)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span>
		<span style="color: #339966" class="auto-style2">&#8216; 
		returns 0<br>
		</span>
		<span style="color: maroon" class="auto-style2">
		End Sub</span></p>
		
		<p style='margin-left:6.5in' class="auto-style2">		
		<a href="#TOP" style="color: blue; text-decoration: underline; text-underline: single">
		Return To Top</a></p>

		<p class="MsoNormal">
<b><i><span style="font-size: 14.0pt; font-family: Arial; color: black">
Sub Statement</span></i></b><span style="font-size: 10.0pt; font-family: Arial"><br>
</span><span class="auto-style20"><span class="auto-style19">Declares the name, 
arguments, and code of a Sub procedure. The general syntax of a subroutine is:</span><br class="auto-style19">
<br class="auto-style19">
</span>
<span style="color: maroon; " class="auto-style2">
[{Public|Private|Protected|Friend|Protected&nbsp;Friend}] [Static] Sub name [(arglist)]<br>
&nbsp;&nbsp; [statements]<br>
&nbsp;&nbsp; [Exit Sub]<br>
&nbsp;&nbsp; [statements]<br>
End Sub</span></p>
<b><span class="auto-style2">Public<br>
	  </span></b><span class="auto-style2">Optional. 
Procedures declared with the Public keyword have public access. This means that 
variables declared as Public are accessible to all other procedures in all 
modules in a directly referencing project unless Option Private Module is in 
effect. <br>
<br>
</span><b><span class="auto-style2">
Private<br>
	  </span></b><span class="auto-style2">Optional. 
Procedures declared with the Private keyword have private access. . This means 
that variables declared as Private are accessible only to other procedures in 
the module where it is declared.</span><p class="MsoNormal">
<span class="auto-style16">Protected</span></font><br class="auto-style16">

<font face="">
	  <span class="auto-style2">Optional. Procedures 
declared with the Protected keyword indicates they are accessible only from 
within their own class or from a derived class. Protected access can be 
specified only on members of classes. It is not a superset of friend access.<br>
<br>
</span><span class="auto-style16">
Friend<br>
</span><span class="auto-style2">Optional and used 
only in a
<span style="color: windowtext; text-decoration: none">class module</span></a>. 
Procedure declared with the Friend keyword indicates that the Sub procedure is 
visible throughout the
<span style="color: windowtext; text-decoration: none">project</span></a>, but 
not visible to a controller of an instance of an object. This means they are 
only accessible from within their declaration context and from anywhere else in 
the same program.<br>
<br>
</span><span class="auto-style16">
Protected Friend<br>
</span><span class="auto-style2">Optional. 
Procedures declared with the Protected Friend keywords have the union of 
protected and friend access. They
can be used by code in the same program, as well as by code in derived classes. 
Protected friend access can be<br>
specified only on members of classes.<br>
<br>
</span><span class="auto-style16">
Static<br>
</span><span class="auto-style2">Used at
<span style="color: windowtext; text-decoration: none">procedure level</span></a> 
to declare
<span style="color: windowtext; text-decoration: none">variables</span></a> and 
allocate storage space. Static keyword indicates that the procedure's local 
variables are preserved between calls to the Sub. This means variables declared 
with the Static statement retain their values as long as the code is running 
until the module is reset or restarted.</span></p>
<p class="MsoNormal">
<span class="auto-style16">name<br>
</span><span class="auto-style2">Required. Name of 
the Sub procedure, and must follow standard
<span style="color: windowtext; text-decoration: none">variable</span></a> 
naming conventions.</span></p>
	  <span class="auto-style16">arglist<br>
</span><span class="auto-style2">Optional. List of 
variables or expressions representing arguments that are passed to the Sub 
procedure when it is called.
Multiple arguments are separated by commas. If you supply an argument list, you 
must enclose it in parentheses.<br>
<br>
The example procedure below defines the sub name as &#8216;ChangeFont&#8217; and takes three 
arguments: Addr As String, mActual As Single, mTarget As Single. Note that the 
calling sub calls this procedure by supplying its arguments in the correct 
position, each delimited by a comma - ChangeFont(Addr, mActual, mTarget). These 
3 arguments passed to the called sub are: address of the cells, monthly value in 
the cell, and monthly target for the cell. The calling sub passes to ChangeFont 
sub a target value of 13000000, and if a cell value is greater than this target 
value, it formats the cell appropriately. The calling sub loops through all of 
the cells in the named Range called &#8216;MyRange&#8217; with two nested For..Next Loops.</span><p class="MsoNormal">
<span style="color:maroon" class="auto-style2">Option Explicit<br>
<br>
Private Static Sub ChangeFont(Addr As String, mActual As Single, mTarget As 
Single)<br>
&nbsp;&nbsp;&nbsp; With ActiveSheet.Range(Addr)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If mActual &gt; mTarget Then&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color: #339966" class="auto-style2">' if 
argument is &gt; mTarget value of $13000000</span><span style="color: #CC3300" class="auto-style19"><br class="auto-style20">
	  </span>

<font face="">
	  <span style="color: #CC3300" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color:maroon" class="auto-style2">.Font.ColorIndex = 3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style="color: #339966" class="auto-style2">&#8216; 
format cells with Red font</span><span style="color: #CC3300" class="auto-style19"><br class="auto-style20">
	  </span>
	  <span style="color: #CC3300" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color:maroon" class="auto-style2">.Interior.ColorIndex = 6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style="color: #339966" class="auto-style2">&#8216; 
fill cells with Yellow</span><span style="color: #CC3300" class="auto-style19"><br class="auto-style20">
	  </span>
	  <span style="color: #CC3300" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color:maroon" class="auto-style2">.Font.Bold = True&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style="color: #339966" class="auto-style2">&#8216; 
bold cells</span><span style="color: #CC3300" class="auto-style19"><br class="auto-style20">
	  </span>
	  <span style="color: #CC3300" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color:maroon" class="auto-style2">
Else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color: #339966" class="auto-style2">&#8216; do nothing</span><span style="color: #CC3300" class="auto-style19"><br class="auto-style20">
	  </span>
	  <span style="color: #CC3300" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color:maroon" class="auto-style2">End If</span><span style="color: #CC3300" class="auto-style19"><br class="auto-style20">
	  </span>
	  <span style="color: #CC3300" class="auto-style2">&nbsp;&nbsp;&nbsp; </span>
<span style="color:maroon" class="auto-style2">End With</span><span style="color:maroon" class="auto-style19"><br class="auto-style20">
	  </span>
	  <span style="color:maroon" class="auto-style2">End Sub<br>
<br>
<br>
Sub FormatValue()<br>
Dim NColumns As Integer, NRows As Integer, i As Integer, j As Integer, _<br>
mTarget As Single, Addr As String, mActual As Single&nbsp;&nbsp;&nbsp;&nbsp; </span>

<span style="color: #339966" class="auto-style2">' declare 
local variables</span><span style="color: #CC3300" class="auto-style2"><br>
</span>
<span style="color:maroon" class="auto-style2">NColumns = 
Range(&quot;MyRange&quot;).Columns.Count&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style="color: #339966" class="auto-style2">
&#8216;count number of columns</span><span style="color: #CC3300" class="auto-style2"><br>
</span>
<span style="color:maroon" class="auto-style2">NRows = 
Range(&quot;MyRange&quot;).Rows.Count&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style="color: #339966" class="auto-style2">&#8216; 
count number of rows</span><span style="color: #CC3300" class="auto-style2"><br>
</span>
<span style="color:maroon" class="auto-style2">mTarget = 13000000</span><span style="color:maroon" class="auto-style19"><br class="auto-style20">
	  </span>
	  <span style="color:maroon" class="auto-style2">&nbsp; For j = 1 To NColumns<br>
&nbsp;&nbsp;&nbsp; For i = 1 To NRows<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;Addr = Range(&quot;MyRange&quot;).Cells(i, j).Address </span>
<span style="color: #339966" class="auto-style2">&#8216; address of 
the cell</span><span style="color: #CC3300" class="auto-style19"><br class="auto-style20">
	  </span>
	  <span style="color: #CC3300" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color:maroon" class="auto-style2">mActual = 
Range(&quot;MyRange&quot;).Cells(i, j)&nbsp;&nbsp;&nbsp; </span>
<span style="color: #CC3300" class="auto-style2">&nbsp;
</span><span style="color: #339966" class="auto-style2">&#8216; 
values of the cells in named Range</span><span style="color: #CC3300" class="auto-style19"><br class="auto-style20">
	  </span>
	  <span style="color: #CC3300" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color:maroon" class="auto-style2">Call ChangeFont(Addr, mActual, 
mTarget)&nbsp;&nbsp; </span>
<span style="color: #CC3300" class="auto-style2">&nbsp;
</span><span style="color: #339966" class="auto-style2">&#8216; 
pass arguments to ChangeFont sub</span><span style="color: #CC3300" class="auto-style19"><br class="auto-style20">
	  </span><span style="color: #CC3300" class="auto-style2">&nbsp;&nbsp; &nbsp;</span><span style="color:maroon" class="auto-style2">Next</span><span style="color:maroon" class="auto-style19"><br class="auto-style20">
	  </span><span style="color:maroon" class="auto-style2">&nbsp;&nbsp;Next</span><span style="color: maroon" class="auto-style19"><br class="auto-style20">
	  </span><span style="color: maroon" class="auto-style2">End Sub</span></p>
		<p class="MsoNormal"><span style="font-size:10.0pt;font-family:Arial">
		<img border="0" src="Images/arglist_result.gif" width="345" height="96"></span></p>
		<p class="MsoNormal">&nbsp;</p>

<p><b><span style="font-family:
Arial" class="auto-style29">Optional</span><span style="font-family:Arial" class="auto-style22"> list of arguments</span><br>
</b><span class="auto-style2">The optional list of 
arguments (arglist) defines the arguments that will be passed to the procedure. 
The arguments have the following syntax:<br>
<br>
</span>
<span style="color:maroon" class="auto-style2">
[Optional] [ByVal|ByRef] [ParamArray] varname[()] [As&nbsp;type] [=defaultvalue]</span></p>
<p class="auto-style34">
Optional 
arguments are preceded by the <b>Optional</b>
<span style="color: black; text-decoration: none">keyword</span></a> in the 
procedure definition. You can also specify a default value for the optional 
argument in the procedure definition. For example:</p>
<p class="auto-style35">
Private Sub MyOptionalArgs(ByRef EmpID As Long, Optional mNote As String, _<br>
&nbsp; Optional mCity As String = &quot;Singapore&quot;) As String<br>
. . . <br>
End Sub</p>
<span class="auto-style2">The <b>Optional</b> keyword 
is optional, and can be used to specify that the argument is not required. If 
used, every argument following the first Optional argument must also be an 
optional argument. All arguments can be Optional, but they can not be entered in 
mixed order. By using Optional keyword as in the above example, you tell the 
procedure that you don&#8217;t have to insert the MyNote variable for the called sub 
to actually perform an operation. You can leave it to the user to provide 
specific additional elements such as input box, for your statement to execute. 
Optional can't be used for any argument if <b>ParamArray</b> is used. <b>ByVal</b> 
and <b>ByRef</b> determine whether the argument should be passed by value or by 
reference (the default), and the <b>ParamArray</b> keyword is optional, used 
only as the last argument in arglist to indicate that the final argument is an 
optional array of elements of the specified type. The <b>ParamArray</b> keyword 
allows you to pass an arbitrary number of arguments to the procedure. A <b>
ParamArray</b> argument is always passed using <b>ByVal</b>. The variable<br>
name v<b>arname</b> is required, which represents the argument being passed to 
the procedure. Parenthesis () is required for array variables, which indicates 
that <b>varname</b> is an array. <b>Type</b>, which is Data type of the 
argument, is optional - <b>Byte</b>, <b>Boolean</b>, <b>Char</b>, <b>Short</b>,
<b>Integer</b>, <b>Long</b>, <b>Single</b>, <b>Double</b>, <b>Decimal</b>, <b>
String</b> (variable length only), <b>Object</b>, a user-defined type, or an 
object type. The above procedure will return a value MyOptionalArgs As String as 
long you enter an accepted value for the EmpID argument.<br>
<br>
As you have seen, a benefit of using the Optional keyword is the use of default 
values. Providing specific default values for optional arguments in the 
definition part of some statements can save us on defining <b>constants</b>. 
Declaring constants in VB is not much different from variables, except that <b>
constants</b> are declared in the Declaration section of a form code or module 
prior to any statements, whereas variables are declared inside Statements. 
Constants can not change values in the application. You can define the <b>
constants</b> as shown below alternatively as the default values to be used in a 
sub procedure.</span><p class="MsoNormal">
<span style="color:maroon" class="auto-style2">
Const mNote As String&nbsp; = &quot;ptan91128&quot;<br>
Const mCity As String = &quot;Singapore&quot;<br>
<br>
Sub MyOptionalArgs(ByRef EmpID As Long, Optional mNote As String = &#8220;ptan91128&#8221; _</span></font></font><span style="color:maroon" class="auto-style19"><br class="auto-style20">
	  </span>

<font face="">
	  <span style="color:maroon" class="auto-style2">&nbsp; Optional mCity As String = &quot;Singapore&quot;) As String</span></p>
<p class="auto-style36">
The <b>ParamArray</b> keyword 
is used in these contexts:
<span style="color: windowtext; text-decoration: none">Declare Statement</span></a>,
<span style="color: windowtext; text-decoration: none">Function Statement</span></a>, 
and Sub statement. Unlike VB6, in VB.NET the <b>ParamArray</b> keyword defines a 
true array object, which you can process using any of the methods of the array 
class, and <b>ParamArray</b> keyword also let you define arrays of any type, not 
just objects. Each argument to a <b>ParamArray</b> parameter can be of a 
different data type. That means the <b>ParamArray</b> parameter itself must be 
declared as an array of type Variant. Each argument supplied in the call to the 
function becomes a corresponding element of the Variant array. Snippet code 
below adopted from
<span style="color: windowtext; text-decoration: none">ADezii</span></a>, shows 
that several calls are made to the AverageNum() function, each with a varying 
number of arguments, including invalid arguments. You can see the output through 
the Immediate Window.</p>
<p class="MsoNormal" style="line-height: 12.0pt">
<span style="color:maroon" class="auto-style2">
Public Function AverageNum(ParamArray varNumbers() As Variant)<br>
Dim varX, varY, intAverageNum As Integer<br>
intAverageNum = 0<br>
&nbsp; For Each varX In varNumbers<br>
&nbsp;&nbsp;&nbsp; If IsNumeric(varX) And Not IsNull(varNumbers) Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; varY = varY + varX<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intAverageNum = intAverageNum + 1<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AverageNum = varY / intAverageNum<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else<br>
&nbsp;&nbsp;&nbsp; End If<br>
&nbsp; Next<br>
End Function</span><span class="auto-style2"><br>
<br>
&#8216; you can see result from 
these sample calls in the Immediate Window:</span><span style="color:maroon" class="auto-style19"><br class="auto-style20">
</span>

<font face="">
<span style="color:maroon" class="auto-style2">Debug.Print AverageNum(10, 30, 20)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color: #339966" class="auto-style2">' returns 
average number 20</span><span style="color:maroon" class="auto-style19"><br class="auto-style20">
</span>
<span style="color:maroon" class="auto-style2">Debug.Print AverageNum(23.15, 45.105, 456.56) &nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color: #339966" class="auto-style2">' returns 
174.938333333333</span><span style="color: maroon" class="auto-style19"><br class="auto-style20">
</span>
<span style="color: maroon" class="auto-style2">Debug.Print AverageNum(Null, &quot;AB&quot;, &quot;A12&quot;, 20, 30)&nbsp; </span>
<span style="color: #339966" class="auto-style2">' returns 25</span></p>
		
		<p style='margin-left:6.5in' class="auto-style2">		
		<a href="#TOP" style="color: blue; text-decoration: underline; text-underline: single">
		Return To Top</a></p>

		<p class="MsoNormal" style="line-height: 12.0pt"><b>
		<span style="font-family: Arial"><br class="auto-style22">
		<span class="auto-style22">More notes on <i>Dim, ReDim</i> and </span>
		<span class="auto-style29">Static</span><br>
</span></b><span style="font-size:10.0pt;font-family:Arial"><br>
		</span>
		</font></font><span class="auto-style2">Dim statement 
creates a space in memory for a variable. </span>

<font face="">
<span class="auto-style2">Variables declared with <b>
Dim</b> at the
<span style="color: windowtext; text-decoration: none">procedure level</span></a> 
are available only within the procedure. That means the variables remain in existence only as 
long as the procedure is executing. When it stops running, 
the values are not preserved and the memory is released. 
You can also use the <b>Dim</b> statement with empty parentheses to declare a 
dynamic array. After declaring a dynamic array, use the <b>ReDim</b> statement 
within a procedure to define the number of dimensions and elements in the array. 
If you try to re-declare a dimension for an array variable whose size was 
explicitly specified in a <b>Dim</b> statement, an error occurs. <b>ReDim</b> 
statement resizes the array and erases the elements. <b>ReDim</b> Preserve 
statement resizes the array but does not erase elements.<br>
<br>
In the statement examples below, the line 1 <b>Dim</b> statement declares two 
variables as integer type. The <b>Static</b> statement and the <b>Static</b> 
keyword are similar, but they are used for different effects. The line 2 
declares a procedure using the <b>Static</b> keyword as in Static Sub ChangeFont 
(), and then storage space for all local variables within that procedure is 
allocated once, and the value of the variables is preserved for as long as the 
program is running. For non-static procedures, storage space for variables is 
allocated each time the procedure is called and released when the procedure 
stops running. The <b>Static</b> statement is used to declare specific variables 
within non-static procedures to preserve their value for as long as the program 
is running. When you use <b>Static</b> statements within a procedure, put them 
at the beginning of the procedure with other declarative statements such as Dim. 
In line 3 the <b>Static</b> statement declares a variable X for a new instance 
of a worksheet. If the <b>New</b> keyword isn't used when declaring an object 
variable, the variable that refers to the object must be assigned an existing 
object using the <b>Set</b> statement before it can be used. Until it is 
assigned an object, the declared object variable has the special value <b>
Nothing</b>, which indicates that it doesn't refer to any particular instance of 
an object. When you use the <b>New </b>keyword in the
<span style="color: windowtext; text-decoration: none">declaration</span></a>, 
an instance of the object is created on the first reference to the object. Line 
4 statement declares a Variant array. Line 5 declares the named array &#8216;MyVar&#8217; 
and assigns to it an integer data type. Line 6 </span>
<span class="auto-style16">Dim</span><span class="auto-style2"> MyVar(5) creates an array with 6 elements (0-5), so there are altogether 
six A variables. Line 7 declares an array with 6 
elements and assigns the Date data type. Line 9 statement declares a 
2-dimensional, 5-by-10 array and assign to it Single data type. You can declare 
arrays with up to 60 dimensions</span>.<span class="auto-style2"> 
Line 10 <b>ReDim</b> MyVar(10) makes it an 11-element array but loses all the 
data in it. <b>ReDim Preserve</b> MyVar(15) in line 11 creates a 16-element 
array but keeps all existing data. In array, all subscripts start at 0 by 
default, unless you specify as <b>Option Base 1</b> at the beginning of the 
module before you declare the array. See statement examples below.</span></p>
<pre style="font-size: 10.0pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt"><span style="color:maroon" class="auto-style2">Dim NColumns As Integer, NRows As Integer&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #339966" class="auto-style2">' declare two variables as integer</span><span style="color:maroon" class="auto-style19">
</span><span style="color:maroon" class="auto-style2">Static Sub ChangeFont(Addr As String, mActual As Single, mTarget As Single)
Static X As New Worksheet&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #339966" class="auto-style2">&#8216; declare a variable for a new instance of a worksheet</span><span style="color:maroon">
</span><span style="color:maroon" class="auto-style2">Dim MyVar()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; </span><span style="color: #339966" class="auto-style2">' declare a dynamic Variant array
</span><span style="color:maroon" class="auto-style2">Dim MyVar() As Integer &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color: #339966" class="auto-style2">' declare MyVar array and assign Integer data type</span><span style="color: maroon"><span class="auto-style19">
<span class="auto-style20">Dim MyVar(5)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><span class="auto-style19"><span style="color:#339966" class="auto-style20">' declare an array with 6 elements
</span><span class="auto-style20"><span style="color: maroon">Dim MyVar(5) </span><span style="color:maroon">As Date</span><span style="color: maroon">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span style="color:#339966" class="auto-style20">' declare an array with 6 elements and assign Date data type
&nbsp;&nbsp;  </span><span style="color: maroon" class="auto-style20">MyVar(3)= Format(&quot;12-24-2005&quot;, _&nbsp;&nbsp;&nbsp;</span><span style="color:#339966" class="auto-style20">  ' declare a 3-element array and assign a date to the 3 elements
</span><span style="color: maroon" class="auto-style20">&nbsp; &quot;General Date&quot;)</span><span style="color:#339966" class="auto-style20">
</span><span style="color: maroon" class="auto-style20">Dim MyVar(1 To 5, 1 To 10) As Single&nbsp; </span><span style="color:#339966" class="auto-style20">' declare a 5-by-10 multidimensional array and assign data type
</span><span style="color: maroon" class="auto-style20">ReDim MyVar(10)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color:#339966" class="auto-style20">&#8216; declare an 11-element array but loses all the data in it
</span><span style="color: maroon" class="auto-style20">ReDim Preserve MyVar(15)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  </span></span><span style="color:#339966" class="auto-style20"><span class="auto-style19">&#8216; declare an 16-element array but keeps all the data in it</span></span></pre>
<p class="MsoNormal"><span class="auto-style16">
Static</span><span class="auto-style2"> is used at
<span style="color: windowtext; text-decoration: none">procedure level</span></a> 
to declare
<span style="color: windowtext; text-decoration: none">variables</span></a> and 
allocate storage space. You should only declare with a <b>Static</b> statement 
within a procedure when you want to retain the value of the variables between 
procedure calls until the module is reset or restarted. In
<span style="color: windowtext; text-decoration: none">class modules</span></a>, 
variables declared with the <b>Static</b> statement retain their value in each 
class instance until that instance is destroyed. In
<span style="color: windowtext; text-decoration: none">form modules</span></a>, 
static variables retain their value until the form is closed. </span></p>
<span class="auto-style2">When variables are 
initialized, a numeric variable is initialized to 0, a variable-length string is 
initialized to a zero-length string (&quot;&quot;), and a fixed-length string is filled 
with zeros. Variant variables are initialized to
<span style="color: windowtext; text-decoration: none">Empty</span></a>. Each 
element of a user-defined type variable is initialized as if it were a separate 
variable.</span><p class="MsoNormal" style="line-height: 12.0pt">
<span style="font-size: 10.0pt; font-family: Arial; font-style: italic"><br>
</span><span style="font-family: Arial; " class="auto-style30">Arrays</span><span style="font-size:10.0pt;
font-family:Arial"><br>
	  </span></font><span class="auto-style2">You can resize an array with <b>Redim</b> without losing the 
data. For details, see the <b>Preserve</b> keyword in the Help file on <b>Redim</b>. 
If you use the <b>LBound</b>/<b>UBound</b> in your code instead of hard-coding 
the dimension of the array, you can later change the size of the array without 
touching your code.</span></p>

<font face="">
<ul type="disc" style="margin-bottom: 0in">
	<li class="MsoNormal">
	<span class="auto-style2">Option Base - Determines whether the lowest range of an 
	array is 0 or 1 </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">option base 1</li>
	</ul>
	</li>
	<li class="MsoNormal">
	<span class="auto-style2">Erase - Erases all values of an array </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">erase (arrayname)</li>
	</ul>
	</li>
	<li class="MsoNormal">
	<span class="auto-style2">Dim - Creates an array </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">dim arrayname(25)</li>
	</ul>
	</li>
	<li class="MsoNormal">
	<span class="auto-style2">Redim - Resets the bounds of an array (has option to 
	save values) </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">redim arrayname(28)</li>
	</ul>
	</li>
	<li class="MsoNormal">
	<span class="auto-style2">UBound - Returns the upper dimension of an array </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">i 
		= ubound (arrayname)</li>
	</ul>
	</li>
	<li class="MsoNormal">
	<span class="auto-style2">LBound - Returns the lower dimension of an array </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">i 
		= lbound (arrayname)</li>
	</ul>
	</li>
	<li class="MsoNormal">
	<span class="auto-style2">Filter - Returns a subset of an array based on a filter </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Filter (inputarray, searchstring)</li>
	</ul>
	</li>
	<li class="MsoNormal">
	<span class="auto-style2">Array - Yes, there is a function called array. It 
	returns an array that has been filled with data from a list. It allows you 
	to put the actual data values in the code to avoid having the user input it 
	or to avoid having to read it from a file </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">ArrayName = Array (10, 20, 30)</li>
	</ul>
	</li>
	<li class="auto-style2">
	Join - Concatenates strings within an array</li>
</ul>
<p><span style="font-size: 10.0pt; font-family: Arial"><br>
</span><b><i><span style="font-size:14.0pt;font-family:Arial;color:black">
Function Statement<br>
</span></i></b><span class="auto-style2">Declares the 
name, arguments, and code that define a Function procedure. The syntax is:</span></p>

<font size="2" class="auto-style2">
<p class="syn"><span style="color:maroon">[Public | Private | Friend] [Static] 
Function name [(arglist)] [As type]<br>
[statements]<br>
[Exit Function] <br>
[statements]<br>
End Function</span></p>
</font>

<p class="MsoNormal"><span class="auto-style37">
arglist</span><span class="auto-style2"> is 
optional. It is a list of variables representing arguments that are passed to 
the Function procedure when it is called. Multiple variables are separated by 
commas. Each argument in the <i>arglist</i> part has the following syntax and 
parts (you can refer to the Sub statement that was described in earlier pages, 
for explanation on the component elements of the Function statement syntax and
<i>arglist</i> argument syntax):</span></p>
<p class="syn"><span style="color:maroon">&nbsp;<span class="auto-style2">[Optional] 
[ByVal | ByRef] [ParamArray] varname[( )] [As type] [= defaultvalue]</span></span></p>


<span class="auto-style2">In some situations, you may 
not know ahead of time exactly how many arguments will be passed to a procedure 
(sub or function). If this is the case, then you would want to use the <b>
ParamArray</b> keyword to define a procedure. <b>ParamArray</b> keyword enables 
the function to accept a variable number of arguments. Note that only one 
argument in a procedure declaration can be marked with <b>ParamArray</b>, and it 
must be the last or the only argument in the list. In the following first 
example adopted from http://paradoxes.info, the function combines text with a 
delimiter, and using a <b>ParamArray</b> there is no limit to the amount of text 
you can combine at once. This example combines street, suburb and city with a 
comma in between them, and if the suburb is empty, then it will return Street, 
City.</span><p class="auto-style35">
	  Option 
Explicit<br>
Function CombineText(myDelimeter As String, ParamArray myText()) As String<br>
&nbsp;&nbsp; Dim v As Variant<br>
&nbsp;&nbsp; Dim s As String<br>
&nbsp;&nbsp; For Each v In myText<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Len(s) = 0 Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s = v<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ElseIf Len(v) &gt; 0 Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s = s &amp; myDelimeter &amp; v<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If<br>
&nbsp;&nbsp; Next<br>
&nbsp;&nbsp; CombineText = s<br>
End Function</p>
<p class="syn">
<span style="color: #339966" class="auto-style2">' You can 
invoke the above function as:<br>
</span>
<span style="color:maroon" class="auto-style2">
Dim Address As String<br>
Dim MyVar(4) As String<br>
MyVar(0) = &quot;AMSEA&quot;<br>
MyVar(1) = &quot;3 Business Park Vista&quot;<br>
MyVar(2) = &quot;S486051&quot;<br>
MyVar(3) = &quot;Singapore&quot;<br>
Address = CombineText(&quot;, &quot;, MyVar(0), MyVar(1) &amp; vbcrlf &amp; MyVar(2), MyVar(3))<br>
debug.print Address</span></p>
<p class="syn">
<span style="color: #339966" class="auto-style2">' Using the ParamArray array parameter, this second example returns the sum of any 
number of values passed to it:</span><span style="color: windowtext" class="auto-style2"><br>
</span>
<span style="color:maroon" class="auto-style2">
Function Sum(ParamArray myArgs() As Variant) As Single<br>
Dim total As Single<br>
Dim i As Integer<br>
For i = 0 To UBound(myArgs)<br>
&nbsp;&nbsp;&nbsp; total = total + myArgs(i)<br>
Next i<br>
Sum = total<br>
End Function</span></p>
<p class="syn">
<span style="color:maroon" class="auto-style2">Dim MyVar(4) As Single, x As Single<br>
MyVar(0) = &quot;5.5&quot;<br>
MyVar(1) = &quot;4.5&quot;<br>
MyVar(2) = &quot;5&quot;<br>
MyVar(3) = &quot;15&quot;<br>
x = Sum(MyVar(0), MyVar(1), MyVar(2), MyVar(3))<br>
<br>
</span><span style="color:black" class="auto-style2">Like a <b>
Sub</b> procedure, <b>Function</b> procedure is a separate procedure that can 
take arguments, perform a series of statements, and change the values of its 
arguments. </span><span class="auto-style2">For <b>
Function</b> procedures, the data type of the procedure determines the data type 
it returns. You can use an <b>As</b> clause following <i>arglist</i> to specify 
the return type of the function. Within <i>arglist</i>, you can use an <b>As</b> 
clause to specify the data type of any of the arguments passed to the procedure.
<span style="color:black">If you don&#8217;t explicitly specify using Public, Private, 
or Friend, <b>Function</b> procedures are <b>Public</b> by default. If <b>Static</b> 
isn't used, the value of local variables is not preserved between calls. The <b>
Friend</b> keyword can only be used in class modules. However, <b>Friend</b> 
procedures can be accessed by procedures in any module of a project. You can 
define a <b>Function</b> procedure inside a module, class, interface, or 
structure, but you can't define a <b>Function</b> procedure inside another <b>
Function</b>, or <b>Sub</b> procedure because all executable code must be in 
procedures.<br>
</span><br>
<span style="color:black">You call a <b>Function</b> procedure using the 
function name, followed by the argument list in parentheses. You can omit the 
parentheses only if you are not supplying any arguments. A function can also be 
called using the <b>Call</b> statement, in which case the return value is 
ignored. To return a value from a function, assign the value to the function 
name </span>or include it in a <b>Return</b> statement.<span style="color:black">.
</span>When the Function procedure returns to the calling program or your main 
procedure, execution continues with the statement following the statement that 
called it.<b> </b><span style="color:black">Any number of value assignment 
statements and </span><b>Exit Function</b> statements can<span style="color:black"> 
appear anywhere within the procedure. </span>The <b>Exit Function</b> statement 
will cause an immediate exit from a Function procedure. If you use <b>Exit 
Function</b> without assigning a value to the variable <i>name</i>, the variables will initialize, 
and the function returns 
the default value appropriate to the argument type<span style="color:black">: a 
numeric function returns 0 (for data type Byte, Char, Decimal, </span>Double, 
Integer, Long, Short, and Single)<span style="color:black">, a string function 
returns a zero-length string (<b>&quot;&quot;</b>), a Boolean function returns False, a 
Date function returns </span>#1/1/0001 12:00 AM#, <span style="color:black">and 
a Variant function returns
<span style="color: black; text-decoration: none">Empty</span></a>. A function 
that returns an object or array reference returns <b>Nothing</b> if no object or 
array reference is assigned to the variable <i>name</i> (using <b>Set</b> 
statement) within the Function. </span> </span>
	  </p>
<h4><span style="font-weight: normal" class="auto-style2">The 
following procedure example assigns the return value to the function name 
myFirstSheet and then uses the </span>
<span class="auto-style2">Exit Function</span><span style="font-weight: normal" class="auto-style2"> 
statement to return.</span></h4>
<pre style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2"><span style="color: maroon">Function myFirstSheet(i As String) As String</span></pre>
<pre style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style19"><span style="color: maroon" class="auto-style20">&nbsp; &#8216;do something&#8230;</span><span style="color: maroon">
<span class="auto-style20">&nbsp; myFirstSheet = &quot;template&quot;</span></span></pre>
<pre style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style19"><span style="color: maroon" class="auto-style20">&nbsp; &#8216;do something&#8230;</span><span style="color: maroon">
<span class="auto-style20">&nbsp; Exit Function</span></span></pre>
<pre style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2"><span style="color: maroon">End Function</span></pre>
<p class="MsoNormal">
<span style="color:black" class="auto-style2">Some c</span><span class="auto-style2">aution 
on <b>Function</b> statement:<br>
1) <b><span style="color:black">Function</span></b></span><span style="color:black" class="auto-style2"> 
procedures can be recursive; that is, they can call themselves to perform a 
given task. However, recursion can lead to stack overflow. The <b>Static</b> 
keyword usually isn't used with recursive <b>Function</b> procedures.<br>
<br>
2)&nbsp;A <b>Function</b> procedure can use a variable that is not explicitly 
declared in the procedure, but a naming conflict can occur if anything you 
defined </span><span class="auto-style2">at the
<span style="color: windowtext; text-decoration: none">module level</span></a> 
has the same name. If your procedure refers to an undeclared variable that has 
the same name as another procedure, constant, or variable, it is assumed that 
your procedure refers to that module-level name. Explicitly declare variables to<span style="color:black"> 
avoid this kind of conflict. Always use <b>Option Explicit</b> statement to 
force explicit declaration of variables.<br>&nbsp;</span></span></p>
<p class="MsoNormal"><b><span style="font-family:Arial" class="auto-style29">Set</span><span style="font-family:
Arial" class="auto-style22"> statement</span></b><span style="font-size:10.0pt;font-family:Arial;
color:black"><br>
</span><span class="auto-style2">Set statement assigns an 
object reference to a Variable or Property. The <b>Dim</b>, <b>Private</b>,
<b>Public</b>, <b>ReDim</b>, and <b>Static</b> statements only declare a 
variable that refers to an object. No actual object is referred to until you use 
the <b>Set</b> statement to assign a specific object.<br>
<br>
&#8217; Set statement assigns object references to variables<span style="color:#339966"><br>
</span> </span>
<span style="color:maroon" class="auto-style2">Dim objX, objY, MyStr</span></font></font><span style="color:maroon" class="auto-style19"><br class="auto-style20">
</span>

<font face="">
<span style="color:maroon" class="auto-style2">Set objY = objX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color: #339966" class="auto-style2">' assign 
object reference</span></p>
<p class="MsoNormal"><span class="auto-style2">' objX 
and objY now refer to the same object</span><span style="color:maroon" class="auto-style19"><br class="auto-style20">
</span>

<font face="">
<span style="color:maroon" class="auto-style2">objX.Text = &quot;wiliam&quot;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color: #339966" class="auto-style2">' initialize 
property</span><span style="color:maroon" class="auto-style19"><br class="auto-style20">
</span>
<span style="color:maroon" class="auto-style2">MyStr = objY.Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color: #339966" class="auto-style2">' returns 
&#8216;william&#8217;</span></p>
<p class="MsoNormal"><span class="auto-style2">' 
discontinues association, and now objX no longer refers to objY</span><span style="color:maroon" class="auto-style19"><br class="auto-style20">
</span>

<font face="">
<span style="color:maroon" class="auto-style2">Set objX = Nothing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color: #339966" class="auto-style2">' release 
the object</span></p>
<p class="MsoNormal"><span class="auto-style2">Generally, 
when you use <b>Set</b> to assign an object reference to a variable, no copy of 
the object is created for that variable. Instead, a reference to the object is 
created. More than one object variable can refer to the same object. Because 
such variables are references to the object rather than copies of the object, 
any change in the object is reflected in all variables that refer to it. 
However, when you use the <b>New</b> keyword in the <b>Set</b> statement, you 
are actually creating an instance of the object 
on the first reference to the object. If the <b>New</b> keyword isn't used when 
declaring an object variable, the variable that refers to the object must be 
assigned an existing object using the <b>Set</b> statement before it can be 
used. Until it is assigned an object, the declared object variable has the 
special value <b>Nothing</b>, which indicates that it doesn't refer to any 
particular instance of an object.<br>
<br>
Note:&nbsp;If you are using 
VB.NET and the external procedure was created on VB 6, you must make sure that 
the data types are matching. For example, if you declare a reference to a VB 6 
procedure with an <b>Integer</b> argument (two bytes in VB 6), you must identify 
that argument as <b>Short</b> in the <b>Declare</b> statement, because that is 
the two-byte integer type in Visual Basic .NET.</span><font face=""><span style="font-size:10.0pt;font-family:Arial"><br>
<br>
<br>
</span><b><span style="font-family:Arial" class="auto-style29">Return</span><span style="font-family:
Arial" class="auto-style22"> Statement</span></b><br>
<span class="auto-style2">It branches to and returns from 
a subroutine within a
<span style="color: windowtext; text-decoration: none">procedure</span></a>. You 
can use <b>GoSub</b> and <b>Return</b> statement anywhere in a procedure. A subroutine can contain 
more than one <b>Return</b> statement, but the first <b>Return</b> statement 
encountered causes the flow of execution to branch back to the
<span style="color: windowtext; text-decoration: none">statement</span></a> 
immediately following 
the most recently executed <b>GoSub</b> statement. Note that y<span style="color:black">ou 
can't<b> </b>enter or exit Sub procedures with the <b>GoSub...Return</b> 
statement.</span></span></p>
<p class="auto-style34">
The following 
example uses <b>GoSub</b> to call a subroutine within a <b>Sub</b> procedure. 
The <b>Return</b> statement causes the execution to resume at the statement 
immediately following the <b>GoSub</b> statement. The <b>Exit Sub</b> statement 
is used to prevent control from accidentally flowing into the subroutine.</p>
<p>
<span style="color:maroon" class="auto-style2">
Sub GoSubReturnTest()<br>
Dim i As Long, Total As Currency, itemCost As Currency<br>
itemCost = 3500<br>
i = InputBox(&quot;Enter your discount $amount&quot;)&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color: #339966" class="auto-style2">' solicit a 
value from user</span></font></font></font></font><span style="color:maroon" class="auto-style19"><br class="auto-style20">
</span>

<font face="">
<span style="color:maroon" class="auto-style2">&nbsp;&nbsp;&nbsp; If i &gt; 0 Then GoSub MyRoutine&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color: #339966" class="auto-style2">' use 
routine if user enters a positive number</span><span style="color:maroon" class="auto-style19"><br class="auto-style20">
</span>
<span style="color:maroon" class="auto-style2">&nbsp;&nbsp;&nbsp; Exit Sub&nbsp;&nbsp;&nbsp; ' Use Exit to prevent an error<br>
MyRoutine:<br>
&nbsp;&nbsp;&nbsp; Total = i + itemCost &nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color: #339966" class="auto-style2">' execute 
multiplication<br>
</span>
<span style="color:maroon" class="auto-style2">
&nbsp;&nbsp;&nbsp; Debug.Print &quot;Total is &quot; &amp; Format(Total, &quot;currency&quot;)<br>
&nbsp;&nbsp;&nbsp; Return&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="color: #339966" class="auto-style2">' returns 
control to statement</span><span style="color:maroon" class="auto-style19"><br class="auto-style20">
</span><span style="color:maroon" class="auto-style2">End Sub</span><span style="font-size:10.0pt;font-family:&quot;Courier New&quot;;
color:maroon"><br>
&nbsp;</span></p>
<h2>Deftype<span style="font-style: normal"> 
Statement</span><span style="font-size:11.0pt"><br>
</span><span class="auto-style20">
<span style="font-weight: normal; font-style: normal" class="auto-style19">
Deftype statements in VB 6 are not supported in VB.</span><span class="auto-style19">
</span>
<span style="font-weight: normal; font-style: normal" class="auto-style19">
Example 
below shows various uses of the Deftype statements to set default data types of 
variables and function procedures whose names start with specified characters. 
The default data type can be overridden only by explicit assignment using the
</span><span style="font-style: normal" class="auto-style19">Dim</span><span style="font-weight: normal; font-style: normal" class="auto-style19"> 
statement. Deftype statements can only be used at the module level.</span></span></h2>
<pre style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style19"><span style="color: maroon" class="auto-style20">DefInt A-K&nbsp;&nbsp;&nbsp;&nbsp;             </span><span style="color:#339966" class="auto-style20">' variable names beginning with A through K default to Integer</span></pre>
<pre style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style19"><span style="color: maroon" class="auto-style20">DefStr L-Z&nbsp;&nbsp;&nbsp;&nbsp;             </span><span style="color:#339966" class="auto-style20">' variable names beginning with L through Z default to String</span></pre>
<pre style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style19"><span style="color: maroon" class="auto-style20">iNum = 2&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;             </span><span style="color:#339966" class="auto-style20">' initialize Integer</span></pre>
<pre style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style19"><span style="color: maroon" class="auto-style20">strVar = &quot;Nice day&quot;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </span><span style="color:#339966" class="auto-style20">' initialize String</span></pre>
<pre style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style19"><span style="color: maroon" class="auto-style20">anyVar = &quot; Nice day &quot;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;</span><span style="color:#339966" class="auto-style20">' causes &quot;Type mismatch&quot; error</span></pre>
<pre style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style19"><span style="color: maroon" class="auto-style20">Dim iNum As Double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color:#339966" class="auto-style20">' Dim statement explicitly set the data type to Double</span></pre>
<pre style="tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style19"><span style="color: maroon" class="auto-style20">iNum = 2.345678&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color:#339966" class="auto-style20">' assign a Double data type</span></pre>
<p class="auto-style2">The Def statement names 
below determine the different data types..</p>
		<table x:str border="0" cellpadding="0" cellspacing="0" width="178" style="border-collapse:
 collapse;width:134pt" id="table10">
			<colgroup>
				<col width="92" style="width: 69pt">
				<col width="86" style="width: 65pt">
			</colgroup>
			<tr height="17" style="height:12.75pt">
				<td height="17" width="92" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; width: 69pt; text-decoration: underline; text-underline-style: single; color: windowtext; font-weight: 400; font-style: normal; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Statement</td>
				<td width="86" style="border-style: none; border-color: inherit; border-width: medium; width: 65pt; text-decoration: underline; text-underline-style: single; color: windowtext; font-weight: 400; font-style: normal; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Data Type</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; font-weight: 700; color: windowtext; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				DefBool</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Boolean</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; font-weight: 700; color: windowtext; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				DefByte</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Byte</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; font-weight: 700; color: windowtext; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				DefInt</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Integer</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; font-weight: 700; color: windowtext; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				DefLng</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Long</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; font-weight: 700; color: windowtext; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				DefCur</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Currency</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; font-weight: 700; color: windowtext; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				DefSng</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Single</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; font-weight: 700; color: windowtext; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				DefDbl</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Double</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; font-weight: 700; color: windowtext; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				DefDec</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Decimal</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; font-weight: 700; color: windowtext; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				DefDate</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Date</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; font-weight: 700; color: windowtext; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				DefStr</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				String</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; font-weight: 700; color: windowtext; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				DefObj</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Object</td>
			</tr>
			<tr height="17" style="height:12.75pt">
				<td height="17" style="border-style: none; border-color: inherit; border-width: medium; height: 12.75pt; font-weight: 700; color: windowtext; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				DefVar</td>
				<td style="border-style: none; border-color: inherit; border-width: medium; color: windowtext; font-weight: 400; font-style: normal; text-decoration: none; text-align: general; vertical-align: bottom; white-space: nowrap; padding-left: 1px; padding-right: 1px; padding-top: 1px" class="auto-style2">
				Variant</td>
			</tr>
		</table>
		
		<p style='margin-left:6.5in' class="auto-style2">		
		<a href="#TOP" style="color: blue; text-decoration: underline; text-underline: single">
		Return To Top</a></p>

		<p class="MsoNormal" style="line-height: 12.0pt"><span style="font-family:&quot;Courier New&quot;;color:maroon">
<br>
</span><b><i><span style="font-size:14.0pt;font-family:Arial;color:black">
Declare Statement<br>
</span></i></b><span class="auto-style2">Visual Basic 
provides a lot of functionality in its native functions and methods. However, 
sometimes you need some feature that simply isn't available using the native VB 
methods. This is where the <b>Win32 API</b> (Application Programming Interface) 
comes in. Windows provides several thousand functions that are available to a VB 
programmer (or any other language that supports them such as C\C++). To use an 
API in your code procedure all you need to do is include the appropriate Declare 
statement.<br>
<br>
<b>Declare</b> statement is used at
<span style="color: windowtext; text-decoration: none">module level</span></a> 
to declare references to external
<span style="color: windowtext; text-decoration: none">procedures</span></a> in 
a
<span style="color: windowtext; text-decoration: none">dynamic-link library</span></a> 
(<b>DLL</b>). A DLL file is nothing more than a collection of functions and 
subroutines that can be loaded dynamically, when your Visual Basic program 
requests one of its components at run time. Because <b>DLL</b> procedures reside 
in files that are external to your Visual Basic application, you must specify 
where the procedures are located and identify the arguments with which they 
should be called. <b>DLL</b> procedures declared in standard modules are public 
by default and can be called from anywhere in your application. You can place 
the <b>Declare</b> statements in class modules if the <b>Declare</b> statements 
are <b>Private</b>. Procedure names are case-sensitive in 32-bit versions of 
Visual Basic.<br>
<br>
To declare a DLL procedure, you add a Declare statement to the declarations 
section of the code window. If the procedure does not returns a value, write 
Declare as a Sub:<br>
</span><span style="color:maroon" class="auto-style19">

<font face="Times New Roman">
[</font></span></font><span style="color:maroon"><span class="auto-style16">Public</span><font face=""><font face="Times New Roman"><span class="auto-style20"><span class="auto-style19"> | 
		</span><span class="auto-style39">Private</span><span class="auto-style19">] 
		</span><span class="auto-style39">Declare</span>
		<span class="auto-style39">Sub</span><span class="auto-style19"> name 
		</span><span class="auto-style39">Lib</span><span class="auto-style19"> &quot;libname&quot; 
[</span><span class="auto-style39">Alias</span><span class="auto-style19"> &quot;aliasname&quot;] [([arglist])]</span></span></font><span class="auto-style20"><br class="auto-style19">
<br class="auto-style19">
		</span></font>
		</span>

<font face="">

<span class="auto-style2">If the procedure returns a 
value, write the declare as a function:<br>
</span>

<span style="color:maroon">

<font face="Times New Roman">
		<span class="auto-style19">[</span></font><span class="auto-style16">Public</span><font face="Times New Roman"><span class="auto-style20"><span class="auto-style19"> | 
		</span><span class="auto-style39">Private</span><span class="auto-style19">] 
		</span><span class="auto-style39">Declare</span>
		<span class="auto-style39">Function</span><span class="auto-style19"> name 
		</span><span class="auto-style39">Lib</span><span class="auto-style19"> &quot;libname&quot; [</span><span class="auto-style39">Alia</span><span class="auto-style19">s &quot;aliasname&quot;] [([arglist])] 
[</span><span class="auto-style39">As</span><span class="auto-style19"> type]</span></span></font></span><font face="Times New Roman"></p>
</font>

<p class="MsoNormal">
<span style="color: black" class="auto-style2">Below are 
explanations for some of the different elements of the Declare statement syntax:<br>
<br>
</span><span class="auto-style16">
name<br>
</span><span style="color: black" class="auto-style2">
Required. Any valid procedure name. Note that DLL entry points are case 
sensitive.</span></p>
<p class="MsoNormal">
<span class="auto-style16">Lib</span><span style="color: black" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;
<br>
Required. Indicates that a DLL or code resource contains the procedure being 
declared. <br>
The Lib clause is required for all declarations.</span></p>
<p class="MsoNormal">
<span class="auto-style16">Libname<br>
</span><span style="color: black" class="auto-style2">
Required. Name of the DLL or code resource that contains the declared procedure.</span></p>
<p class="MsoNormal">
<span class="auto-style16">Alias</span><span style="font-family: Arial; color: black" class="auto-style19"> </span>
<span style="color: black" class="auto-style19">
<br class="auto-style20">
</span>

<font face="">
<span style="font-size: 10.0pt; color: black" class="auto-style20">
<span style="font-family: Arial; color: black" class="auto-style19">
Optional. Indicates that the procedure being called has another name in the DLL. 
This is useful when the external procedure name is the same as a keyword. You 
can also use Alias when a DLL procedure has the same name as a public variable, 
constant, or any other procedure in the same scope. Alias is also useful if any 
characters in the DLL procedure name aren't allowed by the DLL naming 
convention.</span></span></p>
<p class="MsoNormal">
<span class="auto-style16">aliasname</span><span style="color: black" class="auto-style2">&nbsp;&nbsp;&nbsp;
<br>
Optional. Name of the procedure in the DLL or code resource. If the first 
character is not a number sign (#), aliasname is the name of the procedure's 
entry point in the DLL. If (#) is the first character, all characters that 
follow must indicate the ordinal number of the procedure's entry point.<br>
<br>
</span><span style="color:black" class="auto-style20">
<span class="auto-style19">The </span><span class="auto-style40">arglist</span><span class="auto-style19"> argument has the following 
syntax and parts:</span><br class="auto-style19">
</span>

<font face="">
<span style="color:maroon">

<font face="Times New Roman">
<span class="auto-style19">[</span></font><span class="auto-style16">Optional</span><font face="Times New Roman"><span class="auto-style20"><span class="auto-style19">] [</span><span class="auto-style39">ByVal</span><span class="auto-style19"> | 
</span><span class="auto-style39">ByRef</span><span class="auto-style19">] [</span><span class="auto-style39">ParamArray</span><span class="auto-style19">]
</span><span class="auto-style39">varname</span><span class="auto-style19">[( )] [</span><span class="auto-style39">As</span><span class="auto-style19"> type]</span><br class="auto-style19">
<br class="auto-style19">
</span></font>
</span>
<span style="color:black" class="auto-style2">Empty parentheses 
indicate that the Sub or Function procedure has no arguments and that Visual 
Basic ensure that none are passed. In example below, First takes no arguments. 
If you use arguments in a call to First, an error occurs:<br>
</span>
<span style="color:maroon" class="auto-style2">
Declare Sub First Lib &quot;MyLib&quot;()<br>
<br>
</span><span style="color:black" class="auto-style2">If you 
include an argument list, the number and type of arguments are checked each time 
the procedure is called. In the following example, First takes one Long 
argument:<br>
</span>
<span style="color:maroon" class="auto-style2">
Declare Sub First Lib &quot;MyLib&quot; (X As Long)<br>
<br>
</span><span style="color: black" class="auto-style2">Note:</span><span style="font-size: 10.0pt; font-family: Arial; color: black"><span style="color:black" class="auto-style2">&nbsp;You 
can't have fixed-length strings in the argument list of a Declare statement; 
only variable-length strings can be passed to procedures. Fixed-length strings 
can appear as procedure arguments, but they are converted to variable-length 
strings before being passed. The </span></span>
<span style="color:black" class="auto-style16">vbNullString</span><span style="color:black" class="auto-style2"> 
constant is used when calling external procedures, where the external procedure 
requires a string whose value is zero. This is not the same thing as a 
zero-length string (&quot;&quot;).<br>
<br>
To find the appropriate Declare statement you need to use you can use a tool 
called the Win32 API Viewer that comes with VB6. Open your API Text Viewer, go 
to the File Menu/Load Text File and open the file called <b>WIN32API.TXT</b> 
(it is resided in C:\Program Files\Microsoft Visual Studio\Common\Tool\Winapi). 
Once you have loaded the text file the Available Items list will populate with 
all the available API's. You can type in the name of API or use the scrollbar to 
look for the API, and double-click it (but ensure the Public option is 
selected). Click Copy to copy it to the clipboard and go to your VB to add this 
in your module. Once you have done this, you can use that function in your VB 
project as if it was a native VB function. Your help files or MSDN have the 
documentation that explain for each particular API you wish to use. Below is a 
simple example of using the GetTickCount() API to benchmark some code. 
GetTickCount() returns the number of milliseconds that have elapsed since the 
system was started, up to 49.7 days.</span><span style="font-size: 10.0pt; font-family: Arial; color: black"><span style="color: black; " class="auto-style2"> 
This can also be used for timing how long it takes for a certain chunk of code 
to execute (by calling it before and after and calculating the difference). 
GetTickCount() API uses </span></span>
<span style="color: black" class="auto-style2"> 
Kernel32.lib Kernel32.dll file.</span><span style="color: black; " class="auto-style2"><br>
<br>
</span>
<span style="color:maroon" class="auto-style2">Public Declare Function GetTickCount Lib &quot;kernel32&quot; Alias &quot;GetTickCount&quot; 
() As Long<br>
<br>
Public Sub BenchmarkSomeCode()<br>
Dim lngStart As Long<br>
Dim i As Long<br>
Dim lngSum As Long<br>
lngStart = GetTickCount()<br>
<br>
</span><span style="font-family: Arial; color: #339966" class="auto-style19">'</span><span style="color: #339966" class="auto-style2"> 
benchmarking this code</span><span style="color:maroon" class="auto-style19"><br class="auto-style20">
</span><span style="color:maroon" class="auto-style2">For i = 1 to 100000000<br>
lngSum = lngSum + 1<br>
Next i<br>
MsgBox CStr(GetTickCount() - lngStart)<br>
End Sub</span><span style="font-size:10.0pt;font-family:&quot;Courier New&quot;;
color:maroon"><br>
&nbsp;</span></p>
		<table border="0" cellspacing="0" cellpadding="0" width="467" height="433">
			<tr>
				<td>
				<img border="0" src="Images/API_Text_Viewer_1.gif" height="144" width="117"></td>
				<td>
				<img border="0" src="Images/API_Text_Viewer_2.gif" height="144" width="117"></td>
				<td>
				<img border="0" src="Images/API_Text_Viewer_3.gif" height="144" width="116"></td>
				<td>
				<img border="0" src="Images/API_Text_Viewer_4.gif" height="144" width="117"></td>
			</tr>
			<tr>
				<td>
				<img border="0" src="Images/API_Text_Viewer_5.gif" height="145" width="117"></td>
				<td>
				<img border="0" src="Images/API_Text_Viewer_6.gif" height="145" width="117"></td>
				<td>
				<img border="0" src="Images/API_Text_Viewer_7.gif" height="145" width="116"></td>
				<td>
				<img border="0" src="Images/API_Text_Viewer_8.gif" height="145" width="117"></td>
			</tr>
			<tr>
				<td>
				<img border="0" src="Images/API_Text_Viewer_9.gif" height="144" width="117"></td>
				<td>
				<img border="0" src="Images/API_Text_Viewer_10.gif" height="144" width="117"></td>
				<td>
				<img border="0" src="Images/API_Text_Viewer_11.gif" height="144" width="116"></td>
				<td>
				<img border="0" src="Images/API_Text_Viewer_12.gif" height="144" width="117"></td>
			</tr>
		</table>
		
		<p style='margin-left:6.5in' class="auto-style2">		
		<a href="#TOP" style="color: blue; text-decoration: underline; text-underline: single">
		Return To Top</a></p>

		<p class="MsoNormal" style="line-height: 12.0pt">&nbsp;</p>
		<p style="line-height: 12.0pt"><font size="4">
		<span style="font-family: Arial; font-weight: 700">Summary 
note on Declaration statements<br>
</span></font>
		<span style="font-size: 12.0pt; font-family: Arial; font-weight: 700"><br>
</span><span class="auto-style2">Declaration statements in general are pretty simple, but 
getting to the details and get it right can sometimes be tricky even for 
experienced programmers. Focus on understanding Dim/ReDim/Public/Private/Sub/Function/Type 
and Set, and commit these to your memory as you will use it in almost every 
procedure. The summary list below will give a memory refresher. You have to 
refer to MSDN library and books for examples to get better understanding.</span></p>
<ul type="disc" style="margin-bottom: 0in">
	<li class="MsoNormal"><span class="auto-style16">
	Dim</span><span class="auto-style2"> - Used to 
	define a variable as a certain type </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Dim i as integer, r as single </li>
		<li class="auto-style2">You can use the Option Explicit to make sure that VB forces you to 
		declare every variable you use. DIM is that simplest way to declare a 
		variable </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	ReDim</span><span class="auto-style2"> - Used to 
	change the dimensions of a dynamic array </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Redim arrayname(37) </li>
		<li class="auto-style2">Don't be afraid of this one. You can use ReDim to create an array whose 
		size grows by 1 every time you want to add a number to it. Then, the 
		UBound tells you how many numbers you've added. </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Static</span><span class="auto-style2"> - 
	Establishes a procedure variable which keeps its value between calls </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Static i as integer </li>
		<li class="auto-style2">For example, if you want to keep track of how many times you've been in 
		a procedure, set a counter as STATIC and increment it by one for each 
		visit to the procedure. It will never go away until the program is 
		terminated. </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Public</span><span class="auto-style2"> - Creates 
	a variable which can be accessed outside its own procedure </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Public i as integer </li>
		<li class="auto-style2">Even if you're the only programmer writing code in your application, use 
		of Private vs Public will help catch errors if you inadvertently try to 
		access an out-of-scope variable </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Private</span><span class="auto-style2"> - 
	Creates a variable that is read only in its own procedure or module, 
	according to where the declaration took place. </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Private i as integer </li>
		<li class="auto-style2">Use this as often as possible to avoid unnecessary exposure of your 
		variables to coding mistakes. </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Sub</span><span class="auto-style2"> - Defines a 
	procedure which can execute a block of code </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Sub NewProcedure (var1 as integer, var2 as string) </li>
		<li class="auto-style2">Be sure to check out HELP for how to handle Sub arguments. There are 
		more questions and mistakes made concerning the use of arguments than 
		just about anything else I've seen. </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Function</span><span class="auto-style2"> - 
	Declares a procedure which can return a value </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Function NewFunction (var1 as integer, var2 as string) as SINGLE 
		</li>
		<li class="auto-style2">This is actually the most versatile of the Sub/Function procedure types. 
		It can do anything a Sub can do as well as returning a value for use in 
		an expression. </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Call</span><span class="auto-style2"> - Transfers 
	control to a Sub or Function (is optional) </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Call Procedure 1 </li>
		<li class="auto-style2">Since the use of CALL is optional, forget you ever saw it </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	CallByName</span><span class="auto-style2"> - 
	Executes a method of an object or set/returns a property </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">CallByName(form1,procedurename,vbMethod) </li>
		<li class="auto-style2">The really cool thing about this is that you don't have to hardcode a 
		procedure call. Just use a string variable with the name of the 
		procedure to call. </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Option Explicit</span><span class="auto-style2"> 
	- Instructs VB to force an explicit declaration of all variables </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Option Explicit </li>
		<li class="auto-style2">You're borderline stupid if you don't use it to catch typing errors. Set 
		up the VB IDE to automatically include this in all projects. 
		</li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Option Compare</span><span class="auto-style2"> - 
	Instructs VB on how to make string comparisons </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Option Compare Binary </li>
		<li class="auto-style2">This can add case-insensitivity for those times when you don't want to 
		hard-code it </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Option Private</span><span class="auto-style2"> - 
	Prevents a module's content from being referenced outside a project. </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Option Private Module </li>
		<li class="auto-style2">Generally doesn't apply to most VB applications. If you find a good use 
		for it let me know. </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Property Get</span><span class="auto-style2"> - 
	Declares how to get the value of a property </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Property Get Name() </li>
		<li class="auto-style2">You won't use this much until you get into creating classes of your own
		</li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Property Let</span><span class="auto-style2"> - 
	Declares how to assign a value to a property </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Property Let Name() </li>
		<li class="auto-style2">You won't use this much until you get into creating classes of your own
		</li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Property Set</span><span class="auto-style2"> - 
	Declares how to set a variable reference to an object </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">You won't use this much until you get into creating classes of your own
		</li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Set </span><span class="auto-style2">- Assigns an 
	object reference to a variable </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Set X = form1.txtInputFromUser </li>
		<li class="auto-style2">Very useful for making code more readable or simply to cut down on how 
		much typing you have to do! </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Let -</span><span class="auto-style2"> Precedes 
	assignment of a value to a variable </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">Let i = 3 </li>
		<li class="auto-style2">It's optional, no one uses, so forget you ever saw it </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Type</span><span class="auto-style2">...End Type 
	- Creates a user defined part type which consists of standard VB data types
	</span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">type anytypename </li>
		<li class="auto-style2">one as string </li>
		<li class="auto-style2">two as integer </li>
		<li class="auto-style2">three as boolean </li>
		<li class="auto-style2">End Type </li>
		<li class="auto-style2">This is a really excellent way to keep several kinds of data under one 
		variable name. Plus, you can PUT or GET a user-defined type with a 
		single line of code. </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Const</span><span class="auto-style2"> - Creates 
	a variable whose value is fixed </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">const anyname </li>
		<li class="auto-style2">Basically, use this to give easy to remember names to values. For 
		example, suppose you use the value 37.2 a lot in your code, then if you 
		put CONST MyAge = 37.2 in your code you'll be able to insert the MyAge 
		where the 37.2 should have gone. Easier to type and easier to read. 
		Also, you can chane the value of the constant by changing only the 
		declaration line of code, rather than searching out every place the 
		value was used! </li>
	</ul>
	</li>
	<li class="MsoNormal"><span class="auto-style16">
	Declare</span><span class="auto-style2"> - Used 
	to define a procedure that exists in another file </span>
	<ul type="circle" style="margin-bottom: 0in">
		<li class="auto-style2">declare functionname (arg1 as integer, arg2 as string) as integer 
		</li>
		<li class="auto-style2">ArrayName = Array (10, 20, 30) </li>
		<li class="auto-style2">Implements - Specifies a class to be implemented in a module 
		</li>
		<li class="auto-style2">Friend - Allows procedure to be callable from modules outside the class
		</li>
		<li class="auto-style2">GetObject - Return a reference to an ActiveX component </li>
		<li class="auto-style2">CreateObject - Creates and returns a reference to an ActiveX object
		</li>
		<li class="auto-style2">GetAutoServerSettings - Returns information about the state of an 
		ActiveX component's registration. </li>
		<li class="auto-style2">Enum - Declares a type for an enumeration </li>
		<li class="auto-style2">Event - Declares a user-defined event </li>
		<li class="auto-style2">TypeName - Returns the type of data in a variable </li>
		<li class="auto-style2">VarType - Returns the type of data in a variable </li>
		<li class="auto-style2">DefType - Sets the default data type of variables DefInt A-Z 
		</li>
		<li class="auto-style2">IS - A variety of data type or status checking options IsArray, 
		IsBindable, IsBroken, IsDate, IsDirty, IsEmpty, IsError, IsMissing, 
		IsNull, IsNumber, IsObject, IsReady, IsRootFolder</li>
	</ul>
	</li>
</ul>

		<p style='margin-left:6.5in' class="auto-style2">		
		<a href="#TOP" style="color: blue; text-decoration: underline; text-underline: single">
		Return To Top</a></p>
<p class="text" style="margin-top:3.0pt;margin-right:0in;margin-bottom:3.0pt;
margin-left:0in">&nbsp;</p>
<b><span style="font-family: Arial; color: blue"><font size="5">Assignment 
Statements</font></span></b><p>
		<span class="auto-style2">Assignment 
statement </span>
<span lang="EN" class="auto-style2">sets a variable 
or property of an object to a specific value. </span><span class="auto-style2">In a layman term, 
Assignment statement takes the value on the right side of the assignment 
operator (<b>=</b>) and storing it in the element on the left. For example, 
x=123, it means the assignment statement stores the literal value 123 in the 
variable x. See more examples below.<br>
<br>
</span><span style="color: #339966" class="auto-style2">&#8216; it 
sets the value of the MyNextNumber variable to the sum of the MyNumber variable 
plus 12.</span><span style="color: #CC3300" class="auto-style2"><br>
</span><font color="#800000">
<span class="auto-style2">MyNextNumber = 
MyNumber + 12<br>
<br>
</span></font>
<span style="color: #339966" class="auto-style2">&#8216; you use 
the Set statement when you&#8217;re assigning values to object variables</span></font></font></font><br class="auto-style2">

<font face="">
<span style="color: #800000" class="auto-style2">Dim 
myRng As Range</span><b><span style="color: #800000" class="auto-style19"><br class="auto-style20">
		</span><span style="color: #800000" class="auto-style2">Set</span></b><span style="color: #800000" class="auto-style2"> 
myRng = Worksheets(&quot;Main&quot;).Range(&quot;A1:K1&quot;)<br>
With myRng.Font<br>
&nbsp;&nbsp; .Bold = True<br>
&nbsp;&nbsp; .ColorIndex = 3<br>
End With<br>
<br>
</span><span style="color: #339966" class="auto-style2">&#8217; you 
use Let statements to assign one record variable to another only when both 
variables are of the same
</span><span style="font-size: 10.0pt; font-family: Arial; color: #339966">
<span style="color: #339966; text-decoration: none" class="auto-style2">
user-defined type</span></span><span style="color: #339966" class="auto-style2">. Let statement is optional, and nobody uses it any 
longer, so you can omit it.<br>
		</span>
<span style="color: #800000" class="auto-style2">Dim 
yourPWD As String<br>
Let yourPWD = InputBox(key in your password:&quot;</span></p>
		<p>
		<span style="color: #800000" class="auto-style2"><br>
<br>
</span><span class="auto-style2">The following are the
<b><i>Assignment Operators</i></b> defined in Visual Basic.</span></p>
		<table border="0" width="67%" cellspacing="1" cellpadding="0" id="table36">
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>

<font face="">
		<td><b><span class="auto-style2">= O</span></b><span class="auto-style2">perator</span></td>
	</tr>
</table>
<table border="0" width="67%" cellspacing="0" cellpadding="0" bgcolor="#DDDDDD" id="table37">
	<tr>
		<td width="32" bgcolor="#FFFFFF" class="auto-style2">&nbsp;</td>

<font face="">
		<td><span style="color: #339966" class="auto-style20">
		<font class="auto-style19">&#8217; assigns a value to a variable or property 
		on the left.</font></span><span class="auto-style2"></font></span><font face=""><font class="auto-style19"><br class="auto-style20">
		</font>

<font style="color: #800000; " class="auto-style2">
		Dim testInt As Integer<br>
		Dim testString As String<br>
		Dim testButton As System.Windows.Forms.Button<br>
		Dim testObject As Object<br>
		testInt = 42<br>
		testString = &quot;This is an example of a string literal.&quot;<br>
		testButton = New System.Windows.Forms.Button()<br>
		testObject = testInt<br>
		testObject = testString<br>
		testObject = testButton</td>
	</tr>
</table>

<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<table border="0" width="67%" cellspacing="1" cellpadding="0" id="table38">
	<tr>
		<td width="30" class="auto-style2">&nbsp;</td>

<font face="">
		<td>

<font face="">
		<span class="auto-style20"><span class="auto-style19">^</span><span class="auto-style39">=</span></span><span class="auto-style2">&nbsp;Operator</span></td>
	</tr>
	<tr>
		<td width="30" class="auto-style2">&nbsp;</td>
		<td bgcolor="#DDDDDD">

<font face="">
		<span style="color: #339966" class="auto-style2">&#8217; 
		raises the value of a variable or property to the power of an expression 
		and assigns the result back to the variable or property </span>
		</font>
		<br class="auto-style2">

<font face="">
		<font style="color: #800000; " class="auto-style2">
		Dim var1 As Integer = 10<br>
		Dim var2 As Integer = 3<br>
		var1 ^= var2 ' the value of var1 is now 1000</font></td>
	</tr>
</table>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<table border="0" width="67%" cellspacing="0" cellpadding="0" id="table39">
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>

<font face="">
		<td>

<font face="">
		<pre style="font-size: 10.0pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt"><span class="auto-style20"><span class="auto-style19">*</span><span class="auto-style39">=</span></span><span class="auto-style2">&nbsp;Operator</span></pre>
		</td>
	</tr>
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>
		<td bgcolor="#DDDDDD">

<font face="">
		<span style="color: #339966" class="auto-style2">&#8217; 
		Multiplies the value of a variable or property by the value of an 
		expression and assigns the result to the variable or property</span></font><br class="auto-style2">

<font face="">
		<font style="color: #800000; " class="auto-style2">
		Dim var1 As Integer = 10<br>
		Dim var2 As Integer = 3<br>
		var1 *= var2&nbsp; </font>
		<font style="color: #339966; " face class="auto-style2">&#8216; 
		the value of var1 is now 30</font></td>
	</tr>
</table>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<table border="0" width="67%" cellspacing="1" cellpadding="0" id="table40">
	<tr>
		<td width="30" class="auto-style2">&nbsp;</td>

<font face="">
		<td><font face="">
		<span class="auto-style16">/=</span><span class="auto-style2">&nbsp;Operator</span></td>
	</tr>
	<tr>
		<td width="30" class="auto-style2">&nbsp;</td>
		<td bgcolor="#DDDDDD">

<font face="">
		<span style="color: #339966" class="auto-style2">&#8217; 
		Divides the value of a variable or property by the value of an 
		expression and assigns the floating-point result to the variable or 
		property</span></font><br class="auto-style2">

<font face="">
		<font style="color: #800000; " class="auto-style2">
		Dim var1 As Integer = 12<br>
		Dim var2 As Integer = 3<br>
		var1 /= var2&nbsp; </font>
		<font style="color: #339966; " face class="auto-style2">&#8216; 
		the value of var1 is now 4</font></td>
	</tr>
</table>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<table border="0" width="67%" cellspacing="0" cellpadding="0" id="table41">
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>

<font face="">
		<td>

<font face="">
		<pre style="font-size: 10.0pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt"><span class="auto-style16">\=</span><span class="auto-style2">&nbsp;Operator</span></pre>
		</td>
	</tr>
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>
		<td bgcolor="#DDDDDD"><font face="">
		<span style="color: #339966" class="auto-style2">&#8217; 
		Divides the value of a variable or property by the value of an 
		expression and assigns the integer result to the variable or property<br>
		</span></font>
		<span style="color: #800000" class="auto-style2">
		Dim var1 As Integer = 10<br>
		Dim var2 As Integer = 3<br>
		var1 \= var2&nbsp; </span>
		<span style="color: #339966" class="auto-style2">&#8216; the 
		value of var1 is now 3</span></td>
	</tr>
</table>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<table border="0" width="67%" cellspacing="1" cellpadding="0" id="table42">
	<tr>
		<td width="30" class="auto-style2">&nbsp;</td>

<font face="">
		<td><font face="">
		<span class="auto-style16">+=</span><span class="auto-style2">&nbsp;Operator</span></td>
	</tr>
	<tr>
		<td width="30" class="auto-style2">&nbsp;</td>
		<td bgcolor="#DDDDDD">
		<span style="color: #339966" class="auto-style2">' Adds 
		the value of a numeric expression to the value of a numeric variable or 
		property and assigns the result to the variable or property. Can also be 
		used to concatenate a String expression to a String variable or property 
		and assign the result to the variable or property.</span><br class="auto-style2">

<font face="">
		<span style="color: #339966" class="auto-style2">' This 
		part uses numeric variables.</span><br class="auto-style2">
		<span style="color: #800000" class="auto-style2">
		Dim num1 As Integer = 10<br>
		Dim num2 As Integer = 3<br>
		num1 += num2&nbsp; </span>
		<span style="color: #339966" class="auto-style2">&#8216; the 
		value of num1 is now 13 </span>
		<p><span style="color: #339966" class="auto-style2">' 
		This part uses string variables</span><br class="auto-style2">

<font face="">
		<span style="color: #800000" class="auto-style2">
		Dim str1 As String = &quot;10&quot;<br>
		Dim str2 As String = &quot;3&quot;<br>
		str1 += str2&nbsp; </span>
		<span style="color: #339966" class="auto-style2">&#8216; the 
		value of str1 is now &quot;103&quot;</span></td>
	</tr>
</table>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<table border="0" width="67%" cellspacing="0" cellpadding="0" id="table43">
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>

<font face="">
		<td>

<font face="">
		<pre style="font-size: 10.0pt; font-family: Courier New; margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt"><span style="font-weight: 700" class="auto-style2">-=</span><span class="auto-style2">&nbsp;Operator</span></pre>
		</td>
	</tr>
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>
		<td bgcolor="#DDDDDD">
		<span style="color: #339966" class="auto-style2">&#8217; 
		Subtracts the value of an expression from the value of a variable or 
		property and assigns the result to the variable or property</span><br class="auto-style2">

<font face="">
		<span style="color: #800000" class="auto-style2">
		Dim var1 As Integer = 10<br>
		Dim var2 As Integer = 3<br>
		var1 -= var2&nbsp; </span>
		<span style="color: #339966" class="auto-style2">' the 
		value of var1 is now 7 </span></td>
	</tr>
</table>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<table border="0" width="67%" cellspacing="1" cellpadding="0" id="table44">
	<tr>
		<td width="30" class="auto-style2">&nbsp;</td>

<font face="">
		<td><font face="">
		<span class="auto-style41"><span class="auto-style19">&amp;=</span></span><span class="auto-style2">&nbsp;Operator</span></td>
	</tr>
	<tr>
		<td width="30" class="auto-style2">&nbsp;</td>
		<td bgcolor="#DDDDDD">
		<span style="color: #339966" class="auto-style2">
		&#8216;Concatenates a String expression to a String variable or property and 
		assigns the result to the variable or property</span><br class="auto-style2">

<font face="">
		<span style="color: #800000" class="auto-style2">
		Dim var1 As String = &quot;Hello &quot;<br>
		Dim var2 As String = &quot;World!&quot;<br>
		var1 &amp;= var2&nbsp; </span>
		<span style="color: #339966" class="auto-style2">' the 
		value of var1 is &quot;Hello World!&quot;</span></td>
	</tr>
</table>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<table border="0" width="67%" cellspacing="0" cellpadding="0" id="table45">
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>

<font face="">
		<td>

<font face="">
		<pre class="auto-style42">The following contains a list of the <u>Relational Comparison operators</u> and the example </pre>
		<pre class="auto-style42">conditions that determine whether <span class="parameter">result</span> is <span class="keyword">True</span> or <span class="keyword">False</span>.</pre>
		</td>
	</tr>
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>
		<td bgcolor="#DDDDDD">
		<pre><u><span class="auto-style2">Operator</span></u><span class="auto-style20"><span class="auto-style19">                                     </span><u><span class="auto-style19">True if</span></u><span class="auto-style19">         </span><u><span class="auto-style19">False if</span></u>
</span><font color="#800000" class="auto-style19"><span class="auto-style20">&lt; (Less than)                               2 &lt; 3          2 &gt;= 4
&lt;= (Less than or equal to)            2 &lt;= 2        2 &gt; 3
&gt; (Greater than)                          2 &gt; 1          2 &lt;= 1
&gt;= (Greater than or equal to)        2 &gt;= 1        2 &lt; 1
= (Equal to)                                 2 = 2          2 &lt;&gt; 2
&lt;&gt; (Not equal to)                         2 &lt;&gt; 3        2 = 3</span></font></pre>
		<pre class="auto-style43">Note: The = Operator is also used as an assignment operator</pre>
		</td>
	</tr>
</table>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<table border="0" width="67%" cellspacing="1" cellpadding="0" id="table46">
	<tr>
		<td width="30" class="auto-style2">&nbsp;</td>

<font face="">
		<td><font face><span class="auto-style2">AND Operator</span></font></td>
	</tr>
	<tr>
		<td width="30" class="auto-style2">&nbsp;</td>
		<td bgcolor="#DDDDDD">
		<span style="color: #800000" class="auto-style2">
		Dim a As Integer = 10<br>
		Dim b As Integer = 8<br>
		Dim c As Integer = 6<br>
		Dim firstCheck, secondCheck As Boolean<br>
		firstCheck = a &gt; b And b &gt; c </span>
		<span style="color: #339966" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
		&#8216;returns True</span><font color="#800000"><br class="auto-style2">
		</font>

<font face="">
		<span style="color: #800000" class="auto-style2">
		secondCheck = b &gt; a And b &gt; c&nbsp; </span>
		<span style="color: #339966" class="auto-style2">
		&#8216;returns False</span></td>
	</tr>
</table>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<table border="0" width="67%" cellspacing="0" cellpadding="0" id="table47">
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>

<font face="">
		<td>

<font face="">
		<pre class="auto-style44">NOT Operator</pre>
		</td>
	</tr>
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>
		<td bgcolor="#DDDDDD">
		<span style="color: #800000" class="auto-style2">
		Dim a As Integer = 10<br>
		Dim b As Integer = 8<br>
		Dim c As Integer = 6<br>
		Dim firstCheck, secondCheck As Boolean<br>
		firstCheck = Not (a &gt; b)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
		<span style="color: #339966" class="auto-style2">&#8216; 
		returns False</span><span style="color: #800000" class="auto-style19"><br class="auto-style20">
		</span>

<font face="">
		<span style="color: #800000" class="auto-style2">secondCheck = Not (b &gt; a)&nbsp;&nbsp;&nbsp;&nbsp; </span>
		<span style="color: #339966" class="auto-style2">&#8216; 
		returns True</span></td>
	</tr>
</table>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<table border="0" width="67%" cellspacing="1" cellpadding="0" id="table48">
	<tr>
		<td width="30" class="auto-style2">&nbsp;</td>

<font face="">
		<td><font face><span class="auto-style2">OR Operator</span></font></td>
	</tr>
	<tr>
		<td width="30" class="auto-style2">&nbsp;</td>
		<td bgcolor="#DDDDDD">
		<span style="color: #800000" class="auto-style2">
		Dim a As Integer = 10<br>
		Dim b As Integer = 8<br>
		Dim c As Integer = 6<br>
		Dim firstCheck, secondCheck, thirdCheck As Boolean<br>
		firstCheck = a &gt; b Or b &gt; c&nbsp;&nbsp; </span>
		<span style="color: #339966" class="auto-style2">&#8216; 
		returns True</span><span style="color: #800000" class="auto-style19"><br class="auto-style20">
		</span>

<font face="">
		<span style="color: #800000" class="auto-style2">secondCheck = b &gt; a Or b &gt; c&nbsp; </span>
		<span style="color: #339966" class="auto-style2">&#8216; 
		returns True</span><span style="color: #800000" class="auto-style19"><br class="auto-style20">
		</span>
		<span style="color: #800000" class="auto-style2">thirdCheck = b &gt; a Or c &gt; b&nbsp;&nbsp; </span>
		<span style="color: #339966" class="auto-style2">&#8216; 
		returns False</span></td>
	</tr>
</table>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>
<table border="0" width="67%" cellspacing="0" cellpadding="0" id="table49">
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>

<font face="">
		<td>

<font face="">
		<pre class="auto-style44">XOR Operator</pre>
		</td>
	</tr>
	<tr>
		<td width="31" class="auto-style2">&nbsp;</td>
		<td bgcolor="#DDDDDD">
		<span style="color: #800000" class="auto-style2">
		Dim a As Integer = 10<br>
		Dim b As Integer = 8<br>
		Dim c As Integer = 6<br>
		Dim firstCheck, secondCheck, thirdCheck As Boolean<br>
		firstCheck = a &gt; b Xor b &gt; c&nbsp;&nbsp;&nbsp; </span>
		<span style="color: #339966" class="auto-style2">&#8216; 
		returns False</span><span style="color: #800000" class="auto-style19"><br class="auto-style20">
		</span>

<font face="">
		<span style="color: #800000" class="auto-style2">secondCheck = b &gt; a Xor b &gt; c </span>
		<span style="color: #339966" class="auto-style2">&nbsp;&nbsp;&nbsp; 
		&#8216; returns True<br>
		</span>
		<span style="color: maroon" class="auto-style2">
		thirdCheck = b &gt; a Xor c &gt; b</span><span style="color: #800000" class="auto-style2">
		</span><span style="color: #339966" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
		&#8216; returns False</span></td>
	</tr>
</table>
<pre style="margin-left: 0in; margin-right: 0in; margin-top: 0in; margin-bottom: .0001pt" class="auto-style2">&nbsp;</pre>

		<p style='margin-left:6.5in' class="auto-style2">		
		<a href="#TOP" style="color: blue; text-decoration: underline; text-underline: single">
		Return To Top</a></p>

		<p class="MsoNormal" style="line-height: 12.0pt">
		<span style="font-family:&quot;Courier New&quot;;color:maroon"><br>
		</span><b>
		<span style="text-decoration: none; font-family:Arial; color:blue">
		<font size="5">Executable Statements</font></span><span style="font-size:15.0pt;font-family:Arial;color:blue"></a><br>
		<br></span></b><span class="auto-style2">Executable 
statements can call or execute a procedure, method, function, loop, and they can 
branch to another place in the code, loop through blocks of code, or evaluate an 
expression. Executable statements include
		<span style="color: black; text-decoration: none">Assignment Statements</span></a>, 
which assign a value or expression to a variable or constant.</span><span style="color: windowtext" class="auto-style2"> 
Executable statements mostly contain mathematical or conditional operators.<br>
		<br></span>
		<span lang="EN" class="auto-style2">We use 
executable statements to do the following:<br></span>
		<span class="auto-style2">?</span><span style="font-style:normal; font-variant:normal; font-weight:normal; color:maroon" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span lang="EN" class="auto-style2">Call 
another procedure in your own code, example:</span></font></font></font></font></font></font></font></font></font></font></font></font></font><span style="color:maroon" class="auto-style19"><br class="auto-style20"></span>

<font face="">
		<span style="color:maroon" class="auto-style2">&nbsp;&nbsp; Call Macro1<br>
		</span><span class="auto-style2">?</span><span style="font-style:normal; font-variant:normal; font-weight:normal; color:maroon" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span lang="EN" class="auto-style2">Activate a method 
belonging to an object, example:</span><span style="color:maroon" class="auto-style19"><br class="auto-style20"></span>
		<span style="color:maroon" class="auto-style2">&nbsp;&nbsp; ActiveWorkbook.Worksheets.Add</span><span lang="EN" class="auto-style2"><br>
		</span><span class="auto-style2">?</span><span style="font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;" lang="EN" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
		</span><span lang="EN" class="auto-style2">Control the order 
in which other statements are executed, example:</span><span style="color:maroon" class="auto-style19"><br class="auto-style20"></span>
		<span style="color:maroon" class="auto-style2">&nbsp;&nbsp; If ActiveSheet.AutoFilterMode = False Then<br>
		</span><span class="auto-style2">?</span><span style="font-style:normal; font-variant:normal; font-weight:normal; color:maroon" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
		</span><span lang="EN" class="auto-style2">Execute one of the 
built-in VBA statement or functions. example:<br></span>
		<span style="color:maroon" class="auto-style2">&nbsp;&nbsp; 
ChDir &quot;</span><span style="font-size:10.0pt;font-family:&quot;Courier New&quot;;color:maroon"><span class="auto-style2">C:\william91128\GPP_DSM\</span></span><span style="font-family:&quot;Courier New&quot;;color:maroon" class="auto-style19">&quot;</span><span style="color:maroon" class="auto-style2"><br>
		<br></span>
		<span lang="EN" class="auto-style19"><br class="auto-style20"></span>
		<span lang="EN" class="auto-style2">Two executable statements below: the 
		<b>If&#8230;Then </b>statement tests to see if 
there is a sheet named &#8216;main&#8217; in the active workbook. If the sheet name is not 
&#8216;main&#8217;, the Delete method would delete the sheet. If Sheet1 &#8216;name is not &#8216;main&#8217;, 
it would rename Sheet1 to &#8216;main&#8217;. The <b>For Each&#8230;Next</b> statement iterates 
through every sheet.<br></span>
		<span style="color: #339966" class="auto-style2"><br>
		</span>
		<span style="color:maroon" class="auto-style2">Dim ws As Object</span><span style="color:maroon" class="auto-style19"><br class="auto-style20"></span>
		<span style="color:maroon" class="auto-style2">&nbsp; For Each ws In Sheets<br>&nbsp;&nbsp;&nbsp; If ws.Name &lt;&gt; &quot;main&quot; Then ws.Delete<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If Sheets(1).Name &lt;&gt; &quot;main&quot; Then<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sheets(1).Name = &quot;main&quot;<br>&nbsp;&nbsp;&nbsp; End If<br>&nbsp; Next ws<br>
		<br><br></span>
		<span style="color: black" class="auto-style2">The 
following example uses a <b>F</b></span><b><span style="color: black" class="auto-style46">or Each...Next</span></b><span style="color: black" class="auto-style2"> statement to iterate through 
each cell in a range named MyRange on a Sheet named &#8216;main&#8217; of an active Excel 
workbook. The </span> <b>
		<span style="color: black" class="auto-style46">If...Then...Else</span><span style="color: black" class="auto-style2"> </span> </b>
		<span style="color: black" class="auto-style2">statement in the example checks the value 
of the cell. If the value is greater than $350, the <b>With</b> statement sets 
the Bold and ColorIndex properties of the Font object for that cell. The <b>N</span><span style="color: black" class="auto-style46">e</span><span style="color: black" class="auto-style2">xt</span></b><span style="color: black" class="auto-style2"> 
statement calls the next cell c in the collection of cells contained in MyRange</span><span style="color: black">.<span class="auto-style20"><br class="auto-style19">
		<br class="auto-style19"></span></span>
		<span style="color:maroon" class="auto-style2">Dim c As Range<br>Const x As Currency = &quot;$350&quot;<br>For Each c In Worksheets(&quot;main&quot;).Range(&quot;MyRange&quot;).Cells<br>&nbsp;&nbsp;&nbsp; If c.Value &gt; x Then<br>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;With c.Font<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .Bold = True<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .ColorIndex = 3<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End With<br>&nbsp;&nbsp;&nbsp; End If<br>Next c<br>
		<br><br></span><span class="auto-style2">In the following example, Each Case statement in the </span>
		<span class="auto-style45">Select Case</span><span class="auto-style2"> structure is compared against the test expression. If a match is 
found, the statements accompanying the Case are executed and update Column C. 
Only the statement block of the first matching Case expression is executed. In 
the end, </span>
		<span class="auto-style45">Case Else</span><span class="auto-style2"> expression executes if none of the Case expressions 
evaluates to True.<br><br></span>
		<span style="color:maroon" class="auto-style2">Dim lastrow As Long, i As Long<br>Range(&quot;B1&quot;) = &quot;Unit Cost&quot;<br>Range(&quot;C1&quot;) = &quot;Material Class&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
		<br>lastrow = Range(&quot;A65536&quot;).End(xlUp).Row<br>For i = 2 To lastrow<br>&nbsp;&nbsp;&nbsp; Select Case Worksheets(&quot;Sheet1&quot;).Cells(i, 2).Value<br>&nbsp;&nbsp;&nbsp; Case Is &gt; 10000<br>&nbsp;&nbsp;&nbsp; Cells(i, 3) = &quot;A&quot;</span></p>
		<p class="auto-style35">
		&nbsp;&nbsp;&nbsp; Case Is &gt; 5000<br>
&nbsp;&nbsp;&nbsp; Cells(i, 3) = &quot;B&quot;</p>
		<p class="auto-style35">
		&nbsp;&nbsp;&nbsp; Case Is &gt; 2000<br>
&nbsp;&nbsp; &nbsp;Cells(i, 3) = &quot;C&quot;</p>
		<p class="auto-style35">
		&nbsp;&nbsp;&nbsp; Case Is &gt; 100<br>
&nbsp;&nbsp;&nbsp; Cells(i, 3) = &quot;D&quot;</p>
		<p class="t">
		<span style="color:maroon" class="auto-style2">&nbsp;&nbsp;&nbsp; Case Else<br>
&nbsp;&nbsp;&nbsp; Cells(i, 3) = &quot;E&quot;<br>
		End Select<br>
Next i<br>
<br>
<br>
		</span><span class="auto-style45">While...Wend</span><span class="auto-style2"> statement in the following example loops until an event is 
false. Two input boxes ask for string and the Column letter you 
want to find, then insert a column to the right. Whenever a match in your search 
column is found , it fill the cell 
to the right with a value of 1<br>
</span>
<span style="color:maroon" class="auto-style2">
Dim col As String, I As Integer<br>
Dim addr, sp, str<br>
str = InputBox(&quot;Enter the string to find&quot;)<br>
col = InputBox(&quot;Enter column letter to search&quot;)<br>
Columns(col &amp; &quot;:&quot; &amp; col).Offset(, 1).EntireColumn.Insert<br>
Columns(col &amp; &quot;:&quot; &amp; col).Select<br>
On Error GoTo handler:<br>
<br>
Selection.Find(What:=str, After:=ActiveCell, LookIn:=xlFormulas, _<br>
MatchCase:=False).Activate<br>
addr = ActiveCell.Address<br>
sp = Split(ActiveCell.Value, str)<br>
Range(addr).Offset(0, 1).Value = Range(addr).Offset(0, 1).Value + UBound(sp) <br>
<br>
While I = 0<br>
Selection.FindNext(After:=ActiveCell).Activate<br>
If ActiveCell.Address = addr Then<br>
&nbsp; I = 1<br>
Else<br>
&nbsp; sp = Split(ActiveCell.Value, str, -1)<br>
&nbsp; Range(ActiveCell.Address).Offset(0, 1).Value = Range(ActiveCell. _<br>
&nbsp; Address).Offset(0, 1).Value + UBound(sp)<br>
End If<br>
Wend<br>
</span>
<span style="color:maroon" class="auto-style19"><br class="auto-style20">
</span>

<font face="">
<span style="color:maroon" class="auto-style2">handler:<br>
If Err.Description &lt;&gt; &quot;&quot; Then<br>
MsgBox &quot;no match is found&quot;<br>
End If<br>
<br>
<br>
</span><span class="auto-style2">The 
</span>
		<span class="auto-style20"><span class="auto-style47">Split</span><span class="auto-style19"> 
		function </span>
</span>
		<span class="auto-style2">has 
this syntax: <br>
</span>
<span style="color:maroon" class="auto-style2">Split(expression 
[, delimiter [, count [, compare]]])</span></p>
<ul type="disc" style="margin-bottom: 0in">
	<li class="auto-style2">
	&quot;Expression&quot; is a required string expression containing 
	substrings and delimiters. </li>
	<li class="auto-style2">
	&quot;Delimiter&quot; is an optional string identifying the 
	delimiter character. By default, a space character (&quot; &quot;) is considered to be 
	the delimiter. </li>
	<li class="auto-style2">
	&quot;Count&quot; is an optional number of substrings to return. 
	The default is -1, which indicates all substrings are to be returned. 
	</li>
	<li class="auto-style2">
	&quot;Compare&quot; is an optional numeric value signifying how 
	the comparison should take place for evaluating substrings. A 0 indicates 
	binary comparison; a 1 (the default) signifies textual comparison.</li>
</ul>

<p><br class="auto-style2">

<font face="">
<span class="auto-style2">You use <b>With</b> statements in the following example to 
reduce the number of object references:</span></font><span style="color:maroon" class="auto-style19"><br class="auto-style20">
</span>

<font face="">
<span style="color:maroon" class="auto-style2">With Selection<br>
&nbsp;&nbsp;&nbsp; .NumberFormat = &quot;$#,##0.00&quot;<br>
&nbsp;&nbsp;&nbsp; .HorizontalAlignment = xlCenter<br>
&nbsp;&nbsp;&nbsp; .VerticalAlignment = xlBottom<br>
&nbsp;&nbsp;&nbsp; .WrapText = True<br>
&nbsp;&nbsp;&nbsp; .ShrinkToFit = False<br>
&nbsp;&nbsp;&nbsp; .MergeCells = False<br>
&nbsp;&nbsp;&nbsp; .Font.Name = &quot;TimesNewRoman&quot;<br>
&nbsp;&nbsp;&nbsp; .Font.Size = 10<br>
&nbsp;&nbsp;&nbsp; .Font.ColorIndex = 3<br>
&nbsp;&nbsp;&nbsp; .Interior.ColorIndex = 6<br>
&nbsp;&nbsp;&nbsp; .Interior.Pattern = xlSolid<br>
End With<br>
<br>
</span><span class="auto-style20">
<span style="color: navy" class="auto-style19"><br>
</span></span><span class="auto-style2">The following 
Loops and Conditional Decisions, Operators, Error-Handling, and the 
miscellaneous functions and command take out a lot of the need in your 
executable statement. My advice is take some time to understand and practice - 
become a master of each one !</span></p>
		<p><font face="">
		<span style="font-family: Arial"><font size="3"><b>Loops and Conditional 
Decisions</b><br>
</font></span><span class="auto-style48">?</span><span style="font-style: normal; font-variant: normal; font-weight: 400" class="auto-style48">&nbsp;</span><span style="font-weight: 400" class="auto-style48">If..Then..Else - Performs code based on the results of a test </span>
		</font></font></font></font>
<span class="auto-style19"><br class="auto-style20">
		</span>

<font face="">
<span class="auto-style2">&nbsp;&nbsp; </span> <span style="font-weight: 400">
<span class="auto-style2">&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span></span><span style="font-weight:400" class="auto-style2">If A&gt;5 Then Print &quot;A 
is a bit number!&quot;</span><span class="auto-style2"><br>
		<span class="auto-style49">?</span></span><span style="font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;" class="auto-style48">&nbsp;</span><span style="font-weight:400" class="auto-style48">For...Next - 
Loops a specified number of times </span>
<span class="auto-style2"><br>
		</span>
<span style="font-weight: 400">
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span></span><span style="font-weight:400" class="auto-style2">For i = 1 to 5: print 
#1, i: next i</span><span class="auto-style2"><br>
		<span class="auto-style49">?</span></span><span style="font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;" class="auto-style48">&nbsp;</span><span style="font-weight:400" class="auto-style2"><span class="auto-style49"> For Each ... Next 
- Walks through a collection </span> <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>
<span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;<span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight:400" class="auto-style2">For Each X in 
Form1.controls: Next X</span><span class="auto-style2"><br>
		<span class="auto-style49">?</span></span><span style="font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;" class="auto-style48">&nbsp;</span><span style="font-weight: 400"><span class="auto-style48">While...Wend - 
Loops until an event is false </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">while i &lt; 5: i = i +1: 
wend<br>
		</span></span><span class="auto-style48">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style48">&nbsp;</span><span class="auto-style2"><span class="auto-style49">Select Case - 
Takes an action based on a value of a parameter</span> </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;
</span></span><span class="auto-style2">select case i </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">case 1 : print &quot;it was 
a 1&quot; </span><span class="auto-style19"><br class="auto-style20">
		</span><span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">case 2 : print &quot;it was 
a 2&quot; </span><span class="auto-style19"><br class="auto-style20">
		</span><span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span>
		<span style="font-size: 10.0pt; font-family: Courier New">
		<span style="font-style:normal; font-variant:normal; " class="auto-style2">
		<span class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span>&nbsp;&nbsp;</span></span><span class="auto-style2">end select<br>
		</span></span><span class="auto-style48">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style48">&nbsp;&nbsp;</span><span class="auto-style48">Do...Loop - Loops 
until conditions are met </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">do while i &lt; 5 : i = i 
+ 1 : loop<br>
		</span></span><span class="auto-style48">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style48">&nbsp;
</span><span class="auto-style2"><span class="auto-style49">IIF - Returns 1 
of two parts, depending on the value of an expression</span> </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">result = IIF (testexpression, 
truepart, falsepart)<br>
		</span></span><span class="auto-style48">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style48">&nbsp;&nbsp;</span><span class="auto-style2"><span class="auto-style49">Choose - Selects 
and returns a value from a list of arguments</span> </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">Choose (index, 
&quot;answer1&quot;, &quot;answer2&quot;, &quot;answer3&quot;)<br>
		</span></span><span class="auto-style48">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style48">&nbsp;&nbsp;</span><span class="auto-style48">With - Executes a 
series of statements on a single object </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">With textbox1 </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span></span><span style="font-weight:700" class="auto-style2">.</span><span style="font-weight: 400"><span class="auto-style2">Height 
		= 100 </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span></span><span style="font-weight:700" class="auto-style2">.</span><span style="font-weight: 400"><span class="auto-style2">Width 
		= 500 </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">End With<br>
		</span></span><span class="auto-style48">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style48">&nbsp;&nbsp;</span><span class="auto-style48">End - Immediately 
stops execution of a program </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">End<br>
		</span></span><span class="auto-style2">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span><span class="auto-style2">Stop - Pauses 
execution of a program (can restart without loss of data) </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">Stop<br>
		</span></span><span class="auto-style48">?</span><span style="font-style:normal; font-variant:normal; font-weight:400" class="auto-style48">&nbsp;</span><span style="font-weight: 400"><span class="auto-style48">Switch - Returns 
a value associated with the first true expression in a list </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">result = Switch 
(testvalue1, answer1, testvalue2, answer2)<br>
		</span></span><span class="auto-style48">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style48">&nbsp;</span><span class="auto-style2"><span class="auto-style49">GoTo - Switches 
execution to a new line in the code</span> </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span>
		<span style="font-size: 10.0pt; font-family: Courier New">
		<span style="font-style:normal; font-variant:normal; " class="auto-style2"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span>&nbsp;&nbsp;</span></span><span class="auto-style2">GoTo 
Line1<br>
		</span></span><span class="auto-style48">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style48">&nbsp;</span><span class="auto-style2"><span class="auto-style49">GoSub ... Return 
- Switches execution to a new block of code and then returns</span> </span>
<span class="auto-style19"><br class="auto-style20">
		</span>
<span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">GoSub Line1<br>
		</span></span><span class="auto-style48">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style48">&nbsp;</span><span class="auto-style2"><span class="auto-style49">On .. GoSub - 
Branch to a specific line of code then return at the next Return statement</span>
</span><span class="auto-style19"><br class="auto-style20">
		</span><span class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">On Number GoSub Line1, 
Line2, Line3<br>
		</span></span><span class="auto-style48">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style48">&nbsp;</span><span class="auto-style2"><span class="auto-style49">On .. GoTo - 
Branch to a specific line of code</span> </span></span>
<span class="auto-style2"><br>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400">
		<span style="font-style:normal; font-variant:normal; " class="auto-style2"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span>&nbsp;&nbsp;</span></span><span class="auto-style19"><span style="font-weight: 400" class="auto-style20">On Number GoTo Line1, 
Line2, Line3</span></span><span style="font-size:10.0pt;font-family:Arial"><br>
&nbsp;</span><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""><font face=""></p>
		<p><font face><span style="font-family: Arial" class="auto-style31">Operators</span></font><span style="font-size:10.0pt;
font-family:Arial"><br>
		</span>

		<span class="auto-style20">
		<span style="font-weight: 400" class="auto-style19">Here are the VB operators used to perform 
		mathematical operations on one or more variables. Aside from the normal<br>
		multiply/add/substract and divide, you will find the AND, OR, Not Equal, 
		MOD and Integer Division operators very useful.</span></span><span style="font-size:10.0pt;
font-family:Arial"><br>
		</span>

<font face="">
		<span class="auto-style2">?</span><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">/ - 
		Normal division</span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">\ - 
		Integer division (truncates the answer) </span>
		<font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">^ - 
		Exponentiation operator </span>
		<font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">
		?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">* - 
		Multiply </span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">+ - Plus
		</span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">- - Minus
		</span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">= - Equal
		</span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">&gt; - 
		Greater Than </span><font class="auto-style20">
		<br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">&lt; - Less 
		Than </span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">&lt;&gt; - Not 
		Equal </span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">&gt;= - 
		Greater than or equal </span>
		<font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">
		?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">&lt;= - Less 
		than or equal </span><font class="auto-style20">
		<br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">AND - 
		Defines a boolean value that is the AND of two values </span>
		<span style="font-size: 10.0pt; font-family: Arial"><br>
		</span><span style="font-weight: 400" class="auto-style2">
		&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span><span style="font-style: normal; font-variant: normal; font-weight: 400" class="auto-style2">&nbsp;&nbsp;</span><span class="auto-style2">result 
		= expression1 AND expression2</span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">OR - 
		Defines a boolean value that is the OR of two values <br>
		</span>
		<span style="font-weight: 400" class="auto-style2">
		&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span><span style="font-style: normal; font-variant: normal; font-weight: 400" class="auto-style2">&nbsp;&nbsp;</span><span class="auto-style2">result 
		= expression1 OR expression2</span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">XOR - 
		Defines a boolean value that is the exclusive OR of two values <br>
		</span>
		<span style="font-weight: 400" class="auto-style2">
		&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span><span style="font-style: normal; font-variant: normal; font-weight: 400" class="auto-style2">&nbsp;&nbsp;</span><span class="auto-style2">result 
		= expression1 XOR expression2</span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">NOT - 
		Defines an opposite boolean value <br>
		</span>
		<span style="font-weight: 400" class="auto-style2">
		&nbsp;&nbsp;&nbsp;&nbsp; <span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span></span><span style="font-style: normal; font-variant: normal; font-weight: 400" class="auto-style2">&nbsp;&nbsp;</span><span class="auto-style2">A 
		= NOT B</span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">EQV - 
		Performs a logical equivalence on two expressions (result is true if 
		both expressions are true) <br>
		</span>
		<span style="font-weight: 400" class="auto-style2">
		&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span><span style="font-style: normal; font-variant: normal; font-weight: 400" class="auto-style2">&nbsp;&nbsp;</span><span class="auto-style2">result 
		= expression1 EQV expression2</span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">IMP - 
		Performs a logical implication on two expressions <br>
		</span>
		<span style="font-weight: 400" class="auto-style2">
		&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span><span style="font-style: normal; font-variant: normal; font-weight: 400" class="auto-style2">&nbsp;&nbsp;</span><span class="auto-style2">result 
		= expression1 IMP expression2</span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">IS - 
		Determines if 2 variables reference the same object <br>
		</span>
		<span style="font-weight: 400" class="auto-style2">
		&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span><span style="font-style: normal; font-variant: normal; font-weight: 400" class="auto-style2">&nbsp;&nbsp;</span><span class="auto-style2">result 
		= object1 IS object2</span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">LIKE - 
		Determines if one string matches a pattern <br>
		</span>
		<span style="font-weight: 400" class="auto-style2">
		&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span><span style="font-style: normal; font-variant: normal; font-weight: 400" class="auto-style2">&nbsp;&nbsp;</span><span class="auto-style2">result 
		= string LIKE pattern</span><font class="auto-style20"><br class="auto-style19">
		<span class="auto-style19">?</span></font><span style="font-style: normal; font-variant: normal; font-weight: normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		</span><span class="auto-style2">MOD - 
		Returns the integer remainder of a division <br>
		</span>
		<span style="font-weight: 400" class="auto-style2">
		&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span><span style="font-style: normal; font-variant: normal; font-weight: 400" class="auto-style2">&nbsp;&nbsp;</span><span class="auto-style2">i 
		= 27 MOD 5</span></p>
		<p style="margin:0in;margin-bottom:.0001pt">&nbsp;</p>
<p><span style="font-family: Arial; font-weight:700" class="auto-style22">Error Handling</span><span style="font-weight: 400; font-size:10.0pt; font-family:Symbol"><br>
</span><span class="auto-style51">?</span><span style="font-style:normal; font-variant:normal; font-weight:400" class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style="font-weight: 400"><span class="auto-style2">
<span class="auto-style50">On Error - 
Enables an error-handling routine</span><br>
</span></span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
</span>

<font face="">
<span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span></font><span style="font-style:normal; font-variant:normal; font-weight:400" class="auto-style2">&nbsp;&nbsp;</span><span style="font-weight: 400"><span class="auto-style2">On Error GoTo 
Line2 (if error occurs, go to line2)<br>
</span></span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
</span>

<font face="">
<span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span></font><span style="font-style:normal; font-variant:normal; font-weight:400" class="auto-style2">&nbsp;&nbsp;</span><span style="font-weight: 400"><span class="auto-style2">On Error Resume 
Next (if error occurs, continue executing next line of code)<br>
</span></span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
</span>

<font face="">
<span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span></font><span style="font-style:normal; font-variant:normal; font-weight:400" class="auto-style2">&nbsp;&nbsp;</span><span style="font-weight: 400"><span class="auto-style2">On Error Goto 0 
(disables error handling)<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">Resume - Used to 
resume execution after a error-handling routine is finished</span><br>
</span></span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
</span>

<font face="">
<span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span></font><span style="font-style:normal; font-variant:normal; font-weight:400" class="auto-style2">&nbsp;&nbsp;</span><span style="font-weight: 400"><span class="auto-style2">Resume<br>
</span></span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 

<font face="">
<span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span></font></span><span style="font-style:normal; font-variant:normal; font-weight:400" class="auto-style2">&nbsp;&nbsp;</span><span style="font-weight: 400"><span class="auto-style2">Resume Next<br>
</span></span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
</span>

<font face="">
<span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span></font><span style="font-style:normal; font-variant:normal; font-weight:400" class="auto-style2">&nbsp;&nbsp;</span><span style="font-weight: 400"><span class="auto-style2">Resume Line1<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">CVErr - Returns 
an error type variable containing a user-specific error number</span><br>
</span></span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
</span>

<font face="">
<span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span></font><span style="font-style:normal; font-variant:normal; font-weight:400" class="auto-style2">&nbsp;&nbsp;</span><span style="font-weight: 400"><span class="auto-style2">X = CVError(13)<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">Error - Simulates 
the occurrence of an error</span><br>
</span></span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
</span>

<font face="">
<span style="font-weight: 400"><span style="font-weight:400" class="auto-style2">&nbsp;</span><span style="font-weight: 400; font-size: 10.0pt; font-family: Courier New">&#9658;</span></span></font><span style="font-style:normal; font-variant:normal; font-weight:400" class="auto-style2">&nbsp;&nbsp;</span><span style="font-weight:400" class="auto-style2">Error 23</span></p>
<p><span style="font-size:10.0pt;font-family:Arial"><br>
</span><span style="font-family: Arial; font-weight:700" class="auto-style22">Miscellaneous</span><b><span style="font-size:10.0pt;font-family:Arial"><br>
</span><span class="auto-style2">MsgBox, DoEvents, Shell, 
and Command</span></b><span style="font-weight:400" class="auto-style2"> 
functions are indispensable in certain occasions, but the others are equally 
useful in some other different circumstances.</span><span class="auto-style2"><br>
<span class="auto-style50">?</span></span><span style="font-style:normal; font-variant:normal; font-weight:400" class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style="font-weight: 400"><span class="auto-style2">
<span class="auto-style50">MsgBox - A 
built-in dialog box that gives a message and allows a user input </span><br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">
</span><span class="auto-style2">i = msgbox &quot;Read 
this!&quot;, vbokonly, &quot;Test Message&quot;<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">DoEvents - Allows 
VB to complete pending tasks </span><br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">doevents<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">Shell - Executes 
a 2nd program from within the current program</span> <br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">shell &quot;notepad.exe&quot;
<br>
</span></span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">Note - VB does 
not wait for the Shell'd program to quit before executing the next line of code!<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">Command - Gives 
any text that followed a VB .EXE execution command </span><br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">temp$ = command<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">Environ - Returns 
the system environmental space content</span> <br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">temp$ = environ<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">Beep - Makes the 
computer beep once.</span> <br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">beep<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">InputBox - A 
built-in dialog box that allows entry of a text string </span><br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">inputbox &quot;Input a 
value!&quot;, 5<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">AddressOf - 
Provides an entry point for an external program to use a procedure</span> <br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">AddressOf ( 
procedurename )<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">AppActivate - 
Activates an applications window</span> <br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">AppActivate ( 
windowtitle )<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">RaiseEvent - 
Fires an event declared at module level </span><br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">RaiseEvent 
ProcedureName<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">Load - Load an 
object </span><br>
</span></span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">load form1<br>
</span></span><span class="auto-style2">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2">Unload - Unload 
an object <br>
</span></span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">Unload form1<br>
</span></span><span class="auto-style2">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2">LoadPicture - 
Load a picture into a control property <br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">form1.picture = 
loadpicture (filename)<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">SavePicture - 
Save a picture to a file </span><br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">SavePicture(form1.picture,filename)<br>
</span></span><span class="auto-style2">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2">LoadResData - 
Load the data from a resource file <br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">LoadResData(index,format)<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">LoadResString - 
Load a string from a resource file </span><br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">LoadResString(index,format)<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">SendKeys - Send 
keys to another app as though they were from the keyboard</span> <br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">Sendkeys {DOWN}<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">QBColor - Returns 
a value corresponding to the original QB values 0-15 </span><br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">form1.backcolor = 
QBcolor (12)<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">RGB - Returns a 
color value by inputting the red, green, and blue parts </span><br>
</span>
</span>
<span style="font-weight:400" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New; font-weight:400"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span style="font-weight: 400"><span class="auto-style2">form1.backcolor = 
RGB (12,128,256)<br>
</span></span><span class="auto-style51">?</span><span style="font-weight: 400"><span style="font-style:normal; font-variant:normal; " class="auto-style51">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span class="auto-style2"><span class="auto-style50">Me - Refers to 
the current object, usually the active form </span> <br>
&nbsp;&nbsp;&nbsp;&nbsp; 
&#9658;</span><span style="font-size: 10.0pt; font-family: Courier New"><span style="font-style:normal; font-variant:normal; " class="auto-style2">&nbsp;&nbsp;</span></span><span class="auto-style2">print 
Me.caption</span></span></p>

<p style='margin-left:6.5in' class="auto-style2">
<a href="#TOP" style="color: blue; text-decoration: underline; text-underline: single">
Return To Top</a></p>
</td>
</tr>

<font face="">

<tr>


<td valign="top">

    </td>
  </tr>
</tbody></table>


<table border="0" width="98%" id="table5">
<tr>
<td align="center">
<font face="Courier New">	
<font size="2">




This site was created 
in Feb.2007<b><br></b></font>
<a href="mailto:vbautomation@yahoo.com"><font size="2">contact Tan, William</font></a></font></td>
</tr>
</table>
</font>
</body>
</html>