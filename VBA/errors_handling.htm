<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Excel Macros/Excel VBA code. Excel VBA Macro Tips for Beginners. Excel Macros Help</title>
<meta name="author" content="William Tan, https://github.com/william-pbTan/VBautomation.git">
<meta name="Description" content="Excel Macros: Excel VBA Macros. Free help on Excel Macros, Free Excel VBA code">
<meta name="Keywords" content="excel macros,Excel VBA,excel,vba,tips,tricks,excel vba,Visual Basic For Applications,help">
<meta name="keywords" content="Poh,William,Excel,Access,VBA,Forecasting,Inventory">
<meta name="keywords" content="Excel macro tips,Excel macro training,Excel tips,Home,Office,Basic,Intermediate,Advance">
<meta name="keywords" content="Singapore, Kuala Lumpur, KL, Malaysia, Hong Kong, Taiwan, Japan, China, Korea, Sarawak">
<meta name="generator" content="Microsoft FrontPage 12.0">
</head>

<script language="javascript">
// Courtesy of SimplytheBest.net - http://simplythebest.net/scripts/
var win = null;
function NewWindow(mypage,myname,w,h,scroll){
LeftPosition = (screen.width) ? (screen.width-w)/2 : 0;
TopPosition = (screen.height) ? (screen.height-h)/2 : 0;
settings =
'height='+h+',width='+w+',top='+TopPosition+',left='+LeftPosition+',scrollbars='+scroll+',resizable'
win = window.open(mypage,myname,settings)
}
</script>


<script type="text/javascript">
<!--if (top.location != location) {top.location.href = document.location.href ;}-->
</script>


<style>
<!--
.new_link {color: #000000;  font-family: Verdana, Arial, Helvetica, sans-serif;   font-size: 11px; text-decoration: none; font-weight: normal;}
-->
</style>

<body background="../logo.gif" style="background-attachment: fixed">

<style type="text/css">
body {scrollbar-3dlight-color:#000000;
scrollbar-arrow-color:#FFFFFF;
scrollbar-base-color:#ffffff;
scrollbar-darkshadow-color:#000000;
scrollbar-face-color:#339933;
scrollbar-highlight-color:#ffffff;
scrollbar-shadow-color:#ffffff}
 li.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	margin-left:0in; margin-right:0in; margin-top:0in}
span.CodeBlue
	{font-family:"Courier New";
	color:navy}
span.CodeBlack
	{font-family:"Courier New";
	color:windowtext}
 table.MsoNormalTable
	{mso-style-parent:"";
	font-size:10.0pt;
	font-family:"Times New Roman";
	}
.auto-style1 {
	color: #000000;
	font-family: Verdana;
	font-size: 10.5pt;
	text-decoration: none;
	font-weight: normal;
}
.auto-style2 {
	font-family: Verdana;
	font-size: 10.5pt;
}
.auto-style3 {
	font-family: Verdana;
	font-size: 10.5pt;
	text-decoration: none;
	font-weight: normal;
}
.auto-style4 {
	color: #0045C3;
}
.auto-style5 {
	font-family: Verdana;
	font-size: 10.5pt;
	color: #0045C3;
}
.auto-style6 {
	color: #0045C3;
	font-family: Verdana;
	font-size: 10.5pt;
	text-decoration: none;
	font-weight: normal;
}
.auto-style7 {
	font-size: 20pt;
}
.auto-style8 {
	font-size: 20pt;
	font-weight: bold;
}
.auto-style9 {
	font-size: 14pt;
}
.auto-style10 {
	font-size: 14pt;
	font-weight: bold;
}
.auto-style11 {
	font-family: Verdana;
}
.auto-style12 {
	font-family: Verdana;
	font-size: 14pt;
}
.auto-style13 {
	font-family: Verdana;
	font-weight: bold;
	font-size: 14pt;
}
.auto-style14 {
	font-family: Arial;
	font-weight: bold;
	font-size: 20pt;
}
.auto-style15 {
	font-family: Arial;
	font-size: 20pt;
}
.auto-style16 {
	font-size: 10.5pt;
}
.auto-style18 {
	font-size: 10.5pt;
	font-family: Verdana;
	font-weight: bold;
	margin-bottom: .0001pt;
}
.auto-style19 {
	text-align: center;
	font-size: 10.5pt;
	font-family: Verdana;
	font-weight: bold;
	margin-bottom: .0001pt;
}
.auto-style20 {
	font-size: 10.5pt;
	font-family: Verdana;
	margin-bottom: .0001pt;
}
.auto-style21 {
	text-align: center;
	border-style: solid;
	border-width: 1px;
	padding: .75pt;
}
.auto-style22 {
	border-style: solid;
	border-width: 1px;
	padding: .75pt;
}
.auto-style23 {
	border-width: 0px;
}
.auto-style24 {
	font-family: Verdana;
	font-style: italic;
	font-weight: bold;
	font-size: 10.5pt;
}
.auto-style25 {
	font-family: Verdana;
	font-weight: bold;
	font-size: 10.5pt;
}
.auto-style26 {
	font-family: Verdana;
	font-style: italic;
	font-size: 10.5pt;
}
.auto-style27 {
	font-family: Verdana;
	font-style: italic;
	font-weight: bold;
	font-size: 14pt;
}
</style>

<font face="">
<TABLE border="0" cellspacing="3" width="98%">
<TBODY>
<tr>
<td bgcolor="#ffffff" valign="top" width="13%" align="center">
</font>


<font face="">	
 <TABLE bgcolor="#3399cc" border="0" cellpadding="0" cellspacing="0" width="158">
  <TBODY>
	<TR>
	 <TD>
       <TABLE border="0" cellpadding="3" cellspacing="1" width="161">
         <TBODY>


					<tr width="159">
					<td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" class="auto-style2">
					<a href="../index.htm" rel="internal" class="auto-style1">Home</a></td>
					</tr>
					
					<tr width="159">
					<td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" class="auto-style2">
					<a href="../AboutMe/Me.htm" rel="internal" class="auto-style1">
					About me</a></td>
					</tr>
                     
		<TBODY>
		<td bgcolor="#3399cc" height="135" width="153">
		<p align="left">
		<img border="0" src="../logo-excelvba_1.gif" width="153" height="59"><br>
		<img border="0" src="../logo-excelvba_2.gif" width="153" height="68"></td>
		</TBODY>                  
                                                
                                                
				<tr height="" width="159">
				<td bgcolor="#FFFF66" valign="middle" width="153" class="auto-style2">
				<font class="auto-style1"><strong><br>
				&nbsp;<i>VBA Programming</i></strong></font></font></font><span class="auto-style2">
				</span>

<font face="">

                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" align="left" class="auto-style2">
					<a href="Sub_VBA/WilliamExcelUtilities.zip" rel="internal" class="auto-style3">
					<strong><span class="auto-style4">Download </span></strong></a>
					<a href="Sub_VBA/WilliamExcelUtilities.zip" rel="internal" class="auto-style1">
					my Add-In tool (<em>run on 32-bit MS Office Excel</em>)</a></td>
                    </tr>
                                                
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" align="left" class="auto-style2">
					<a href="beginner_basic.htm" rel="internal" class="auto-style1">
					VBA Basic for beginners</a></td>
                    </tr>
                    
                    <tr width="159">
                    <td onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="Objects.htm" rel="internal" class="auto-style1">Excel 
					Main Objects</a></td>
                    </tr>
                    
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="rows_columns.htm" rel="internal" class="auto-style1">
					More with Rows, Columns, Cells, Range ...</a></td>
                    </tr>
                    
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="workaround_worksheet.htm" rel="internal" class="auto-style1">Working 
					around your Worksheet ...</a></td>
                    </tr>
                                        
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="statements.htm" rel="internal" class="auto-style1">
					Statements</a></td>
                    </tr>
                                   
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
 					<a href="functions.htm" rel="internal" class="auto-style1">
					Functions</a><span class="auto-style2"></font></span></td>
                    </tr>
                                   
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<font face="">	
 					<a href="loops.htm" rel="internal" class="auto-style1">
					Conditional Statements and Loops Structure</a></font></td>
                    </tr>
                                                                   
					<tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="errors_handling.htm" rel="internal" class="auto-style6">
					Errors Handling</a><span class="auto-style5"></font></span></td>
                    </tr>
                                        
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="userforms.htm" rel="internal" class="auto-style1">UserForms</a><span class="auto-style2"></font></span></td>
                    </tr>
                    
                    <tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="pivot_table.htm" rel="internal" class="auto-style1">
					Pivot Tables</a><span class="auto-style2"></font></span></td>
                    </tr>
					
					<tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<font face="">	
 					<a href="charting.htm" rel="internal" class="auto-style1">Charting</a></font></td>
                    </tr>		
					
					<tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<font face="">	
 					<a href="autofilter.htm" rel="internal" class="auto-style1">
					AutoFilter, Advanced Filter</a></font></td>
                    </tr>                            

					<tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<font face="">	
 					<a href="File_IO_VisualBasic.htm" rel="internal" class="auto-style1">
					File I/O VBA Examples</a></font></td>
                    </tr>     
					
					<tr width="159">
                    <td style="cursor: pointer" onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<font face="">	
 					<a href="ado_dao.htm" rel="internal" class="auto-style1">ADO and 
					DAO, integrating Excel and Access</a></font></td>
                    </tr>
                    
					<tr width="159">
                    <td onmouseover="this.style.backgroundColor='#339933'; this.style.cursor='hand'; this.style.cursor='pointer';" onmouseout="this.style.backgroundColor='#FFFF66';" bgcolor="#FFFF66" valign="middle" width="153" height="28" class="auto-style2">
					<a href="excel_fun_staff.htm" rel="internal" class="auto-style1">
					Other VBA fun staff</a></td>
                    </tr>


                    <tr HEIGHT="130" width="159">
                    <td bgcolor="#FFFF66" width="153" height="4780">
					<p></p>
					</tr>

					</TBODY></TABLE>
				</TD>
			</TR>
		</TBODY></TABLE>

<font face="">

<font face="">

<font face="">

<font face="">
						
			
<td bgcolor="#FFFFFF" WIDTH="1%"></td>
<td valign="top" width="80%">
      <!-- Start Page Content -->
		</font><font face="Arial">
		<p>
		<span lang="EN-GB" class="auto-style8">
		Debugging Errors</span><span lang="EN-GB" class="auto-style7"><br>
		</span></font><span lang="EN-GB" class="auto-style16">
		<br class="auto-style11">
		</span><font face="Arial">
		<span lang="EN-GB" class="auto-style2">
		There are three basic types of errors in VB programming &#8211; <b>syntax</b> 
		errors, <b>runtime</b> errors and <b>logic</b> errors.</span></p>
		<b>
		<span lang="EN-GB" class="auto-style12">
		Compile errors</span><span lang="EN-GB" style="font-size: 14.0pt; font-family: Times New Roman"><br>
		</span></b>
		</font>
		<span lang="EN-GB" class="auto-style16"><br class="auto-style11"></span><font face="Arial">
		<span lang="EN-GB" class="auto-style2">These 
		errors occur when you spell some words wrongly or omit a keyword. VBE 
		detects these errors immediately, highlight the erroneous code in red 
		and displays a warning message that this line contains a syntax error. A 
		simple example would be omitting the keyword Then or End If from the 
		If-Then-Else statement, omit some necessary punctuation, or use a Next 
		statement without a corresponding For statement at design time. Below is 
		such example.</span><p>
		<font size="2">
		<img border="0" src="Images_Others/compile_errors_1.gif" width="377" height="64"><br>
		<img border="0" src="Images_Others/compile_errors_2.gif" width="377" height="66"></font></p>
		<p>&nbsp;</p>
		</font>
		<p><span class="auto-style11">
		<span lang="EN-GB" class="auto-style10">
		Runtime</span><span lang="EN-GB" class="auto-style9">
		</span></span><b>
		<span class="auto-style11">
		<span lang="EN-GB" class="auto-style9">errors</span></span><font face="Arial"><span lang="EN-GB" style="font-size:16.0pt;
font-family:&quot;Times New Roman&quot;"><br>
		</span></font></b>
		<span lang="EN-GB" class="auto-style16"><br class="auto-style11"></span>
		<span lang="EN-GB" class="auto-style2">These are 
		errors that occur when the code is running, and is difficult to detect 
		until you run your program. A run-time error results when a statement 
		attempts an invalid operation. The following would illustrate this type 
		of error. Imagine column B is &#8216;qty&#8217;, column C is &#8216;unit cost&#8217;, column D 
		is &#8216;qty&#8217; * &#8216;unit cost&#8217;. An Input box asks to enter the number of rows to 
		do the computation, which is stored in variable nRows. If you enter a 
		value less than or equal to 250, the code runs without problem. If you 
		enter more than 250, the error dialog box as shown below will appear, 
		because the program will try to fill the array with more than it is 
		dimensioned for as in Dim myArray(250) As Integer. When you click on 
		Debug button, it will show you the offending line of code in yellow as 
		shown in the second diagram, which prompts you the clue about the error 
		in array.</span></p>
		<font face="Arial">
		<p>
		<span lang="EN-GB" style="color:#993300" class="auto-style2">Option Explicit</span></p>
		<span lang="EN-GB" style="color: #993300" class="auto-style2">
		Dim myArray(250) As Integer, i As Integer, nRows As Integer<br>
		nRows = InputBox(&quot;enter number of rows to do calculation&quot;)<br>
		For i = 1 To nRows<br>
		&nbsp;&nbsp;&nbsp; myArray(i) = Cells(i, 2) * Cells(i, 3)<br>
		&nbsp;&nbsp;&nbsp; Cells(i, 4) = myArray(i)<br>
		Next</span></font><font face=""><p>
		<img border="0" src="Images_Others/subscript_out_of_range_1.gif" width="371" height="68"><br>
		<img border="0" src="Images_Others/subscript_out_of_range_2.gif" width="371" height="56"><br>
		<img border="0" src="Images_Others/subscript_out_of_range_3.gif" width="371" height="81"></p>
		<p>
		<img border="0" src="Images_Others/run_time_error_1.gif" width="509" height="64"><br>
		<img border="0" src="Images_Others/run_time_error_2.gif" width="509" height="60"><br>
		<img border="0" src="Images_Others/run_time_error_3.gif" width="509" height="74"></p>
		</font>
		<p class="auto-style2">&nbsp;</p>
		<font face="">
		<p>
		<span lang="EN-GB" class="auto-style2">A simple 
		example to overcome the above runtime error is to re-dimension the array 
		with <b>REDIM</b> and use it with or without UBound function, as 
		illustrated in the following code. <b>UBound</b> returns the highest 
		available subscript for the indicated dimension of an array. (Note: If 
		Array has only one element, <b>UBound</b> returns 0. If Array has no 
		elements, for example if it is a zero-length string, <b>UBound</b> 
		returns -1)</span></p>
		<p>
		<span lang="EN-GB" style="color:#993300" class="auto-style2">Dim myArray() As Long, i As Long, nRows As Long<br>
		nRows = InputBox(&quot;enter number of rows to do calculation&quot;)<br>
		ReDim myArray(nRows)<br>
		&nbsp;For i = 1 To UBound(myArray)&nbsp;&nbsp; 'or using i = 1 To nRows<br>
		&nbsp; &nbsp;&nbsp;myArray(i) = Cells(i, 2) * Cells(i, 3)<br>
		&nbsp;&nbsp;&nbsp; Cells(i, 4) = myArray(i)<br>
		&nbsp;Next</span></p>
		<p>&nbsp;</p>
		<p>
		<span lang="EN-GB" class="auto-style13">
		Logic</span><span lang="EN-GB" class="auto-style12">
		</span></font><b>
		<span lang="EN-GB" class="auto-style12">errors</span><font face=""><span lang="EN-GB" style="font-size:16.0pt;
font-family:&quot;Times New Roman&quot;"><br>
		</span></font></b>
		<font face="">
		<span lang="EN-GB" class="auto-style2"><br>Program 
		logic error is an error in your code, however tiny it might be, that 
		produces incorrect results. You might not even get an error message to 
		tip you off about logic error. There is no syntactical error, your 
		program can compile and run just as normal, but you may get a different 
		result than you intended. A good example would be like copying data from 
		the wrong columns. It happened because the code doesn&#8217;t check which 
		window is active, and so it copied columns from the wrong workbook.</span></p>
		<p>
		<span lang="EN-GB" class="auto-style2">Below is 
		one example that demonstrates the logic error. There is no syntax error, 
		no runtime error, and the Average shows 11.39. Had you not 
		counterchecked with an Excel formula which shows Average value of 13.29, 
		you may not be aware that there was a program logic error. What went 
		wrong? The problem was because the code counted the numbers of cells 
		from A2 to G2. By amending the Offset position in line 3 to .Offset(0,1) 
		will resolve the logic error.</span></p>
		<p>
		<span lang="EN-GB" class="auto-style2">A code 
		that you created for Excel 2000 may not work in Excel 97, and may not 
		work properly both in Excel 2003 and Excel 2007. The problem may lies 
		with logic errors in the code and you have to find and fix it. IRAS runs 
		program on our yearly tax filings, and imagine there had been logic 
		errors, how much we had overpaid in tax? It&#8217;s scary to think of that&#8230;</span></p>
		<p>
		<span lang="EN-GB" style="color:#993300" class="auto-style2">Dim qohRng As Range, c As Range, sum As Single<br>
		With Range(&quot;A2&quot;)<br>
		&nbsp; Set qohRng = Range(.Offset(0, 0), .End(xlToRight))<br>
		End With<br>
		For Each c In qohRng<br>
		&nbsp;&nbsp;&nbsp; If IsNumeric(c.Value) Then<br>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sum = sum + c.Value<br>
		&nbsp;&nbsp;&nbsp; End If<br>
		Next c<br>
		Range(&quot;IV2&quot;).End(xlToLeft).Offset(, 1).Value = sum / qohRng.Cells.Count</span></p>
		<p>
		<img border="0" src="Images/logic_error.gif" width="372" height="97"></p>
		<p>&nbsp;</p>
		<p>
		<span lang="EN-GB" class="auto-style13">
		Debugging</span><span lang="EN-GB" class="auto-style12">
		</span>
		<span lang="EN-GB" class="auto-style13">
		Tools</span><span lang="EN-GB" style="font-size: 10.0pt; font-family: Arial"><br>
		</span></font><span lang="EN-GB" class="auto-style2"><br>Visual Basic cannot diagnose or fix errors for you, but it does provide 
		debugging tools to help you analyze how execution flows from one part of 
		the procedure to another, and how variables and property settings change 
		as statements are executed. To display the Debug toolbar, right-click on 
		the Visual Basic toolbar and select the Debug option, or you can choose 
		from menu, View&gt;Toolbars and sele</span><font face=""><span class="auto-style2">ct
		<a target="_blank" onclick="NewWindow(this.href,'debug_option','390','440','yes');return false" href="Images/debug_option.gif">Debug option</a>. 
		Below shows these debugging tools.<br>
		</span><span style="font-size: 10.0pt; font-family: Arial">&nbsp;</span></p>
		
		
<body text=#000000 bgcolor=#ffffff link=#007700 vlink=#000088 alink=#000000>
<table border=0 cellspacing=0 cellpadding=0 width=355 height=242>
<tr>
<td><img border=0 src="Images_Others/debug_toolbar_1.gif" height=81 width=118></td>
<td><img border=0 src="Images_Others/debug_toolbar_2.gif" height=81 width=119></td>
<td bgcolor="#FFFFFF" height=81 width=118></td>
</tr>
<tr>
<td><img border=0 src="Images_Others/debug_toolbar_4.gif" height=80 width=118></td>
<td><img border=0 src="Images_Others/debug_toolbar_5.gif" height=80 width=119></td>
<td><img border=0 src="Images_Others/debug_toolbar_6.gif" height=80 width=118></td>
</tr>
<tr>
<td bgcolor="#FFFFFF" height=81 width=118></td>
<td><img border=0 src="Images_Others/debug_toolbar_8.gif" height=81 width=119></td>
<td><img border=0 src="Images_Others/debug_toolbar_9.gif" height=81 width=118></td>
</tr>
</table>
<p style="margin-bottom:0in;margin-bottom:.0001pt">
<span lang="EN-GB" class="auto-style2">The following 
table briefly describes each tool's purpose.<br></span>
<span class="auto-style2">&nbsp;</span></p>
<table class="auto-style23" border="1" cellpadding="0" id="table6" cellspacing="0" style="width: 77%">
	<tr>
		<td valign="top" style="width:16%;" class="auto-style21">
		<p class="auto-style18">Debugging tool</td>
		<td width="80%" valign="top" style="width:80.56%;" class="auto-style21">
		<p align="center" class="auto-style19">Purpose:</td>
	</tr>
	<tr>
		<td valign="top" style="width:16%;" class="auto-style22">
		<p class="auto-style20">
		Breakpoint</td>
		<td width="80%" valign="top" style="width:80.56%;" class="auto-style22">
		<p class="auto-style20">
		Defines a line in the 
		Code window where Visual Basic suspends execution of the application.</td>
	</tr>
	<tr>
		<td valign="top" style="width:16%;" class="auto-style22">
		<p class="auto-style20">
		Step Into</td>
		<td width="80%" valign="top" style="width:80.56%;" class="auto-style22">
		<p class="auto-style20">
		Executes the next 
		executable line of code in the application and steps into procedures.</td>
	</tr>
	<tr>
		<td valign="top" style="width:16%;" class="auto-style22">
		<p class="auto-style20">
		Step Over</td>
		<td width="80%" valign="top" style="width:80.56%;" class="auto-style22">
		<p class="auto-style20">
		Executes the next 
		executable line of code in the application without stepping into 
		procedures.</td>
	</tr>
	<tr>
		<td valign="top" style="width:16%;" class="auto-style22">
		<p class="auto-style20">
		Step Out</td>
		<td width="80%" valign="top" style="width:80.56%;" class="auto-style22">
		<p class="auto-style20">
		Executes the 
		remainder of the current procedure and breaks at the next line in the 
		calling procedure.</td>
	</tr>
	<tr>
		<td valign="top" style="width:16%;" class="auto-style22">
		<p class="auto-style20">
		Locals Window</td>
		<td width="80%" valign="top" style="width:80.56%;" class="auto-style22">
		<p class="auto-style20">
		Displays the current 
		value of local variables.</td>
	</tr>
	<tr>
		<td valign="top" style="width:16%;" class="auto-style22">
		<p class="auto-style20">
		Immediate Window</td>
		<td width="80%" valign="top" style="width:80.56%;" class="auto-style22">
		<p class="auto-style20">
		Allows you to execute 
		code or query values while the application is in break mode.</td>
	</tr>
	<tr>
		<td valign="top" style="width:16%;" class="auto-style22">
		<p class="auto-style20">
		Watch window</td>
		<td width="80%" valign="top" style="width:80.56%;" class="auto-style22">
		<p class="auto-style20">
		Displays the values 
		of selected expressions.</td>
	</tr>
	<tr>
		<td valign="top" style="width:16%;" class="auto-style22">
		<p class="auto-style20">
		Quick Watch</td>
		<td width="80%" valign="top" style="width:80.56%;" class="auto-style22">
		<p class="auto-style20">
		Lists the current 
		value of an expression while the application is in break mode.</td>
	</tr>
	<tr>
		<td valign="top" style="width:16%;" class="auto-style22">
		<p class="auto-style20">
		Call Stack</td>
		<td width="80%" valign="top" style="width:80.56%;" class="auto-style22">
		<p class="auto-style20">
		While in break mode, 
		presents a dialog box that shows all procedures that have been called 
		but not yet run to completion.</td>
	</tr>
</table>
&nbsp;<p>
		
		<p style='margin-left:6.5in' class="auto-style2">		
		<a href="#TOP" style="color: blue; text-decoration: underline; text-underline: single">
		Return To Top</a></p>

		<b><span class="auto-style26">Breakpoint</span><span lang="EN-GB" class="auto-style2"><br>
</span></b><span lang="EN-GB" class="auto-style2">You 
can set any number of breakpoints in your procedure. A breakpoint will allow you 
to track down a bug by stopping execution of code at a particular point in your 
procedure. Breakpoint let you run parts of your procedure that have no errors at 
full speed and then stop at where you suspect there might be errors. You then 
step through the statements until all the bugs are found. If you want to 
interrupt while the code is running, you would press Ctrl-Break. To go to a 
breakpoint, there are two ways - click in the
<a target="_blank" href="Images/marginal_indicator.gif" onclick="NewWindow(this.href,'marg_indicator','530','250','yes');return false">
Marginal Indicator</a> bar to the left of the code window beside the line 
you want to stop execution at, or simply right-click on the line and choose
<span style="color:blue"><a target="_blank" href="Images/toggle_breakpoint.gif" onclick="NewWindow(this.href,'togglebreakpoint','550','500','yes');return false">
Toggle&gt;Breakpoint</a></span>.</span><p style="margin-bottom:0in;margin-bottom:.0001pt">
<span class="auto-style24">Step</span><span class="auto-style2">
</span><span class="auto-style24">Over</span><span lang="EN-GB" class="auto-style2">,
</span><span class="auto-style24">Step</span><span class="auto-style2">
</span><span class="auto-style24">Out</span><span class="auto-style2">
</span><span class="auto-style24">and</span><span class="auto-style2">
</span><span class="auto-style24">Run</span><span class="auto-style2">
</span><span class="auto-style24">To</span><span class="auto-style2">
</span><span class="auto-style24">
Cursor</span></font><span lang="EN-GB" class="auto-style16"><br class="auto-style11">
</span><font face=""><span lang="EN-GB" class="auto-style2">Break mode offers three command features to speed up stepping through your code 
&#8211; Step Over, Step Out and Run To Cursor. The Step Over and Step Out command are 
not available until you enter Break mode, for example, using Step Into command. 
Step Into command allows you to see exactly what each statement in your next 
line of code does.</span></p>
<p>
<span lang="EN-GB" class="auto-style2">Step Over command, 
as the word itself implies, executes the whole procedure or function called from 
the current procedure, instead of stepping through the called procedure 
statement-by-statement, as Step Into command would do. You use Step Over when 
you want to debug the procedure that calls another function or procedure.</span></p>
<p>
<span lang="EN-GB" class="auto-style2">Step Out command 
executes the remainder of the code in current procedure at full speed because 
you had already gotten the parts step-by-step using Step Over. Run To Cursor 
executes the code at full speed until it reaches the statement where your cursor 
is currently placed, whereupon it enters Break mode.</span></p>
<p style="margin-bottom:0in;margin-bottom:.0001pt">
<span class="auto-style24">Locals</span><span class="auto-style2">
</span><span class="auto-style24">
Window</span></p>
</font>
<span lang="EN-GB" style="font-family: Arial" class="auto-style16">
<font class="auto-style11">Locals window 
provides a quick readout of the value and type of all expressions in the active 
procedure via a collapsible window (<span style="color:blue"><a target="_blank" href="Images/locals_window.gif" onclick="NewWindow(this.href,'togglebreakpoint','520','450','yes');return false">see 
sample</a></span></font></span><span lang="EN-GB" class="auto-style2"></font></span><span lang="EN-GB" style="font-size: 10.0pt; font-family: Arial"><span lang="EN-GB" class="auto-style2">). The Expression column shows the name of each 
expression. The Value column shows the current values of the expression 
(including <b>Empty</b> if the expression is empty, or <b>Null</b> if a variable 
has no valid data, or <b>Nothing</b> if an object variable has disassociated 
itself from an actual object), and the Type column displays the data type of the 
expression..</span></span><p style="margin-bottom:0in;margin-bottom:.0001pt">
		<span class="auto-style24">
		Immediate</span><span class="auto-style2">
		</span>
		<span class="auto-style24">Window</span><span lang="EN-GB" class="auto-style16"><br class="auto-style11">
		</span><span lang="EN-GB" class="auto-style2">You can enter lines of code you want to test in the
		<a target="_blank" href="Images/ImmediateWindow.gif" onclick="NewWindow(this.href,'Immediate_Window','720','200','yes');return false">Immediate window</a>, 
		without entering them in the procedure itself, You can display 
		information in the Immediate window so that you can see the values of 
		the variables while your procedure is running. You can use Dedug.Print 
		method in your procedure to print information to the Immediate window 
		for quick testing, or using MsgBox function (press Enter when you are 
		done). You can run your lines of code in the Immediate window in both 
		Break mode and Design mode.</span></p>
		<span lang="EN-GB" class="auto-style2">
		However, there are restrictions on the code that you can use in the 
		Immediate window: you can&#8217;t use declaration statements (Option Explicit, 
		Dim, Private, etc) or control flow statements (GoTo, Sub, Function); you 
		can&#8217;t use multi-line statements (If-Then-Else, For...Next, etc); and you 
		can&#8217;t place Breakpoints.</span><p style="margin-bottom:0in;margin-bottom:.0001pt">
<span class="auto-style24">Watch</span><span class="auto-style2">
</span><span class="auto-style24">
Window</span><span lang="EN-GB" class="auto-style16"><br class="auto-style11">
</span><span lang="EN-GB" class="auto-style2">When you enter Break mode (example, by pressing F8), you can use 
<a target="_blank" href="Images/watch_window.gif" onclick="NewWindow(this.href,'watch_windw','420','200','yes');return false">Watch window</a> to 
track the running display of the values of the variables and expressions as each 
statement in the code executes. This information allows you to pinpoint where 
the unexpected values for a variable or expression occur as your code is 
running. As VBE stores watch expressions during the current editing session, so 
you can move from procedure to procedure without losing your watch expressions.&nbsp;</span></p>
<p>
<span lang="EN-GB" class="auto-style2">Before you can 
display a variable in the Watch window, you must declare it; otherwise VBE will 
show an error: &#8220;variable not created in this context&#8221;. If a variable or 
expression listed in the Watch window has not been initialised, you will see the 
display &#8220;&lt;Out of Context&gt;&#8221; in the Value column, and &#8220;Empty&#8221; in the Type column.&nbsp;</span></p>
<p>
<span lang="EN-GB" class="auto-style2">Right-click the 
variable or expression in your code, choose <b>Add</b> <b>Watch</b> from the 
shortcut menu. In the <a target="_blank" href="Images/add_watch.gif" onclick="NewWindow(this.href,'addWatch','420','310','yes');return false">Add Watch</a> 
dialog box, select one of the three options in the Watch Type group to define 
how the system responds to the watch expression. If you right-click on the watch 
expression in the Watch window, you can choose
<a target="_blank" href="Images/edit_watch.gif" onclick="NewWindow(this.href,'editWatch','420','310','yes');return false">Edit Watch</a>.</span></p>
		</font>
		<p style="text-indent: -.25in; margin-left: .25in">
		<font face="">
		<span lang="EN-GB" style="font-size: 10.0pt; font-family: Wingdings">:<span style="font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;" class="auto-style2">&nbsp;
		</span></span>
		<span lang="EN-GB" style="font-family:Arial" class="auto-style16">&#8220;</span></font><span lang="EN-GB" class="auto-style25">Watch Expression</span><font face=""><span lang="EN-GB" style="font-size:10.0pt;
" class="auto-style11"><span lang="EN-GB" style="font-family:Arial" class="auto-style16">&#8221; - it displays the value of the 
		watch expression.</span></span></p>
		<p style="text-indent: -.25in; margin-left: .25in">
		<span lang="EN-GB" style="font-size: 10.0pt; font-family: Wingdings">:<span style="font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;" class="auto-style2">&nbsp;
		</span></span>
		<span lang="EN-GB" style="font-family:Arial" class="auto-style16">&#8220;</span><span lang="EN-GB" class="auto-style25">Break When Value is True</span><font face=""><span lang="EN-GB" style="font-size:10.0pt;
" class="auto-style11"><span lang="EN-GB" style="font-family:Arial" class="auto-style16">&#8221; - it stops execution if the 
		expression evaluates to True (a non-zero value). In another words, it 
		allows you to run your code without stepping through each statement that 
		doesn&#8217;t change the value of the watch expression to True. </span> </span></p>
		<p style="text-indent: -.25in; margin-left: .25in">
		<span lang="EN-GB" style="font-size: 10.0pt; font-family: Wingdings">:<span style="font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;" class="auto-style2">&nbsp;</span></span><span lang="EN-GB" style="font-family:Arial" class="auto-style16">&#8220;</span><span lang="EN-GB" class="auto-style25">Break When Value Changes</span><font face=""><span lang="EN-GB" style="font-size:10.0pt;
" class="auto-style11"><span lang="EN-GB" style="font-family:Arial" class="auto-style16">&#8221; - it stops execution when 
		the value of the expression changes. That means it allows you to run 
		your code and stop with each change of the value.</span></span></p>
		<p style="margin-bottom:0in;margin-bottom:.0001pt"><b><i>
		<span class="auto-style16"><br class="auto-style11">
		</span>
		<font face="">
		<span class="auto-style2">Quick</span></font></i></b><font face=""><span class="auto-style2">
		</span>
		<span class="auto-style24">Watch</span><span class="auto-style2">
		</span><span class="auto-style25">
		feature</span></p>
		<span lang="EN-GB" class="auto-style2">You use 
		</span>
		<span class="auto-style2">
<a target="_blank" href="Images/quick_watch.gif" onclick="NewWindow(this.href,'quickWatch','440','180','yes');return false">Quick Watch</a></span><span lang="EN-GB" class="auto-style2"> 
		dialog box when you want to get quick information on a variable or 
		expression for which you don&#8217;t want to set a watch expression in the 
		Watch window.</span><p class="MsoNormal" style="margin-bottom:0in;margin-bottom:.0001pt">
		<span class="auto-style24">Call</span><span class="auto-style2">
		</span>
		<span class="auto-style24">Stack</span><span lang="EN-GB" class="auto-style2"> 
		dialog box</span></p>
		<span lang="EN-GB" class="auto-style2">Only in 
		Break mode you can use the
		<a target="_blank" href="Images/call_stack.gif" onclick="NewWindow(this.href,'Call_Stack','480','200','yes');return false">Call Stack</a> dialog 
		box to display a list of active procedure calls. From the View menu, 
		choose Call Stack. When you start to run a procedure, that procedure is 
		added to the Stack Call list. That procedure then calls another 
		procedure, the name of the second procedure is added to the Call Stack 
		list again. When the called procedure stops executing, it is then 
		removed from the Call Stack list. This way you are able to see what 
		procedures are being called by another procedure.</span><p>
		
		<p style='margin-left:6.5in'>
		<a name=Runtime_Errors_Handlers></a>		
		<font face="">
		<a href="#TOP" style="color: blue; text-decoration: underline; text-underline: single">
		<span class="auto-style2">Return To Top</span></a></p>

		</font>

		</font>

		</font>

		</font>
		<p><br>
		<span lang="EN-GB" class="auto-style14">
		Runtime</span><span lang="EN-GB" class="auto-style15">
		</span>
		<span lang="EN-GB" class="auto-style14">Errors</span><span lang="EN-GB" class="auto-style15">
		</span>
		<span lang="EN-GB" class="auto-style14">
		Handlers</span><span lang="EN-GB" style="font-size:10.0pt;font-family:Arial"><br>
		</span><span style="font-size:10.0pt;font-family:Arial">&nbsp;</span></font><span lang="EN-GB" class="auto-style2"><br></span>
		<span lang="EN-GB" class="auto-style2">Sometimes you can anticipate certain runtime errors that are likely to 
		occur and that can be trapped. Trapping an error means catching it so 
		that you can take action about it. For example, an error occurs when you 
		try to create a spreadsheet that is already exist, or you try to delete 
		or move a file that had already been removed, or you try to open a file 
		that is currently in use by another user. VBA allows you to write error 
		handlers that can trap runtime errors. To trap an error, you use the On 
		Error statement. You have to make sure your error-handler does not run 
		when no error has occurred. To do this, you use Exit Sub statement.</span></p>
		<font face="">
<p class="MsoNormal">
<span lang="EN-GB" style="font-size:10.0pt;font-family:Arial"><br>
</span>
<span lang="EN-GB" class="auto-style27">
On</span><span lang="EN-GB" class="auto-style12">
</span>
<span lang="EN-GB" class="auto-style27">
Error</span><span lang="EN-GB" class="auto-style12">
</span>
<span lang="EN-GB" class="auto-style27">
GoTo</span><span lang="EN-GB" class="auto-style12">&nbsp;
</span>

		</font><b>
<span lang="EN-GB" class="auto-style12">
statement</span><font face=""><span lang="EN-GB" style="font-size:16.0pt;font-family:&quot;Times New Roman&quot;"><br>
</span>

		</font></b>
		<font face="">
		<span lang="EN-GB" style="font-size:10.0pt;font-family:Arial"><br>I</span></font><span lang="EN-GB" class="auto-style2">n 
the example below, the GoTo statement directs execution to a label beyond the 
error-handler. The Resume statement resumes execution of the procedure after 
trapping a error with the error-handler.</span></p>
		<font face="">
<p class="MsoNormal">
<span lang="EN-GB" style="color:#993300" class="auto-style2">On Error GoTo errorhandler1<br>
&nbsp; &nbsp;Workbooks.Open Filename:=&quot;C:\FY07_UMC_week10.xls&quot;<br>
On Error GoTo errorhandler2<br>
&nbsp;&nbsp; Sheets(1).Rows(&quot;1:1&quot;).Find(What:=&quot;PartNumber&quot;, SearchDirection:=xlNext).Activate<br>
Exit Sub<br>
errorhandler1:<br>
&nbsp;&nbsp; If Err = 1004 Then<br>
&nbsp;&nbsp;&nbsp;&nbsp; MsgBox &quot;encountered runtime error&quot; &amp; Err &amp; &quot;. File doesn't exist&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resume<br>
&nbsp;&nbsp; End If<br>
errorhandler2:<br>
MsgBox &quot;can not find the header name 'Material' in Row 1&quot;</span></p>
<p class="MsoNormal">
<span lang="EN-GB" style="color:#993300" class="auto-style2">&nbsp;</span></p>
<p class="MsoNormal">
<span lang="EN-GB" class="auto-style24">
On</span><span lang="EN-GB" class="auto-style2">
</span>
<span lang="EN-GB" class="auto-style24">
Error</span><span lang="EN-GB" class="auto-style2">
</span>
<span lang="EN-GB" class="auto-style24">
Resume</span><span lang="EN-GB" class="auto-style2">
</span>
<span lang="EN-GB" class="auto-style24">
Next</span><span lang="EN-GB" class="auto-style2">
</span>

		</font><b>
<span lang="EN-GB" class="auto-style2">statement</span><font face=""><span lang="EN-GB" style="font-size:16.0pt;
font-family:&quot;Times New Roman&quot;"><br>
</span>

		</font></b>
		<font face="">
		<span lang="EN-GB" class="auto-style2"><br>This 
statement is useful if you want to suppress an unimportant error from 
displaying. The <b>On Error Resume Next</b> statement simply tells us, &#8220;if an 
error is encountered, ignore it and go on to the next statement&#8221;. In the example 
code below, assuming the sheet &#8220;week3data&#8221; does not exist, then no error message 
will be displayed, and the code will execute the message box statement &#8216;can not 
delete a non-existing sheet - error code 9&#8217;. Because each specific type of error 
will have a particular error code in VBA, and there are almost endless of them, 
so don&#8217;t bother to learn all these error codes. As <b>Err</b> is non-zero, and 
if you would notice the line &#8216;If Err &lt;&gt; 0 Then&#8217;, this simply means and if an 
error occurs in your code&#8230;then..; otherwise <b>Err</b> is <b>0</b>.</span></p>
<p class="MsoNormal">
<span lang="EN-GB" style="color:#993300" class="auto-style2">On Error Resume Next<br>
Application.DisplayAlert = False<br>
Worksheets(&quot;week10&quot;).Delete<br>
If Err &lt;&gt; 0 Then<br>
&nbsp;&nbsp;&nbsp; MsgBox &quot;can not delete a non-existing sheet - error code &quot; &amp; Err<br>
End If</span></p>
<p class="MsoNormal">
<span lang="EN-GB" class="auto-style2">&nbsp;</span></p>
<p class="MsoNormal">
<span lang="EN-GB" class="auto-style24">
On Error GoTo</span><span lang="EN-GB" class="auto-style27"> 0</span><span lang="EN-GB" style="font-size:10.0pt;font-family:
Arial"><br>
</span>

		</font><span lang="EN-GB" class="auto-style2"><br>Error handler works only for the procedure in which it is in, and it is disabled 
by VBA when the code has finished executing. However, you can also disable an 
error trap before the end of the procedure by using the statement On Error GoTo 
0</span></p>
		<font face="">
<p class="MsoNormal">
<span lang="EN-GB" style="color:#993300" class="auto-style2">Dim tableSEL As Range<br>
On Error Resume Next&nbsp;&nbsp;&nbsp; </span>
<span lang="EN-GB" style="color:#339966" class="auto-style2">' 
enable error handler</span><span lang="EN-GB" style="color:#993300" class="auto-style16"><br class="auto-style11">
</span>
		<font face="">
		<span lang="EN-GB" style="color:#993300" class="auto-style2">&nbsp; With Selection<br>
&nbsp;&nbsp;&nbsp; If .Cells.Count &gt; 1 Then&nbsp; </span>
<span lang="EN-GB" style="color:#339966" class="auto-style2">' number of cells count</span><span lang="EN-GB" style="color:#993300" class="auto-style16"><br class="auto-style11">
</span>
<span lang="EN-GB" style="color:#993300" class="auto-style2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set tableSEL = Selection<br>
&nbsp;&nbsp;&nbsp; Else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set tableSEL = .CurrentRegion<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; On Error GoTo 0 </span>
<span lang="EN-GB" style="color:#339966" class="auto-style2">' disable</span><span lang="EN-GB" style="color:#993300" class="auto-style2">
</span>
<span lang="EN-GB" style="color:#339966" class="auto-style2">
error</span><span lang="EN-GB" style="color:#993300" class="auto-style2">
</span>
<span lang="EN-GB" style="color:#339966" class="auto-style2">
handler</span><span lang="EN-GB" style="color:#993300" class="auto-style16"><br class="auto-style11">
</span><span lang="EN-GB" style="color:#993300" class="auto-style2">&nbsp;&nbsp;&nbsp; End If<br>
&nbsp; End With</span></p>
<p class="MsoNormal">
<span lang="EN-GB" style="color:#993300" class="auto-style2">&nbsp;</span></p>
<p class="MsoNormal">
<span lang="EN-GB" class="auto-style13">
Handling user interrupts</span><span lang="EN-GB" style="font-size:10.0pt;font-family:Arial"><br>
<br>I</span></font></font><span lang="EN-GB" class="auto-style2">f you want to disable user input or pressing Ctrl+Break key combination when 
your procedure is running, you can disable the <b>EnableCancelKey</b> property 
of the Application object by using <b>xlDisabled</b>.</span></p>
		<font face="">
<p class="MsoNormal">
<span lang="EN-GB" style="color:#993300" class="auto-style2">Application. EnableCancelKey = xlDisabled</span></p>
<p class="MsoNormal">
<span lang="EN-GB" class="auto-style2">You can re-enable 
the user input when the procedure is running by setting EnableCancelKey property 
to <b>xlInterrupt</b></span></p>
<p class="MsoNormal">
<span lang="EN-GB" style="color:#993300" class="auto-style2">Application.EnableCancelKey = xlInterrupt</span><span lang="EN-GB" class="auto-style2"><br>
<br>
</span>
		<font face="">
		<span lang="EN-GB" class="auto-style2">You can use <b>xlErrorHandler</b> to trap Ctrl+Break keystroke as error 18. See 
example below.</span></p>
<p class="MsoNormal">
<span lang="EN-GB" style="color: #993300" class="auto-style2">
Dim i As Long<br>
On Error GoTo errorhandler<br>
Application.EnableCancelKey = xlErrorHandler<br>
&nbsp; For i = 1 To 1000&nbsp;&nbsp; 'or using i = 1 To nRows<br>
&nbsp;&nbsp;&nbsp; Cells(i, 4) = Cells(i, 2) * Cells(i, 3)<br>
&nbsp; Next i<br>
errohandler:<br>
If Err.Number = 18 Then<br>
&nbsp;&nbsp; If MsgBox(&quot;do you really want to stop procedure running?&quot;, _<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbYesNo + vbCritical, &quot;user interrupted&quot;) = vbNo Then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resume<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else: End<br>
&nbsp;&nbsp; End If<br>
End If</span></body></p>

<p style='margin-left:6.5in' class="auto-style2">
<a href="#TOP" style="color: blue; text-decoration: underline; text-underline: single">
Return To Top</a></p>

		</font>

		</font></td>
</tr>

<font face="">

<tr>


<td valign="top">

    </td>
  </tr>
</tbody></table>

<table border="0" width="99%" id="table5">
<tr>
<td align="center">
<font class="auto-style11">	
<font size="2" class="auto-style16">




This site was created 
in Feb.2007<b><br></b>by William Tan</font></font></td>
</tr>
</table>
</body>
</html>